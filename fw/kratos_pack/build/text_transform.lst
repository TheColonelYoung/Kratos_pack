ARM GAS  /tmp/ccEv8ptb.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"text_transform.cpp"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.st
  16              		.align	2
  17              	.LC0:
  18 0000 62617369 		.ascii	"basic_string::append\000"
  18      635F7374 
  18      72696E67 
  18      3A3A6170 
  18      70656E64 
  19              		.section	.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_,"axG
  20              		.align	1
  21              		.weak	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_
  22              		.arch armv6s-m
  23              		.syntax unified
  24              		.code	16
  25              		.thumb_func
  26              		.fpu softvfp
  28              	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_:
  29              	.LVL0:
  30              	.LFB2366:
  31              		.file 1 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // <http://www.gnu.org/licenses/>.
ARM GAS  /tmp/ccEv8ptb.s 			page 2


  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** /** @file bits/basic_string.tcc
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****  */
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** //
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // ISO C++ 14882: 21  Strings library
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** //
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #pragma GCC system_header
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** {
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (this == &__s)
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	return;
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (_M_is_local())
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	if (__s._M_is_local())
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    if (length() && __s.length())
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      {
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      }
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    else if (__s.length())
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      {
ARM GAS  /tmp/ccEv8ptb.s 			page 3


  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		_M_length(__s.length());
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		__s._M_set_length(0);
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		return;
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      }
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    else if (length())
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      {
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		__s._M_length(length());
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		_M_set_length(0);
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		return;
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      }
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	else
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			      _S_local_capacity + 1);
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_data(__s._M_data());
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       else
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__s._M_is_local())
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    {
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				_S_local_capacity + 1);
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      __s._M_data(_M_data());
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_data(_M_local_buf);
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    }
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  else
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    {
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_data(__s._M_data());
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    }
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __tmp_length = length();
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_length(__s.length());
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __s._M_length(__tmp_length);
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__capacity > max_size())
ARM GAS  /tmp/ccEv8ptb.s 			page 4


 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__capacity > max_size())
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __capacity = max_size();
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // null char_type() element.
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     template<typename _InIterator>
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       void
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		   std::input_iterator_tag)
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       {
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	size_type __len = 0;
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_data()[__len++] = *__beg;
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    ++__beg;
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__try
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    while (__beg != __end)
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      {
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		if (__len == __capacity)
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  {
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    // Allocate more space.
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    __capacity = __len + 1;
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    pointer __another = _M_create(__capacity, __len);
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    this->_S_copy(__another, _M_data(), __len);
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    _M_dispose();
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    _M_data(__another);
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    _M_capacity(__capacity);
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  }
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		_M_data()[__len++] = *__beg;
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		++__beg;
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      }
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__catch(...)
ARM GAS  /tmp/ccEv8ptb.s 			page 5


 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_dispose();
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_set_length(__len);
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       }
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     template<typename _InIterator>
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       void
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		   std::forward_iterator_tag)
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       {
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__try
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__catch(...)
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_dispose();
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_set_length(__dnew);
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       }
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_construct(size_type __n, _CharT __c)
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n > size_type(_S_local_capacity))
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_data(_M_create(__n, size_type(0)));
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_capacity(__n);
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n)
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_S_assign(_M_data(), __n, __c);
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_set_length(__n);
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 6


 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_assign(const basic_string& __str)
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (this != &__str)
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __rsize = __str.length();
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __capacity = capacity();
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__rsize > __capacity)
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    {
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      size_type __new_capacity = __rsize;
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      pointer __tmp = _M_create(__new_capacity, __capacity);
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_dispose();
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_data(__tmp);
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_capacity(__new_capacity);
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    }
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__rsize)
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    this->_S_copy(_M_data(), __str._M_data(), __rsize);
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_set_length(__rsize);
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     reserve(size_type __res)
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // Make sure we don't shrink below the current size.
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__res < length())
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__res = length();
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __capacity = capacity();
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__res != __capacity)
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__res > __capacity
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      || __res > size_type(_S_local_capacity))
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    {
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      pointer __tmp = _M_create(__res, __capacity);
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      this->_S_copy(__tmp, _M_data(), length() + 1);
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_dispose();
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_data(__tmp);
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_capacity(__res);
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    }
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  else if (!_M_is_local())
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    {
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      this->_S_copy(_M_local_data(), _M_data(), length() + 1);
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_destroy(__capacity);
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      _M_data(_M_local_data());
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    }
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
ARM GAS  /tmp/ccEv8ptb.s 			page 7


 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      size_type __len2)
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __how_much = length() - __pos - __len1;
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       size_type __new_capacity = length() + __len2 - __len1;
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       pointer __r = _M_create(__new_capacity, capacity());
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__pos)
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_S_copy(__r, _M_data(), __pos);
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__s && __len2)
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_S_copy(__r + __pos, __s, __len2);
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__how_much)
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_S_copy(__r + __pos + __len2,
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		      _M_data() + __pos + __len1, __how_much);
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_dispose();
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_data(__r);
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_capacity(__new_capacity);
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_erase(size_type __pos, size_type __n)
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __how_much = length() - __pos - __n;
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__how_much && __n)
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_set_length(length() - __n);
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     resize(size_type __n, _CharT __c)
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __size = this->size();
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__size < __n)
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->append(__n - __size, __c);
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       else if (__n < __size)
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_M_set_length(__n);
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_append(const _CharT* __s, size_type __n)
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __len = __n + this->size();
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__len <= this->capacity())
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
ARM GAS  /tmp/ccEv8ptb.s 			page 8


 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__n)
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    this->_S_copy(this->_M_data() + this->size(), __s, __n);
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       else
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_M_mutate(this->size(), size_type(0), __s, __n);
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       this->_M_set_length(__len);
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     template<typename _InputIterator>
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>&
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			  _InputIterator __k1, _InputIterator __k2,
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			  std::__false_type)
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       {
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	const basic_string __s(__k1, __k2);
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	const size_type __n1 = __i2 - __i1;
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	return _M_replace(__i1 - begin(), __n1, __s._M_data(),
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			  __s.size());
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       }
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		   _CharT __c)
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __old_size = this->size();
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __new_size = __old_size + __n2 - __n1;
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__new_size <= this->capacity())
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  pointer __p = this->_M_data() + __pos1;
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __how_much = __old_size - __pos1 - __n1;
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__how_much && __n1 != __n2)
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    this->_S_move(__p + __n2, __p + __n1, __how_much);
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       else
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_M_mutate(__pos1, __n1, 0, __n2);
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n2)
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_S_assign(this->_M_data() + __pos1, __n2, __c);
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       this->_M_set_length(__new_size);
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
ARM GAS  /tmp/ccEv8ptb.s 			page 9


 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	       const size_type __len2)
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_check_length(__len1, __len2, "basic_string::_M_replace");
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __old_size = this->size();
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __new_size = __old_size + __len2 - __len1;
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__new_size <= this->capacity())
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  pointer __p = this->_M_data() + __pos;
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __how_much = __old_size - __pos - __len1;
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (_M_disjunct(__s))
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    {
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      if (__how_much && __len1 != __len2)
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		this->_S_move(__p + __len2, __p + __len1, __how_much);
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      if (__len2)
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		this->_S_copy(__p, __s, __len2);
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    }
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  else
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    {
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      // Work in-place.
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      if (__len2 && __len2 <= __len1)
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		this->_S_move(__p, __s, __len2);
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      if (__how_much && __len1 != __len2)
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		this->_S_move(__p + __len2, __p + __len1, __how_much);
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      if (__len2 > __len1)
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		{
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  if (__s + __len2 <= __p + __len1)
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    this->_S_move(__p, __s, __len2);
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  else if (__s >= __p + __len1)
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    this->_S_copy(__p, __s + __len2 - __len1, __len2);
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  else
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    {
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		      const size_type __nleft = (__p + __len1) - __s;
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		      this->_S_move(__p, __s, __nleft);
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		      this->_S_copy(__p + __nleft, __p + __len2,
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				    __len2 - __nleft);
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    }
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		}
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    }
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       else
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->_M_mutate(__pos, __len1, __s, __len2);
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       this->_M_set_length(__new_size);
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::size_type
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     copy(_CharT* __s, size_type __n, size_type __pos) const
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_check(__pos, "basic_string::copy");
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __n = _M_limit(__pos, __n);
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __glibcxx_requires_string_len(__s, __n);
ARM GAS  /tmp/ccEv8ptb.s 			page 10


 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n)
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_S_copy(__s, _M_data() + __pos, __n);
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // 21.3.5.7 par 3: do not append null.  (good.)
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return __n;
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #else  // !_GLIBCXX_USE_CXX11_ABI
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     const _CharT
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _Rep::_S_terminal = _CharT();
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // Linker sets _S_empty_rep_storage to all 0s (one reference, empty string)
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // at static init time (before static ctors are run).
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::size_type
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       sizeof(size_type)];
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     template<typename _InIterator>
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _CharT*
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		   input_iterator_tag)
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       {
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	if (__beg == __end && __a == _Alloc())
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  return _S_empty_rep()._M_refdata();
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #endif
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	// Avoid reallocation for common case.
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_CharT __buf[128];
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	size_type __len = 0;
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __buf[__len++] = *__beg;
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    ++__beg;
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_copy(__r->_M_refdata(), __buf, __len);
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__try
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
ARM GAS  /tmp/ccEv8ptb.s 			page 11


 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    while (__beg != __end)
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      {
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		if (__len == __r->_M_capacity)
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  {
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    // Allocate more space.
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    __r->_M_destroy(__a);
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    __r = __another;
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  }
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		__r->_M_refdata()[__len++] = *__beg;
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		++__beg;
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      }
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__catch(...)
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __r->_M_destroy(__a);
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__r->_M_set_length_and_sharable(__len);
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	return __r->_M_refdata();
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       }
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     template <typename _InIterator>
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _CharT*
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		   forward_iterator_tag)
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       {
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	if (__beg == __end && __a == _Alloc())
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  return _S_empty_rep()._M_refdata();
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #endif
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  __throw_logic_error(__N("basic_string::_S_construct null not valid"));
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	const size_type __dnew = static_cast<size_type>(std::distance(__beg,
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 								      __end));
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__try
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__catch(...)
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __r->_M_destroy(__a);
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  }
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__r->_M_set_length_and_sharable(__dnew);
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	return __r->_M_refdata();
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       }
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _CharT*
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
ARM GAS  /tmp/ccEv8ptb.s 			page 12


 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n == 0 && __a == _Alloc())
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	return _S_empty_rep()._M_refdata();
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #endif
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // Check for out_of_range and length_error exceptions.
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n)
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_assign(__r->_M_refdata(), __n, __c);
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __r->_M_set_length_and_sharable(__n);
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return __r->_M_refdata();
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(const basic_string& __str)
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 					  __str.get_allocator()),
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  __str.get_allocator())
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(const _Alloc& __a)
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(const basic_string& __str, size_type __pos, const _Alloc& __a)
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(_S_construct(__str._M_data()
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       + __str._M_check(__pos,
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 						"basic_string::basic_string"),
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       __str._M_data() + __str._M_limit(__pos, npos)
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       + __pos, __a), __a)
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(const basic_string& __str, size_type __pos, size_type __n)
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(_S_construct(__str._M_data()
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       + __str._M_check(__pos,
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 						"basic_string::basic_string"),
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       __str._M_data() + __str._M_limit(__pos, __n)
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       + __pos, _Alloc()), _Alloc())
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(const basic_string& __str, size_type __pos,
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		 size_type __n, const _Alloc& __a)
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(_S_construct(__str._M_data()
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       + __str._M_check(__pos,
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 						"basic_string::basic_string"),
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       __str._M_data() + __str._M_limit(__pos, __n)
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       + __pos, __a), __a)
ARM GAS  /tmp/ccEv8ptb.s 			page 13


 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // TBD: DPG annotate
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // TBD: DPG annotate
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(const _CharT* __s, const _Alloc& __a)
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       __s + npos, __a), __a)
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(size_type __n, _CharT __c, const _Alloc& __a)
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(_S_construct(__n, __c, __a), __a)
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   // TBD: DPG annotate
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     template<typename _InputIterator>
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(_S_construct(__beg, __end, __a), __a)
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #if __cplusplus >= 201103L
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string(initializer_list<_CharT> __l, const _Alloc& __a)
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     { }
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #endif
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     assign(const basic_string& __str)
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (_M_rep() != __str._M_rep())
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  // XXX MT
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const allocator_type __a = this->get_allocator();
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_rep()->_M_dispose(__a);
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_data(__tmp);
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
ARM GAS  /tmp/ccEv8ptb.s 			page 14


 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     assign(const _CharT* __s, size_type __n)
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __glibcxx_requires_string_len(__s, __n);
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_check_length(this->size(), __n, "basic_string::assign");
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	return _M_replace_safe(size_type(0), this->size(), __s, __n);
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       else
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  // Work in-place.
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __pos = __s - _M_data();
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__pos >= __n)
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_copy(_M_data(), __s, __n);
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  else if (__pos)
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_move(_M_data(), __s, __n);
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_rep()->_M_set_length_and_sharable(__n);
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  return *this;
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      }
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     append(size_type __n, _CharT __c)
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n)
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_check_length(size_type(0), __n, "basic_string::append");	  
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __len = __n + this->size();
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__len > this->capacity() || _M_rep()->_M_is_shared())
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    this->reserve(__len);
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_assign(_M_data() + this->size(), __n, __c);
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_rep()->_M_set_length_and_sharable(__len);
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     append(const _CharT* __s, size_type __n)
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __glibcxx_requires_string_len(__s, __n);
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n)
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_check_length(size_type(0), __n, "basic_string::append");
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __len = __n + this->size();
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__len > this->capacity() || _M_rep()->_M_is_shared())
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    {
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      if (_M_disjunct(__s))
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		this->reserve(__len);
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      else
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		{
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  const size_type __off = __s - _M_data();
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  this->reserve(__len);
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  __s = _M_data() + __off;
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		}
ARM GAS  /tmp/ccEv8ptb.s 			page 15


 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    }
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_copy(_M_data() + this->size(), __s, __n);
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_rep()->_M_set_length_and_sharable(__len);
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     append(const basic_string& __str)
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __size = __str.size();
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__size)
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __len = __size + this->size();
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__len > this->capacity() || _M_rep()->_M_is_shared())
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    this->reserve(__len);
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_copy(_M_data() + this->size(), __str._M_data(), __size);
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_rep()->_M_set_length_and_sharable(__len);
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }    
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     append(const basic_string& __str, size_type __pos, size_type __n)
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __str._M_check(__pos, "basic_string::append");
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __n = __str._M_limit(__pos, __n);
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n)
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __len = __n + this->size();
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__len > this->capacity() || _M_rep()->_M_is_shared())
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    this->reserve(__len);
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_rep()->_M_set_length_and_sharable(__len);	  
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****    template<typename _CharT, typename _Traits, typename _Alloc>
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      basic_string<_CharT, _Traits, _Alloc>&
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      basic_string<_CharT, _Traits, _Alloc>::
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      insert(size_type __pos, const _CharT* __s, size_type __n)
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      {
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        __glibcxx_requires_string_len(__s, __n);
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        _M_check(__pos, "basic_string::insert");
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        _M_check_length(size_type(0), __n, "basic_string::insert");
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****          return _M_replace_safe(__pos, size_type(0), __s, __n);
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        else
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****          {
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****            // Work in-place.
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****            const size_type __off = __s - _M_data();
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****            _M_mutate(__pos, 0, __n);
ARM GAS  /tmp/ccEv8ptb.s 			page 16


 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****            __s = _M_data() + __off;
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****            _CharT* __p = _M_data() + __pos;
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****            if (__s  + __n <= __p)
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****              _M_copy(__p, __s, __n);
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****            else if (__s >= __p)
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****              _M_copy(__p, __s + __n, __n);
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****            else
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****              {
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	       const size_type __nleft = __p - __s;
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****                _M_copy(__p, __s, __nleft);
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****                _M_copy(__p + __nleft, __p + __n, __n - __nleft);
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****              }
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****            return *this;
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****          }
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      }
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****    template<typename _CharT, typename _Traits, typename _Alloc>
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      typename basic_string<_CharT, _Traits, _Alloc>::iterator
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      basic_string<_CharT, _Traits, _Alloc>::
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      erase(iterator __first, iterator __last)
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      {
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        _GLIBCXX_DEBUG_PEDASSERT(__first >= _M_ibegin() && __first <= __last
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				&& __last <= _M_iend());
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        // NB: This isn't just an optimization (bail out early when
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        // there is nothing to do, really), it's also a correctness
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        // issue vs MT, see libstdc++/40518.
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        const size_type __size = __last - __first;
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        if (__size)
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	 {
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   const size_type __pos = __first - _M_ibegin();
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   _M_mutate(__pos, __size, size_type(0));
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   _M_rep()->_M_set_leaked();
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   return iterator(_M_data() + __pos);
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	 }
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        else
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	 return __first;
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      }
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****    template<typename _CharT, typename _Traits, typename _Alloc>
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      basic_string<_CharT, _Traits, _Alloc>&
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      basic_string<_CharT, _Traits, _Alloc>::
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      replace(size_type __pos, size_type __n1, const _CharT* __s,
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	     size_type __n2)
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      {
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        __glibcxx_requires_string_len(__s, __n2);
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        _M_check(__pos, "basic_string::replace");
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        __n1 = _M_limit(__pos, __n1);
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        _M_check_length(__n1, __n2, "basic_string::replace");
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        bool __left;
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****          return _M_replace_safe(__pos, __n1, __s, __n2);
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        else if ((__left = __s + __n2 <= _M_data() + __pos)
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		|| _M_data() + __pos + __n1 <= __s)
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	 {
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   // Work in-place: non-overlapping case.
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   size_type __off = __s - _M_data();
ARM GAS  /tmp/ccEv8ptb.s 			page 17


 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   __left ? __off : (__off += __n2 - __n1);
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   _M_mutate(__pos, __n1, __n2);
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   return *this;
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	 }
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****        else
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	 {
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   // Todo: overlapping case.
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   const basic_string __tmp(__s, __n2);
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	   return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	 }
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****      }
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::_Rep::
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_destroy(const _Alloc& __a) throw ()
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __size = sizeof(_Rep_base) +
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	                       (this->_M_capacity + 1) * sizeof(_CharT);
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_leak_hard()
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (_M_rep() == &_S_empty_rep())
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	return;
 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #endif
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (_M_rep()->_M_is_shared())
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_mutate(0, 0, 0);
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_rep()->_M_set_leaked();
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_mutate(size_type __pos, size_type __len1, size_type __len2)
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __old_size = this->size();
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __new_size = __old_size + __len2 - __len1;
 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __how_much = __old_size - __pos - __len1;
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  // Must reallocate.
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const allocator_type __a = get_allocator();
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__pos)
 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_copy(__r->_M_refdata(), _M_data(), __pos);
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__how_much)
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_copy(__r->_M_refdata() + __pos + __len2,
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    _M_data() + __pos + __len1, __how_much);
ARM GAS  /tmp/ccEv8ptb.s 			page 18


 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_rep()->_M_dispose(__a);
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_data(__r->_M_refdata());
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       else if (__how_much && __len1 != __len2)
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  // Work in-place.
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_move(_M_data() + __pos + __len2,
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		  _M_data() + __pos + __len1, __how_much);
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_rep()->_M_set_length_and_sharable(__new_size);
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     reserve(size_type __res)
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__res != this->capacity() || _M_rep()->_M_is_shared())
 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****         {
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  // Make sure we don't shrink below the current size
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__res < this->size())
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __res = this->size();
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const allocator_type __a = get_allocator();
 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_rep()->_M_dispose(__a);
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_data(__tmp);
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****         }
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     swap(basic_string& __s)
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value)
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (_M_rep()->_M_is_leaked())
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_rep()->_M_set_sharable();
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__s._M_rep()->_M_is_leaked())
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__s._M_rep()->_M_set_sharable();
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (this->get_allocator() == __s.get_allocator())
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _CharT* __tmp = _M_data();
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  _M_data(__s._M_data());
 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  __s._M_data(__tmp);
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // The code below can usually be optimized away.
 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       else
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const basic_string __tmp1(_M_ibegin(), _M_iend(),
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				    __s.get_allocator());
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				    this->get_allocator());
 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  *this = __tmp2;
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  __s = __tmp1;
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
ARM GAS  /tmp/ccEv8ptb.s 			page 19


 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::_Rep::
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _S_create(size_type __capacity, size_type __old_capacity,
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      const _Alloc& __alloc)
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__capacity > _S_max_size)
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__throw_length_error(__N("basic_string::_S_create"));
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // The standard places no restriction on allocating more memory
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // than is strictly needed within this layer at the moment or as
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // requested by an explicit application call to reserve().
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // Many malloc implementations perform quite poorly when an
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // application attempts to allocate memory in a stepwise fashion
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // growing each allocation size by only 1 char.  Additionally,
1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // it makes little sense to allocate less linear memory than the
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // natural blocking size of the malloc implementation.
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // Unfortunately, we would need a somewhat low-level calculation
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // with tuned parameters to get this perfect for any particular
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // malloc implementation.  Fortunately, generalizations about
1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // common features seen among implementations seems to suffice.
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // __pagesize need not match the actual VM page size for good
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // results in practice, thus we pick a common value on the low
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // side.  __malloc_header_size is an estimate of the amount of
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // overhead per memory allocation (in practice seen N * sizeof
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // (void*) where N is 0, 2 or 4).  According to folklore,
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // picking this value on the high side is better than
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // low-balling it (especially when this algorithm is used with
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // malloc implementations that allocate memory blocks rounded up
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // to a size which is a power of 2).
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __pagesize = 4096;
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __malloc_header_size = 4 * sizeof(void*);
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // It's active for allocations requiring an amount of memory above
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // system pagesize. This is consistent with the requirements of the
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // standard: http://gcc.gnu.org/ml/libstdc++/2001-07/msg00130.html
1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	__capacity = 2 * __old_capacity;
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // null char_type() element, plus enough for the _Rep data structure.
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // Whew. Seemingly so needy, yet so elemental.
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __adj_size = __size + __malloc_header_size;
1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__adj_size > __pagesize && __capacity > __old_capacity)
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	{
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  const size_type __extra = __pagesize - __adj_size % __pagesize;
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  __capacity += __extra / sizeof(_CharT);
ARM GAS  /tmp/ccEv8ptb.s 			page 20


1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  // Never allocate a string bigger than _S_max_size.
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  if (__capacity > _S_max_size)
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    __capacity = _S_max_size;
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	}
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // NB: Might throw, but no worries about a leak, mate: _Rep()
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // does not throw.
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _Rep *__p = new (__place) _Rep;
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __p->_M_capacity = __capacity;
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // ABI compatibility - 3.4.x set in _S_create both
1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // _M_refcount and _M_length.  All callers of _S_create
1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // in basic_string.tcc then set just _M_length.
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // In 4.0.x and later both _M_refcount and _M_length
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // are initialized in the callers, unfortunately we can
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // have 3.4.x compiled code with _S_create callers inlined
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // calling 4.0.x+ _S_create.
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __p->_M_set_sharable();
1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return __p;
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _CharT*
1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::_Rep::
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_clone(const _Alloc& __alloc, size_type __res)
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // Requested capacity of the clone.
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __requested_cap = this->_M_length + __res;
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				  __alloc);
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (this->_M_length)
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __r->_M_set_length_and_sharable(this->_M_length);
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return __r->_M_refdata();
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     void
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     resize(size_type __n, _CharT __c)
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const size_type __size = this->size();
1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_check_length(__size, __n, "basic_string::resize");
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__size < __n)
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->append(__n - __size, __c);
1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       else if (__n < __size)
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	this->erase(__n);
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // else nothing (in particular, avoid calling _M_mutate() unnecessarily.)
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     template<typename _InputIterator>
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>&
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
ARM GAS  /tmp/ccEv8ptb.s 			page 21


1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			  _InputIterator __k2, __false_type)
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       {
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	const basic_string __s(__k1, __k2);
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	const size_type __n1 = __i2 - __i1;
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 			       __s.size());
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       }
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		   _CharT __c)
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_mutate(__pos1, __n1, __n2);
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n2)
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_assign(_M_data() + __pos1, __n2, __c);
1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>&
1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 		    size_type __n2)
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_mutate(__pos1, __n1, __n2);
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n2)
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_copy(_M_data() + __pos1, __s, __n2);
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return *this;
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     template<typename _CharT, typename _Traits, typename _Alloc>
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::size_type
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     copy(_CharT* __s, size_type __n, size_type __pos) const
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_check(__pos, "basic_string::copy");
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __n = _M_limit(__pos, __n);
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __glibcxx_requires_string_len(__s, __n);
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       if (__n)
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	_M_copy(__s, _M_data() + __pos, __n);
1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       // 21.3.5.7 par 3: do not append null.  (good.)
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return __n;
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** #endif  // !_GLIBCXX_USE_CXX11_ABI
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****    
1156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
1157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>
1158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     operator+(const _CharT* __lhs,
  32              		.loc 1 1158 5 view -0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 0
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  36              		.loc 1 1158 5 is_stmt 0 view .LVU1
ARM GAS  /tmp/ccEv8ptb.s 			page 22


  37 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 20
  40              		.cfi_offset 4, -20
  41              		.cfi_offset 5, -16
  42              		.cfi_offset 6, -12
  43              		.cfi_offset 7, -8
  44              		.cfi_offset 14, -4
  45 0002 C646     		mov	lr, r8
  46 0004 00B5     		push	{lr}
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 24
  49              		.cfi_offset 8, -24
  50 0006 0400     		movs	r4, r0
  51 0008 0F00     		movs	r7, r1
  52 000a 1600     		movs	r6, r2
  53              	.LVL1:
  54              	.LBB2485:
  55              	.LBI2485:
  56              		.file 2 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****  */
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** //
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** //
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #pragma GCC system_header
ARM GAS  /tmp/ccEv8ptb.s 			page 23


  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** # define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #endif
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** {
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   /**
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     struct _Char_types
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef unsigned long   int_type;
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef std::streampos  pos_type;
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef std::streamoff  off_type;
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     };
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   /**
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    */
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     struct char_traits
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef _CharT                                    char_type;
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 24


  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { return __c1 < __c2; }
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       length(const char_type* __s);
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static char_type*
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static char_type*
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static char_type*
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       to_char_type(const int_type& __c)
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       to_int_type(const char_type& __c)
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       eof()
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       not_eof(const int_type& __c)
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     };
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
ARM GAS  /tmp/ccEv8ptb.s 			page 25


 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return -1;
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return 1;
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return 0;
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     }
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     length(const char_type* __p)
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       std::size_t __i = 0;
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****         ++__i;
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return __i;
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     }
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****         if (eq(__s[__i], __a))
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****           return __s + __i;
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return 0;
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     }
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       if (__n == 0)
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	return __s1;
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     }
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return __s1;
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     }
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
ARM GAS  /tmp/ccEv8ptb.s 			page 26


 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return __s;
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     }
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** } // namespace
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** {
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #define __cpp_lib_constexpr_char_traits 201611
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   /**
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a NULL-terminated
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  string are known at compile time.
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @param  __s  The string.
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    */
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     __constant_string_p(const _CharT* __s)
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       (void) __s;
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       // In constexpr contexts all strings should be constant.
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #else
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       while (__builtin_constant_p(*__s) && *__s)
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	__s++;
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return __builtin_constant_p(*__s);
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #endif
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     }
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   /**
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a character array are
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  known at compile time.
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @param  __a  The character array.
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @param  __n  Number of characters.
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    */
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<typename _CharT>
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     __constant_char_array_p(const _CharT* __a, size_t __n)
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       (void) __a;
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       (void) __n;
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       // In constexpr contexts all character arrays should be constant.
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #else
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       size_t __i = 0;
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       while (__i < __n && __builtin_constant_p(__a[__i]))
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	__i++;
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       return __i == __n;
ARM GAS  /tmp/ccEv8ptb.s 			page 27


 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #endif
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     }
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #endif
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   // 21.1
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   /**
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   */
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<class _CharT>
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     { };
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****   template<>
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     struct char_traits<char>
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****     {
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef char              char_type;
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef int               int_type;
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef streampos         pos_type;
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef streamoff         off_type;
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       typedef mbstate_t         state_type;
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	// LWG 467.
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	if (__n == 0)
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return 0;
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s1, __n)
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s2, __n))
ARM GAS  /tmp/ccEv8ptb.s 			page 28


 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #endif
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       length(const char_type* __s)
  57              		.loc 2 329 7 is_stmt 1 view .LVU2
  58              	.LBB2486:
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	if (__constant_string_p(__s))
  59              		.loc 2 332 2 view .LVU3
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #endif
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	return __builtin_strlen(__s);
  60              		.loc 2 335 2 view .LVU4
  61              		.loc 2 335 25 is_stmt 0 view .LVU5
  62 000c 0800     		movs	r0, r1
  63              	.LVL2:
  64              		.loc 2 335 25 view .LVU6
  65 000e FFF7FEFF 		bl	strlen
  66              	.LVL3:
  67              		.loc 2 335 25 view .LVU7
  68 0012 0500     		movs	r5, r0
  69              	.LVL4:
  70              		.loc 2 335 25 view .LVU8
  71              	.LBE2486:
  72              	.LBE2485:
  73              	.LBB2487:
  74              	.LBI2487:
  75              		.file 3 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // Copyright (C) 1997-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** /** @file bits/basic_string.h
ARM GAS  /tmp/ccEv8ptb.s 			page 29


  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****  */
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** //
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** //
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #pragma GCC system_header
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #include <debug/debug.h>
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #include <initializer_list>
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** # include <string_view>
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** {
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @ingroup strings
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @ingroup sequences
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *                   char_traits<_CharT>.
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     class basic_string
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     {
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 30


  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Types:
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     public:
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef _Traits					traits_type;
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 							const_iterator;
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     protected:
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus < 201103L
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef iterator __const_iterator;
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     private:
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _Res>;
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static __sv_type
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __svt; }
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // allows to add an internal constructor that does not
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // participate in overload resolution when a string_view
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // is provided.
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       struct __sv_wrapper
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__sv_type _M_sv;
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       };
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
ARM GAS  /tmp/ccEv8ptb.s 			page 31


 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *          wrapper.
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       explicit
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus < 201103L
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       };
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type		_M_string_length;
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       union
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       };
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_data(pointer __p)
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_length(size_type __length)
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       pointer
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_data() const
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       pointer
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_local_data()
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return pointer(_M_local_buf);
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
ARM GAS  /tmp/ccEv8ptb.s 			page 32


 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_pointer
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_local_data() const
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_set_length(size_type __n)
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_length(__n);
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_is_local() const
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Create & Destroy
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       pointer
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_create(size_type&, size_type);
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_dispose()
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (!_M_is_local())
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _InIterator>
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         void
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 std::__false_type)
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Integer>
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         void
ARM GAS  /tmp/ccEv8ptb.s 			page 33


 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_construct(__req, __c); }
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _InIterator>
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         void
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         }
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _InIterator>
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         void
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     std::input_iterator_tag);
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _FwdIterator>
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         void
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     std::forward_iterator_tag);
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       allocator_type&
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_get_allocator()
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const allocator_type&
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_get_allocator() const
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     private:
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
ARM GAS  /tmp/ccEv8ptb.s 			page 34


 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__pos > this->size())
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				   __s, __pos, this->size());
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return __pos;
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // traits_type::copy/move/assign.
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n == 1)
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n == 1)
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n == 1)
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
ARM GAS  /tmp/ccEv8ptb.s 			page 35


 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _Iterator>
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         static void
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         {
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static int
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return int(__d);
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_assign(const basic_string&);
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		size_type __len2);
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     public:
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Construct/copy/destroy:
ARM GAS  /tmp/ccEv8ptb.s 			page 36


 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string()
  76              		.loc 3 431 7 is_stmt 1 view .LVU9
  77              	.LBB2488:
  78              	.LBI2488:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
  79              		.loc 3 190 7 view .LVU10
  80              	.LBB2489:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
  81              		.loc 3 193 51 is_stmt 0 view .LVU11
  82 0014 2300     		movs	r3, r4
  83 0016 0833     		adds	r3, r3, #8
  84              	.LVL5:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
  85              		.loc 3 193 51 view .LVU12
  86              	.LBE2489:
  87              	.LBE2488:
  88              	.LBB2490:
  89              	.LBI2490:
  90              		.file 4 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  *
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
ARM GAS  /tmp/ccEv8ptb.s 			page 37


  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  */
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** /** @file bits/allocator.h
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  */
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #include <type_traits>
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #endif
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** # define __cpp_lib_allocator_is_always_equal 201411
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #endif
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** {
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   /**
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  @addtogroup allocators
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  @{
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    */
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   /// allocator<void> specialization.
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   template<>
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     class allocator<void>
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     {
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     public:
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef size_t      size_type;
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef void*       pointer;
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef const void* const_pointer;
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef void        value_type;
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       template<typename _Tp1>
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	struct rebind
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       template<typename _Up, typename... _Args>
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	void
ARM GAS  /tmp/ccEv8ptb.s 			page 38


  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	noexcept(noexcept(::new((void *)__p)
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 			    _Up(std::forward<_Args>(__args)...)))
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       template<typename _Up>
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	void
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	destroy(_Up* __p)
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	noexcept(noexcept(__p->~_Up()))
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	{ __p->~_Up(); }
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #endif
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     };
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   /**
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  for further details.
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    */
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   template<typename _Tp>
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     {
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    public:
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef size_t     size_type;
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef _Tp*       pointer;
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef const _Tp* const_pointer;
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef _Tp&       reference;
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef const _Tp& const_reference;
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef _Tp        value_type;
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       template<typename _Tp1>
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	struct rebind
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #endif
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
  91              		.loc 4 138 7 is_stmt 1 view .LVU13
  92              	.LBB2491:
  93              	.LBI2491:
  94              		.file 5 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** //
ARM GAS  /tmp/ccEv8ptb.s 			page 39


   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****  */
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <new>
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <bits/move.h>
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <type_traits>
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** {
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****   using std::size_t;
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****   /**
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *  @ingroup allocators
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    */
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****   template<typename _Tp>
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****     class new_allocator
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****     {
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****     public:
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef size_t     size_type;
ARM GAS  /tmp/ccEv8ptb.s 			page 40


  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	struct rebind
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  95              		.loc 5 80 7 view .LVU14
  96              		.loc 5 80 7 is_stmt 0 view .LVU15
  97              	.LBE2491:
  98              	.LBE2490:
  99              	.LBB2492:
 100              	.LBI2492:
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 101              		.loc 3 159 2 is_stmt 1 view .LVU16
 102              	.LBB2493:
 103              	.LBB2494:
 104              	.LBI2494:
 105              		.file 6 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** /** @file bits/move.h
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
ARM GAS  /tmp/ccEv8ptb.s 			page 41


  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****  */
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #ifndef _MOVE_H
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #define _MOVE_H 1
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #include <bits/c++config.h>
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #include <bits/concept_check.h>
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** {
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   /**
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @ingroup utilities
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    */
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   template<typename _Tp>
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return __builtin_addressof(__r); }
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #if __cplusplus >= 201103L
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** } // namespace
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** {
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   /**
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @addtogroup utilities
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @{
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    */
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   /**
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @brief  Forward an lvalue.
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    */
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   template<typename _Tp>
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     constexpr _Tp&&
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   /**
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @brief  Forward an rvalue.
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    */
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   template<typename _Tp>
ARM GAS  /tmp/ccEv8ptb.s 			page 42


  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     constexpr _Tp&&
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     {
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****       return static_cast<_Tp&&>(__t);
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     }
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   /**
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   */
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   template<typename _Tp>
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     move(_Tp&& __t) noexcept
 106              		.loc 6 99 5 view .LVU17
 107              		.loc 6 99 5 is_stmt 0 view .LVU18
 108              	.LBE2494:
 109              	.LBB2495:
 110              	.LBI2495:
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 111              		.loc 4 141 7 is_stmt 1 view .LVU19
 112              	.LBB2496:
 113              	.LBI2496:
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 114              		.loc 5 83 7 view .LVU20
 115              		.loc 5 83 7 is_stmt 0 view .LVU21
 116              	.LBE2496:
 117              	.LBE2495:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 118              		.loc 3 160 46 view .LVU22
 119 0018 2360     		str	r3, [r4]
 120              	.LVL6:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 121              		.loc 3 160 46 view .LVU23
 122              	.LBE2493:
 123              	.LBE2492:
 124              	.LBB2497:
 125              	.LBI2497:
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // Avoid implicit deprecation.
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #endif
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       template<typename _Tp1>
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 126              		.loc 4 153 7 is_stmt 1 view .LVU24
ARM GAS  /tmp/ccEv8ptb.s 			page 43


 127              	.LBB2498:
 128              	.LBI2498:
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 129              		.loc 5 89 7 view .LVU25
 130              		.loc 5 89 7 is_stmt 0 view .LVU26
 131              	.LBE2498:
 132              	.LBE2497:
 133              	.LBB2499:
 134              	.LBI2499:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 135              		.loc 3 214 7 is_stmt 1 view .LVU27
 136              	.LBB2500:
 137              	.LBI2500:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 138              		.loc 3 182 7 view .LVU28
 139              	.LBB2501:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 140              		.loc 3 183 9 is_stmt 0 view .LVU29
 141 001a 0023     		movs	r3, #0
 142 001c 6360     		str	r3, [r4, #4]
 143              	.LVL7:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 144              		.loc 3 183 9 view .LVU30
 145              	.LBE2501:
 146              	.LBE2500:
 147              	.LBB2502:
 148              	.LBI2502:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 149              		.loc 2 299 7 is_stmt 1 view .LVU31
 150              	.LBB2503:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 151              		.loc 2 300 9 view .LVU32
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 152              		.loc 2 300 14 is_stmt 0 view .LVU33
 153 001e 2372     		strb	r3, [r4, #8]
 154              	.LVL8:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 155              		.loc 2 300 14 view .LVU34
 156              	.LBE2503:
 157              	.LBE2502:
 158              	.LBE2499:
 159              	.LBE2487:
 160              	.LBB2504:
 161              	.LBI2504:
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       explicit
ARM GAS  /tmp/ccEv8ptb.s 			page 44


 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str)
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		   size_type __n)
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const _CharT* __start
ARM GAS  /tmp/ccEv8ptb.s 			page 45


 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __s  Source character %array.
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  has no special meaning.
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __s  Source C string.
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters.
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __c  Character to use.
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_construct(__n, __c); }
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Move construct string.
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        **/
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
ARM GAS  /tmp/ccEv8ptb.s 			page 46


 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_length(__str.length());
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__str._M_set_length(0);
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 47


 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __beg  Start of range.
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __end  End of range.
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _InputIterator,
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _InputIterator>
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a   Allocator to use.
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	explicit
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ~basic_string()
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(const basic_string& __str)
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccEv8ptb.s 			page 48


 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  {
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    _M_data(_M_local_data());
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    _M_set_length(0);
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		else
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  {
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    const auto __len = __str.size();
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    _M_data(__ptr);
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    _M_capacity(__len);
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    _M_set_length(__len);
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      }
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->assign(__str);
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(const _CharT* __s)
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->assign(__s); }
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __c  Source character.
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  (*this)[0] == @a c.
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(_CharT __c)
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->assign(1, __c);
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
ARM GAS  /tmp/ccEv8ptb.s 			page 49


 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        **/
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(basic_string&& __str)
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_data(_M_local_data());
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_set_length(0);
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    // We've always got room for a short string, just copy it.
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (__str.size())
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_set_length(__str.size());
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_propagate_on_move_assign()
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    || _Alloc_traits::_S_always_equal()
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    || _M_get_allocator() == __str._M_get_allocator())
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    // Just move the allocated pointer, our allocator can free it.
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    pointer __data = nullptr;
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    size_type __capacity;
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (!_M_is_local())
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  {
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    // __str can reuse our existing storage.
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    __data = _M_data();
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		else // __str can't use it, so free it.
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      }
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (__data)
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		__str._M_data(__data);
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      }
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    else
ARM GAS  /tmp/ccEv8ptb.s 			page 50


 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else // Need to do a deep copy
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  assign(__str);
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__str.clear();
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****      template<typename _Tp>
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        _If_sv<_Tp, basic_string&>
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        operator=(const _Tp& __svt)
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        { return this->assign(__svt); }
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Convert to a string_view.
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return A string_view.
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator __sv_type() const noexcept
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(data(), size()); }
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Iterators:
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the %string.
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return iterator(_M_data()); }
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character in the %string.
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_iterator
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
ARM GAS  /tmp/ccEv8ptb.s 			page 51


 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character in the %string.
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  last character in the %string.
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_iterator
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  order.
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reverse_iterator
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  reverse element order.
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reverse_iterator
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  element order.
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reverse_iterator
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is done in reverse element order.
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reverse_iterator
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character in the %string.
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_iterator
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       cbegin() const noexcept
ARM GAS  /tmp/ccEv8ptb.s 			page 52


 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  last character in the %string.
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_iterator
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       cend() const noexcept
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  reverse element order.
 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reverse_iterator
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       crbegin() const noexcept
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is done in reverse element order.
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reverse_iterator
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       crend() const noexcept
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     public:
 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Capacity:
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  null-termination.
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 162              		.loc 3 930 7 is_stmt 1 view .LVU35
 163              		.loc 3 930 7 is_stmt 0 view .LVU36
 164              	.LBE2504:
1159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
1160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     {
1161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __glibcxx_requires_string(__lhs);
1162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
1163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       typedef typename __string_type::size_type	  __size_type;
1164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       const __size_type __len = _Traits::length(__lhs);
1165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __string_type __str;
1166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __str.reserve(__len + __rhs.size());
 165              		.loc 1 1166 7 view .LVU37
 166 0020 7368     		ldr	r3, [r6, #4]
 167 0022 1918     		adds	r1, r3, r0
 168 0024 2000     		movs	r0, r4
 169              	.LVL9:
 170              		.loc 1 1166 7 view .LVU38
 171 0026 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj
 172              	.LVL10:
 173              	.LBB2505:
 174              	.LBI2505:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
ARM GAS  /tmp/ccEv8ptb.s 			page 53


 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  null-termination.
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  setting them to 0.
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       resize(size_type __n)
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       shrink_to_fit() noexcept
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cpp_exceptions
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (capacity() > size())
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    try
 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      { reserve(0); }
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    catch(...)
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      { }
 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccEv8ptb.s 			page 54


 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  before needing to allocate more memory.
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *          characters.
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  data.
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Erases the string, making it empty.
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  <code>*this == ""</code>.
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->size() == 0; }
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Element access:
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  see at().)
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reference
ARM GAS  /tmp/ccEv8ptb.s 			page 55


1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  see at().)
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reference
1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator[](size_type __pos)
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// and in C++11 mode.
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reference
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       at(size_type __n) const
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n >= this->size())
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				   __n, this->size());
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_data()[__n];
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
ARM GAS  /tmp/ccEv8ptb.s 			page 56


1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reference
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       at(size_type __n)
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n >= size())
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				   __n, this->size());
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_data()[__n];
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  element of the %string.
1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reference
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       front() noexcept
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return operator[](0);
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  element of the %string.
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reference
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       front() const noexcept
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return operator[](0);
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  element of the %string.
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reference
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       back() noexcept
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  last element of the %string.
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reference
1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       back() const noexcept
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
1158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
ARM GAS  /tmp/ccEv8ptb.s 			page 57


1160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Modifiers:
1162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
1164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator+=(const basic_string& __str)
1169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->append(__str); }
1170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
1173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator+=(const _CharT* __s)
1178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->append(__s); }
1179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a character.
1182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to append.
1183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator+=(_CharT __c)
1187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->push_back(__c);
1189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
1190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
1202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
1210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
1212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{ return this->append(__svt); }
1213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
1214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
ARM GAS  /tmp/ccEv8ptb.s 			page 58


1217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(const basic_string& __str)
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a substring.
1226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  remainder of @a __str is appended.
1236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data()
1240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a C substring.
1245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
 175              		.loc 3 1250 7 is_stmt 1 view .LVU39
 176              	.LBB2506:
 177              	.LBB2507:
 178              	.LBI2507:
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 179              		.loc 3 320 7 view .LVU40
 180              	.LBB2508:
 181              	.LBB2509:
 182              	.LBI2509:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 183              		.loc 3 930 7 view .LVU41
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 184              		.loc 3 930 7 is_stmt 0 view .LVU42
 185              	.LBE2509:
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 186              		.loc 3 322 2 view .LVU43
 187 002a 0B4B     		ldr	r3, .L4
 188 002c 6268     		ldr	r2, [r4, #4]
 189 002e 9B1A     		subs	r3, r3, r2
 190 0030 9D42     		cmp	r5, r3
 191 0032 0DD8     		bhi	.L3
 192              	.LVL11:
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
ARM GAS  /tmp/ccEv8ptb.s 			page 59


 193              		.loc 3 322 2 view .LVU44
 194              	.LBE2508:
 195              	.LBE2507:
1251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_append(__s, __n);
 196              		.loc 3 1254 27 view .LVU45
 197 0034 2A00     		movs	r2, r5
 198 0036 3900     		movs	r1, r7
 199 0038 2000     		movs	r0, r4
 200 003a FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj
 201              	.LVL12:
 202              		.loc 3 1254 27 view .LVU46
 203              	.LBE2506:
 204              	.LBE2505:
 205              	.LBB2513:
 206              	.LBI2513:
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
 207              		.loc 3 1221 7 is_stmt 1 view .LVU47
 208              	.LBB2514:
 209              	.LBB2515:
 210              	.LBI2515:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 211              		.loc 3 186 7 view .LVU48
 212              	.LBB2516:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 213              		.loc 3 187 28 is_stmt 0 view .LVU49
 214 003e 3168     		ldr	r1, [r6]
 215              	.LVL13:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 216              		.loc 3 187 28 view .LVU50
 217              	.LBE2516:
 218              	.LBE2515:
 219              	.LBB2517:
 220              	.LBI2517:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 221              		.loc 3 930 7 is_stmt 1 view .LVU51
 222              	.LBB2518:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 223              		.loc 3 931 16 is_stmt 0 view .LVU52
 224 0040 7268     		ldr	r2, [r6, #4]
 225              	.LVL14:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 226              		.loc 3 931 16 view .LVU53
 227              	.LBE2518:
 228              	.LBE2517:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 229              		.loc 3 1222 55 view .LVU54
 230 0042 2000     		movs	r0, r4
 231 0044 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj
 232              	.LVL15:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 233              		.loc 3 1222 55 view .LVU55
 234              	.LBE2514:
 235              	.LBE2513:
1167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __str.append(__lhs, __len);
ARM GAS  /tmp/ccEv8ptb.s 			page 60


1168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       __str.append(__rhs);
1169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       return __str;
1170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****     }
 236              		.loc 1 1170 5 view .LVU56
 237 0048 2000     		movs	r0, r4
 238              		@ sp needed
 239              	.LVL16:
 240              	.LVL17:
 241              	.LVL18:
 242              	.LVL19:
 243              		.loc 1 1170 5 view .LVU57
 244 004a 80BC     		pop	{r7}
 245 004c B846     		mov	r8, r7
 246 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 247              	.LVL20:
 248              	.L3:
 249              	.LBB2519:
 250              	.LBB2512:
 251              	.LBB2511:
 252              	.LBB2510:
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 253              		.loc 3 323 24 view .LVU58
 254 0050 0248     		ldr	r0, .L4+4
 255 0052 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 256              	.LVL21:
 257              	.L5:
 258 0056 C046     		.align	2
 259              	.L4:
 260 0058 FFFFFF3F 		.word	1073741823
 261 005c 00000000 		.word	.LC0
 262              	.LBE2510:
 263              	.LBE2511:
 264              	.LBE2512:
 265              	.LBE2519:
 266              		.cfi_endproc
 267              	.LFE2366:
 269              		.section	.text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIc
 270              		.align	1
 271              		.weak	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_
 272              		.syntax unified
 273              		.code	16
 274              		.thumb_func
 275              		.fpu softvfp
 277              	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsI
 278              	.LVL22:
 279              	.LFB2554:
 280              		.file 7 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // RB tree implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 61


  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Copyright (c) 1996,1997
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Silicon Graphics Computer Systems, Inc.
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * in supporting documentation.  Silicon Graphics makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Copyright (c) 1994
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Hewlett-Packard Company
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  */
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** /** @file bits/stl_tree.h
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *  This is an internal header file, included by other library headers.
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *  Do not attempt to use it directly. @headername{map,set}
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  */
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #ifndef _STL_TREE_H
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #define _STL_TREE_H 1
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #pragma GCC system_header
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <bits/stl_algobase.h>
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <bits/allocator.h>
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <bits/stl_function.h>
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <bits/cpp_type_traits.h>
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <ext/alloc_traits.h>
ARM GAS  /tmp/ccEv8ptb.s 			page 62


  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # include <ext/aligned_buffer.h>
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201402L
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # include <bits/node_handle.h>
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** namespace std _GLIBCXX_VISIBILITY(default)
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** {
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201103L
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # define __cpp_lib_generic_associative_lookup 201304
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // Red-black tree class, designed for use in implementing STL
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // associative containers (set, multiset, map, and multimap). The
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // insertion and deletion algorithms are based on those in Cormen,
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // Leiserson, and Rivest, Introduction to Algorithms (MIT Press,
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // 1990), except that
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   //
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // (1) the header cell is maintained with links not only to the root
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // but also to the leftmost node of the tree, to enable constant
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // time begin(), and to the rightmost node of the tree, to enable
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // linear time performance when used with the generic set algorithms
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // (set_union, etc.)
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   //
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // (2) when a node being deleted has two children its successor node
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // is relinked into its place, rather than copied, so that the only
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // iterators invalidated are those referring to the deleted node.
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   enum _Rb_tree_color { _S_red = false, _S_black = true };
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   struct _Rb_tree_node_base
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   {
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typedef _Rb_tree_node_base* _Base_ptr;
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typedef const _Rb_tree_node_base* _Const_Base_ptr;
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree_color	_M_color;
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Base_ptr		_M_parent;
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Base_ptr		_M_left;
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Base_ptr		_M_right;
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     static _Base_ptr
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x->_M_left != 0) __x = __x->_M_left;
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return __x;
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     static _Const_Base_ptr
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x->_M_left != 0) __x = __x->_M_left;
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return __x;
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 63


 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     static _Base_ptr
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x->_M_right != 0) __x = __x->_M_right;
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return __x;
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     static _Const_Base_ptr
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x->_M_right != 0) __x = __x->_M_right;
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return __x;
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   };
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // Helper type offering value initialization guarantee on the compare functor.
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key_compare>
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_key_compare
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Key_compare		_M_key_compare;
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_key_compare()
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_NOEXCEPT_IF(
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	is_nothrow_default_constructible<_Key_compare>::value)
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_key_compare()
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_key_compare(const _Key_compare& __comp)
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_key_compare(__comp)
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Copy constructor added for consistency with C++98 mode.
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_key_compare(_Rb_tree_key_compare&& __x)
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	noexcept(is_nothrow_copy_constructible<_Key_compare>::value)
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_key_compare(__x._M_key_compare)
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     };
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // Helper type to manage default initialization of node count and header.
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   struct _Rb_tree_header
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   {
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree_node_base	_M_header;
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     size_t		_M_node_count; // Keeps track of size of tree.
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree_header() _GLIBCXX_NOEXCEPT
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_color = _S_red;
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reset();
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree_header(_Rb_tree_header&& __x) noexcept
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
ARM GAS  /tmp/ccEv8ptb.s 			page 64


 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__x._M_header._M_parent != nullptr)
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_move_data(__x);
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_header._M_color = _S_red;
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_reset();
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_move_data(_Rb_tree_header& __from)
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_color = __from._M_header._M_color;
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_parent = __from._M_header._M_parent;
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_left = __from._M_header._M_left;
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_right = __from._M_header._M_right;
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_parent->_M_parent = &_M_header;
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_node_count = __from._M_node_count;
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       __from._M_reset();
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_reset()
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_parent = 0;
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_left = &_M_header;
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_right = &_M_header;
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_node_count = 0;
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   };
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Val>
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_node : public _Rb_tree_node_base
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node<_Val>* _Link_type;
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Val _M_value_field;
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Val*
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_valptr()
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return std::__addressof(_M_value_field); }
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const _Val*
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_valptr() const
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return std::__addressof(_M_value_field); }
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       __gnu_cxx::__aligned_membuf<_Val> _M_storage;
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Val*
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_valptr()
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_storage._M_ptr(); }
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const _Val*
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_valptr() const
ARM GAS  /tmp/ccEv8ptb.s 			page 65


 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_storage._M_ptr(); }
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     };
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _GLIBCXX_PURE _Rb_tree_node_base*
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _GLIBCXX_PURE const _Rb_tree_node_base*
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _GLIBCXX_PURE _Rb_tree_node_base*
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _GLIBCXX_PURE const _Rb_tree_node_base*
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Tp>
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_iterator
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Tp  value_type;
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Tp& reference;
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Tp* pointer;
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef bidirectional_iterator_tag iterator_category;
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef ptrdiff_t			 difference_type;
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_iterator<_Tp>		_Self;
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node_base::_Base_ptr	_Base_ptr;
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node<_Tp>*		_Link_type;
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node() { }
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       explicit
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       reference
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator*() const _GLIBCXX_NOEXCEPT
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pointer
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator->() const _GLIBCXX_NOEXCEPT
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self&
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator++() _GLIBCXX_NOEXCEPT
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Self __tmp = *this;
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
ARM GAS  /tmp/ccEv8ptb.s 			page 66


 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self&
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator--() _GLIBCXX_NOEXCEPT
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Self __tmp = *this;
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node != __y._M_node; }
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr _M_node;
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   };
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Tp>
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_const_iterator
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Tp	 value_type;
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Tp& reference;
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Tp* pointer;
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_iterator<_Tp> iterator;
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef bidirectional_iterator_tag iterator_category;
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef ptrdiff_t			 difference_type;
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_const_iterator<_Tp>		_Self;
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node_base::_Const_Base_ptr	_Base_ptr;
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Rb_tree_node<_Tp>*			_Link_type;
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node() { }
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       explicit
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_const_cast() const _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccEv8ptb.s 			page 67


 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       reference
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator*() const _GLIBCXX_NOEXCEPT
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pointer
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator->() const _GLIBCXX_NOEXCEPT
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self&
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator++() _GLIBCXX_NOEXCEPT
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Self __tmp = *this;
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self&
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator--() _GLIBCXX_NOEXCEPT
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Self __tmp = *this;
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node != __y._M_node; }
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr _M_node;
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     };
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   void
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_insert_and_rebalance(const bool __insert_left,
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				_Rb_tree_node_base* __x,
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				_Rb_tree_node_base* __p,
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				_Rb_tree_node_base& __header) throw ();
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 68


 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_node_base*
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			       _Rb_tree_node_base& __header) throw ();
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201402L
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct __has_is_transparent
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     { };
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Cmp, typename _SfinaeType>
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct __has_is_transparent<_Cmp, _SfinaeType,
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				__void_t<typename _Cmp::is_transparent>>
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     { typedef void type; };
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Cmp, typename _SfinaeType>
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     using __has_is_transparent_t
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       = typename __has_is_transparent<_Cmp, _SfinaeType>::type;
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201402L
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Tree1, typename _Cmp2>
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_merge_helper { };
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc = allocator<_Val> >
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     class _Rb_tree
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	rebind<_Rb_tree_node<_Val> >::other _Node_allocator;
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     protected:
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node_base* 		_Base_ptr;
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Rb_tree_node_base* 	_Const_Base_ptr;
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node<_Val>* 		_Link_type;
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Rb_tree_node<_Val>*	_Const_Link_type;
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Functor recycling a pool of nodes and using allocation once the pool
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // is empty.
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       struct _Reuse_or_alloc_node
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Reuse_or_alloc_node(_Rb_tree& __t)
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_M_root)
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _M_root->_M_parent = 0;
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_M_nodes->_M_left)
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_nodes = 0;
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
ARM GAS  /tmp/ccEv8ptb.s 			page 69


 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	~_Reuse_or_alloc_node()
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	template<typename _Arg>
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  operator()(const _Arg& __arg)
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  operator()(_Arg&& __arg)
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _Link_type __node = static_cast<_Link_type>(_M_extract());
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__node)
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_M_t._M_destroy_node(__node);
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return __node;
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       private:
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Base_ptr
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_extract()
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (!_M_nodes)
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_nodes;
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Base_ptr __node = _M_nodes;
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_nodes = _M_nodes->_M_parent;
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_M_nodes)
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_M_nodes->_M_right == __node)
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		{
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  _M_nodes->_M_right = 0;
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  if (_M_nodes->_M_left)
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		    {
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _M_nodes = _M_nodes->_M_left;
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      while (_M_nodes->_M_right)
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_right;
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      if (_M_nodes->_M_left)
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_left;
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		    }
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		}
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else // __node is on the left.
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_M_nodes->_M_left = 0;
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
ARM GAS  /tmp/ccEv8ptb.s 			page 70


 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_root = 0;
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __node;
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Base_ptr _M_root;
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Base_ptr _M_nodes;
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Rb_tree& _M_t;
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       };
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Functor similar to the previous one but without any pool of nodes to
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // recycle.
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       struct _Alloc_node
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_node(_Rb_tree& __t)
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	: _M_t(__t) { }
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	template<typename _Arg>
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  operator()(const _Arg& __arg) const
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  operator()(_Arg&& __arg) const
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       private:
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Rb_tree& _M_t;
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       };
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Key 				key_type;
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Val 				value_type;
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef value_type* 			pointer;
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const value_type* 		const_pointer;
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef value_type& 			reference;
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const value_type& 		const_reference;
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef size_t 				size_type;
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef ptrdiff_t 			difference_type;
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Alloc 				allocator_type;
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Node_allocator&
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl; }
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const _Node_allocator&
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl; }
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       allocator_type
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return allocator_type(_M_get_Node_allocator()); }
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     protected:
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_node()
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
ARM GAS  /tmp/ccEv8ptb.s 			page 71


 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_construct_node(_Link_type __node, const value_type& __x)
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { get_allocator().construct(__node->_M_valptr(), __x); }
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_put_node(__node);
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_create_node(const value_type& __x)
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __tmp = _M_get_node();
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_construct_node(__tmp, __x);
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_construct_node(_Link_type __node, _Args&&... __args)
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __try
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      ::new(__node) _Rb_tree_node<_Val>;
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Alloc_traits::construct(_M_get_Node_allocator(),
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				       __node->_M_valptr(),
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				       std::forward<_Args>(__args)...);
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __catch(...)
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __node->~_Rb_tree_node<_Val>();
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _M_put_node(__node);
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __throw_exception_again;
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_create_node(_Args&&... __args)
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type __tmp = _M_get_node();
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __tmp;
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccEv8ptb.s 			page 72


 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	get_allocator().destroy(__p->_M_valptr());
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__p->~_Rb_tree_node<_Val>();
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_destroy_node(__p);
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_put_node(__p);
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type __tmp = __node_gen(*__x->_M_valptr());
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __tmp->_M_color = __x->_M_color;
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __tmp->_M_left = 0;
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __tmp->_M_right = 0;
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __tmp;
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     protected:
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if _GLIBCXX_INLINE_VERSION
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Key_compare>
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Unused _Is_pod_comparator is kept as it is part of mangled name.
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Key_compare,
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	struct _Rb_tree_impl
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	: public _Node_allocator
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	, public _Rb_tree_key_compare<_Key_compare>
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	, public _Rb_tree_header
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl()
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _GLIBCXX_NOEXCEPT_IF(
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		is_nothrow_default_constructible<_Node_allocator>::value
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		&& is_nothrow_default_constructible<_Base_key_compare>::value )
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator()
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(const _Rb_tree_impl& __x)
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  , _Base_key_compare(__x._M_key_compare)
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(__a), _Base_key_compare(__comp)
ARM GAS  /tmp/ccEv8ptb.s 			page 73


 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(_Rb_tree_impl&&) = default;
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  explicit
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(_Node_allocator&& __a)
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(std::move(__a))
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(_Rb_tree_impl&& __x, _Node_allocator&& __a)
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(std::move(__a)),
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _Base_key_compare(std::move(__x)),
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _Rb_tree_header(std::move(__x))
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	};
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_impl<_Compare> _M_impl;
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     protected:
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr&
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_root() _GLIBCXX_NOEXCEPT
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_parent; }
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_root() const _GLIBCXX_NOEXCEPT
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_parent; }
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr&
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_leftmost() _GLIBCXX_NOEXCEPT
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_left; }
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_leftmost() const _GLIBCXX_NOEXCEPT
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_left; }
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr&
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_rightmost() _GLIBCXX_NOEXCEPT
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_right; }
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_rightmost() const _GLIBCXX_NOEXCEPT
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_right; }
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_begin() _GLIBCXX_NOEXCEPT
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Link_type
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_begin() const _GLIBCXX_NOEXCEPT
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return static_cast<_Const_Link_type>
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  (this->_M_impl._M_header._M_parent);
ARM GAS  /tmp/ccEv8ptb.s 			page 74


 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_end() _GLIBCXX_NOEXCEPT
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_end() const _GLIBCXX_NOEXCEPT
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static const_reference
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_value(_Const_Link_type __x)
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *__x->_M_valptr(); }
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static const _Key&
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_key(_Const_Link_type __x)
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// If we're asking for the key we're presumably using the comparison
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// object, and so this is a good place to sanity check it.
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      "comparison object must be invocable "
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      "with two arguments of key type");
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # if __cplusplus >= 201703L
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// 2542. Missing const requirements for associative containers
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  static_assert(
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      "comparison object must be invocable as const");
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # endif // C++17
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif // C++11
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _KeyOfValue()(*__x->_M_valptr());
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Link_type
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Const_Link_type
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Const_Link_type>(__x->_M_left); }
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Link_type
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Const_Link_type
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Const_Link_type>(__x->_M_right); }
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static const_reference
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_value(_Const_Base_ptr __x)
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static const _Key&
ARM GAS  /tmp/ccEv8ptb.s 			page 75


 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_key(_Const_Base_ptr __x)
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _S_key(static_cast<_Const_Link_type>(__x)); }
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Base_ptr
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_minimum(__x); }
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Const_Base_ptr
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_minimum(__x); }
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Base_ptr
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_maximum(__x); }
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Const_Base_ptr
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_maximum(__x); }
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_iterator<value_type>       iterator;
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_const_iterator<value_type> const_iterator;
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef std::reverse_iterator<iterator>       reverse_iterator;
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201402L
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       using node_type = _Node_handle<_Key, _Val, _Node_allocator>;
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       using insert_return_type = _Node_insert_return<
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	conditional_t<is_same_v<_Key, _Val>, const_iterator, iterator>,
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	node_type>;
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_insert_unique_pos(const key_type& __k);
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_insert_equal_pos(const key_type& __k);
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_insert_hint_unique_pos(const_iterator __pos,
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    const key_type& __k);
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_insert_hint_equal_pos(const_iterator __pos,
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				   const key_type& __k);
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg, typename _NodeGen>
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
ARM GAS  /tmp/ccEv8ptb.s 			page 76


 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_lower(_Base_ptr __y, _Arg&& __v);
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal_lower(_Arg&& __x);
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_lower_node(_Base_ptr __p, _Link_type __z);
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal_lower_node(_Link_type __z);
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_(_Base_ptr __x, _Base_ptr __y,
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const value_type& __v, _NodeGen&);
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // 233. Insertion hints in associative containers.
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_lower(_Base_ptr __y, const value_type& __v);
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal_lower(const value_type& __x);
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_copy(const _Rb_tree& __x, _NodeGen& __gen)
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_leftmost() = _S_minimum(__root);
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_rightmost() = _S_maximum(__root);
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_impl._M_node_count = __x._M_impl._M_node_count;
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __root;
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_copy(const _Rb_tree& __x)
 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_node __an(*this);
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_copy(__x, __an);
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_erase(_Link_type __x);
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_lower_bound(_Link_type __x, _Base_ptr __y,
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		     const _Key& __k);
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
ARM GAS  /tmp/ccEv8ptb.s 			page 77


 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		     const _Key& __k) const;
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_upper_bound(_Link_type __x, _Base_ptr __y,
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		     const _Key& __k);
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		     const _Key& __k) const;
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // allocation/deallocation
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree() { }
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree() = default;
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(const _Compare& __comp,
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       const allocator_type& __a = allocator_type())
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(__comp, _Node_allocator(__a)) { }
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(const _Rb_tree& __x)
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(__x._M_impl)
 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__x._M_root() != 0)
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x);
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(const allocator_type& __a)
 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(_Node_allocator(__a))
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__x._M_root() != nullptr)
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x);
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&&) = default;
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _Rb_tree(std::move(__x), _Node_allocator(__a))
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, true_type)
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       noexcept(is_nothrow_default_constructible<_Compare>::value)
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(std::move(__x._M_impl), std::move(__a))
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, false_type)
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 78


 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__x._M_root() != nullptr)
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_move_data(__x, false_type{});
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       noexcept( noexcept(
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 std::declval<typename _Alloc_traits::is_always_equal>())) )
 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _Rb_tree(std::move(__x), std::move(__a),
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 typename _Alloc_traits::is_always_equal{})
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       ~_Rb_tree() _GLIBCXX_NOEXCEPT
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _M_erase(_M_begin()); }
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree&
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator=(const _Rb_tree& __x);
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Accessors.
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Compare
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       key_comp() const
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_impl._M_key_compare; }
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       begin() _GLIBCXX_NOEXCEPT
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(this->_M_impl._M_header._M_left); }
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       begin() const _GLIBCXX_NOEXCEPT
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return const_iterator(this->_M_impl._M_header._M_left); }
1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       end() _GLIBCXX_NOEXCEPT
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       end() const _GLIBCXX_NOEXCEPT
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return const_iterator(&this->_M_impl._M_header); }
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       reverse_iterator
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       rbegin() _GLIBCXX_NOEXCEPT
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return reverse_iterator(end()); }
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_reverse_iterator
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       rbegin() const _GLIBCXX_NOEXCEPT
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return const_reverse_iterator(end()); }
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       reverse_iterator
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       rend() _GLIBCXX_NOEXCEPT
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return reverse_iterator(begin()); }
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_reverse_iterator
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       rend() const _GLIBCXX_NOEXCEPT
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return const_reverse_iterator(begin()); }
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 79


1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_NODISCARD bool
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       empty() const _GLIBCXX_NOEXCEPT
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_impl._M_node_count == 0; }
1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size_type
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size() const _GLIBCXX_NOEXCEPT
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_impl._M_node_count; }
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size_type
1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       max_size() const _GLIBCXX_NOEXCEPT
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Alloc_traits::max_size(_M_get_Node_allocator()); }
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       swap(_Rb_tree& __t)
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value);
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Insert/erase.
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<iterator, bool>
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_unique(_Arg&& __x);
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal(_Arg&& __x);
1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg, typename _NodeGen>
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_unique_(const_iterator __pos, _Arg&& __x)
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg, typename _NodeGen>
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal_(const_iterator __pos, _Arg&& __x)
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<iterator, bool>
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_emplace_unique(_Args&&... __args);
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_emplace_equal(_Args&&... __args);
ARM GAS  /tmp/ccEv8ptb.s 			page 80


1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Iter>
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	using __same_value_type
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__enable_if_t<__same_value_type<_InputIterator>::value>
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_unique_(end(), *__first, __an);
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__enable_if_t<!__same_value_type<_InputIterator>::value>
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_emplace_unique(*__first);
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__enable_if_t<__same_value_type<_InputIterator>::value>
1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_equal_(end(), *__first, __an);
1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__enable_if_t<!__same_value_type<_InputIterator>::value>
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_emplace_equal(*__first);
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<iterator, bool>
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_unique(const value_type& __x);
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal(const value_type& __x);
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_unique_(const_iterator __pos, const value_type& __x,
ARM GAS  /tmp/ccEv8ptb.s 			page 81


1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  _NodeGen&);
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_unique_(const_iterator __pos, const value_type& __x)
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_node __an(*this);
1157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_unique_(__pos, __x, __an);
1158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
1161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal_(const_iterator __pos, const value_type& __x,
1163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			 _NodeGen&);
1164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal_(const_iterator __pos, const value_type& __x)
1166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_node __an(*this);
1168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_equal_(__pos, __x, __an);
1169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
1174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_unique_(end(), *__first, __an);
1178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
1183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_equal_(end(), *__first, __an);
1187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
1191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_erase_aux(const_iterator __position);
1193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_erase_aux(const_iterator __first, const_iterator __last);
1196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
1198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // DR 130. Associative erase should return an iterator.
1201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_ABI_TAG_CXX11
1202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const_iterator __position)
1204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__glibcxx_assert(__position != end());
1206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	const_iterator __result = __position;
1207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	++__result;
ARM GAS  /tmp/ccEv8ptb.s 			page 82


1208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__position);
1209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __result._M_const_cast();
1210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // LWG 2059.
1213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_ABI_TAG_CXX11
1214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(iterator __position)
1216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__glibcxx_assert(__position != end());
1218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator __result = __position;
1219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	++__result;
1220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__position);
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __result;
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(iterator __position)
1226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__glibcxx_assert(__position != end());
1228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__position);
1229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const_iterator __position)
1233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__glibcxx_assert(__position != end());
1235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__position);
1236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size_type
1239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const key_type& __x);
1240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // DR 130. Associative erase should return an iterator.
1244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_ABI_TAG_CXX11
1245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const_iterator __first, const_iterator __last)
1247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__first, __last);
1249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __last._M_const_cast();
1250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(iterator __first, iterator __last)
1254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _M_erase_aux(__first, __last); }
1255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const_iterator __first, const_iterator __last)
1258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _M_erase_aux(__first, __last); }
1259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const key_type* __first, const key_type* __last);
1262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       clear() _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccEv8ptb.s 			page 83


1265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase(_M_begin());
1267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_impl._M_reset();
1268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Set operations.
1271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       find(const key_type& __k);
1273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       find(const key_type& __k) const;
1276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size_type
1278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       count(const key_type& __k) const;
1279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       lower_bound(const key_type& __k)
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_lower_bound(_M_begin(), _M_end(), __k); }
1283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       lower_bound(const key_type& __k) const
1286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_lower_bound(_M_begin(), _M_end(), __k); }
1287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       upper_bound(const key_type& __k)
1290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_upper_bound(_M_begin(), _M_end(), __k); }
1291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       upper_bound(const key_type& __k) const
1294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_upper_bound(_M_begin(), _M_end(), __k); }
1295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<iterator, iterator>
1297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       equal_range(const key_type& __k);
1298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<const_iterator, const_iterator>
1300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       equal_range(const key_type& __k) const;
1301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201402L
1303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_find_tr(const _Kt& __k)
1307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __const_this->_M_find_tr(__k)._M_const_cast();
1310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	const_iterator
1315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_find_tr(const _Kt& __k) const
1316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __j = _M_lower_bound_tr(__k);
1318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
1319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __j = end();
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __j;
1321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
ARM GAS  /tmp/ccEv8ptb.s 			page 84


1322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	size_type
1326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_count_tr(const _Kt& __k) const
1327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __p = _M_equal_range_tr(__k);
1329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return std::distance(__p.first, __p.second);
1330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_lower_bound_tr(const _Kt& __k)
1336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __const_this->_M_lower_bound_tr(__k)._M_const_cast();
1339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	const_iterator
1344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_lower_bound_tr(const _Kt& __k) const
1345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __x = _M_begin();
1347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __y = _M_end();
1348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  while (__x != 0)
1349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (!_M_impl._M_key_compare(_S_key(__x), __k))
1350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__y = __x;
1352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__x = _S_left(__x);
1353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __x = _S_right(__x);
1356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return const_iterator(__y);
1357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_upper_bound_tr(const _Kt& __k)
1363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __const_this->_M_upper_bound_tr(__k)._M_const_cast();
1366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	const_iterator
1371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_upper_bound_tr(const _Kt& __k) const
1372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __x = _M_begin();
1374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __y = _M_end();
1375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  while (__x != 0)
1376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (_M_impl._M_key_compare(__k, _S_key(__x)))
1377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__y = __x;
ARM GAS  /tmp/ccEv8ptb.s 			page 85


1379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__x = _S_left(__x);
1380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __x = _S_right(__x);
1383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return const_iterator(__y);
1384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<iterator, iterator>
1389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_equal_range_tr(const _Kt& __k)
1390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __ret = __const_this->_M_equal_range_tr(__k);
1393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };
1394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<const_iterator, const_iterator>
1399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_equal_range_tr(const _Kt& __k) const
1400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __low = _M_lower_bound_tr(__k);
1402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __high = __low;
1403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto& __cmp = _M_impl._M_key_compare;
1404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))
1405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    ++__high;
1406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return { __low, __high };
1407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Debugging.
1411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool
1412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       __rb_verify() const;
1413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree&
1416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator=(_Rb_tree&&)
1417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       noexcept(_Alloc_traits::_S_nothrow_move()
1418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       && is_nothrow_move_assignable<_Compare>::value);
1419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Iterator>
1421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_assign_unique(_Iterator, _Iterator);
1423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Iterator>
1425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_assign_equal(_Iterator, _Iterator);
1427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
1429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Move elements from container with equal allocator.
1430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_data(_Rb_tree& __x, true_type)
1432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _M_impl._M_move_data(__x._M_impl); }
1433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Move elements from container with possibly non-equal allocator,
1435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // which might result in a copy not a move.
ARM GAS  /tmp/ccEv8ptb.s 			page 86


1436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_data(_Rb_tree&, false_type);
1438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Move assignment from container with equal allocator.
1440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_assign(_Rb_tree&, true_type);
1442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Move assignment from container with possibly non-equal allocator,
1444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // which might result in a copy not a move.
1445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_assign(_Rb_tree&, false_type);
1447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201402L
1450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
1451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Re-insert an extracted node.
1452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       insert_return_type
1453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reinsert_node_unique(node_type&& __nh)
1454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	insert_return_type __ret;
1456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__nh.empty())
1457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __ret.position = end();
1458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
1461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_unique_pos(__nh._M_key());
1463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
1464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.position
1466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
1467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__nh._M_ptr = nullptr;
1468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.inserted = true;
1469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.node = std::move(__nh);
1473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.position = iterator(__res.first);
1474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.inserted = false;
1475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __ret;
1478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Re-insert an extracted node.
1481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reinsert_node_equal(node_type&& __nh)
1483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator __ret;
1485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__nh.empty())
1486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __ret = end();
1487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
1490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_equal_pos(__nh._M_key());
1491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
1492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
ARM GAS  /tmp/ccEv8ptb.s 			page 87


1493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = _M_insert_equal_lower_node(__nh._M_ptr);
1495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __nh._M_ptr = nullptr;
1496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __ret;
1498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Re-insert an extracted node.
1501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reinsert_node_hint_unique(const_iterator __hint, node_type&& __nh)
1503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator __ret;
1505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__nh.empty())
1506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __ret = end();
1507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
1510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_hint_unique_pos(__hint, __nh._M_key());
1511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
1512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
1514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__nh._M_ptr = nullptr;
1515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = iterator(__res.first);
1518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __ret;
1520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Re-insert an extracted node.
1523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reinsert_node_hint_equal(const_iterator __hint, node_type&& __nh)
1525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator __ret;
1527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__nh.empty())
1528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __ret = end();
1529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
1532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_hint_equal_pos(__hint, __nh._M_key());
1533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
1534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
1535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = _M_insert_equal_lower_node(__nh._M_ptr);
1537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __nh._M_ptr = nullptr;
1538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __ret;
1540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Extract a node.
1543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       node_type
1544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       extract(const_iterator __pos)
1545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	auto __ptr = _Rb_tree_rebalance_for_erase(
1547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __pos._M_const_cast()._M_node, _M_impl._M_header);
1548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	--_M_impl._M_node_count;
1549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return { static_cast<_Link_type>(__ptr), _M_get_Node_allocator() };
ARM GAS  /tmp/ccEv8ptb.s 			page 88


1550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Extract a node.
1553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       node_type
1554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       extract(const key_type& __k)
1555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	node_type __nh;
1557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	auto __pos = find(__k);
1558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__pos != end())
1559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __nh = extract(const_iterator(__pos));
1560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __nh;
1561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Compare2>
1564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	using _Compatible_tree
1565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  = _Rb_tree<_Key, _Val, _KeyOfValue, _Compare2, _Alloc>;
1566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename, typename>
1568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	friend class _Rb_tree_merge_helper;
1569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Merge from a compatible container into one with unique keys.
1571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Compare2>
1572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_merge_unique(_Compatible_tree<_Compare2>& __src) noexcept
1574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
1576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
1577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto __pos = __i++;
1579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto __res = _M_get_insert_unique_pos(_KeyOfValue()(*__pos));
1580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (__res.second)
1581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		{
1582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  auto& __src_impl = _Merge_helper::_S_get_impl(__src);
1583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  auto __ptr = _Rb_tree_rebalance_for_erase(
1584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      __pos._M_node, __src_impl._M_header);
1585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  --__src_impl._M_node_count;
1586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  _M_insert_node(__res.first, __res.second,
1587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				 static_cast<_Link_type>(__ptr));
1588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		}
1589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
1590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Merge from a compatible container into one with equivalent keys.
1593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Compare2>
1594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_merge_equal(_Compatible_tree<_Compare2>& __src) noexcept
1596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
1598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
1599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto __pos = __i++;
1601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto __res = _M_get_insert_equal_pos(_KeyOfValue()(*__pos));
1602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (__res.second)
1603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		{
1604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  auto& __src_impl = _Merge_helper::_S_get_impl(__src);
1605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  auto __ptr = _Rb_tree_rebalance_for_erase(
1606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      __pos._M_node, __src_impl._M_header);
ARM GAS  /tmp/ccEv8ptb.s 			page 89


1607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  --__src_impl._M_node_count;
1608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  _M_insert_node(__res.first, __res.second,
1609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				 static_cast<_Link_type>(__ptr));
1610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		}
1611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
1612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif // C++17
1614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
1616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator==(const _Rb_tree& __x, const _Rb_tree& __y)
1617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __x.size() == __y.size()
1619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  && std::equal(__x.begin(), __x.end(), __y.begin());
1620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
1623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator<(const _Rb_tree& __x, const _Rb_tree& __y)
1624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return std::lexicographical_compare(__x.begin(), __x.end(),
1626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 					    __y.begin(), __y.end());
1627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool _GLIBCXX_DEPRECATED
1630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator!=(const _Rb_tree& __x, const _Rb_tree& __y)
1631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return !(__x == __y); }
1632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool _GLIBCXX_DEPRECATED
1634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator>(const _Rb_tree& __x, const _Rb_tree& __y)
1635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __y < __x; }
1636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool _GLIBCXX_DEPRECATED
1638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator<=(const _Rb_tree& __x, const _Rb_tree& __y)
1639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return !(__y < __x); }
1640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool _GLIBCXX_DEPRECATED
1642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator>=(const _Rb_tree& __x, const _Rb_tree& __y)
1643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return !(__x < __y); }
1644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     };
1645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     inline void
1649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
1650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
1651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     { __x.swap(__y); }
1652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
1657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_move_data(_Rb_tree& __x, false_type)
1659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
1661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_move_data(__x, true_type());
1662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
1663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
ARM GAS  /tmp/ccEv8ptb.s 			page 90


1664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __lbd =
1666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    [&__an](const value_type& __cval)
1667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto& __val = const_cast<value_type&>(__cval);
1669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return __an(std::move_if_noexcept(__val));
1670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    };
1671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x, __lbd);
1672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     inline void
1678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_move_assign(_Rb_tree& __x, true_type)
1680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       clear();
1682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__x._M_root() != nullptr)
1683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_move_data(__x, true_type());
1684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       std::__alloc_on_move(_M_get_Node_allocator(),
1685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   __x._M_get_Node_allocator());
1686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
1691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_move_assign(_Rb_tree& __x, false_type)
1693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
1695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_move_assign(__x, true_type{});
1696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Try to move each node reusing existing nodes and copying __x nodes
1698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // structure.
1699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Reuse_or_alloc_node __roan(*this);
1700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_impl._M_reset();
1701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__x._M_root() != nullptr)
1702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __lbd =
1704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    [&__roan](const value_type& __cval)
1705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto& __val = const_cast<value_type&>(__cval);
1707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return __roan(std::move_if_noexcept(__val));
1708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    };
1709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x, __lbd);
1710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x.clear();
1711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
1717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     operator=(_Rb_tree&& __x)
1719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     noexcept(_Alloc_traits::_S_nothrow_move()
1720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	     && is_nothrow_move_assignable<_Compare>::value)
ARM GAS  /tmp/ccEv8ptb.s 			page 91


1721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
1723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
1724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return *this;
1725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Iterator>
1730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_assign_unique(_Iterator __first, _Iterator __last)
1733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Reuse_or_alloc_node __roan(*this);
1735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_impl._M_reset();
1736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	for (; __first != __last; ++__first)
1737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_insert_unique_(end(), *__first, __roan);
1738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Iterator>
1743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_assign_equal(_Iterator __first, _Iterator __last)
1746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Reuse_or_alloc_node __roan(*this);
1748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_impl._M_reset();
1749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	for (; __first != __last; ++__first)
1750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_insert_equal_(end(), *__first, __roan);
1751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
1757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     operator=(const _Rb_tree& __x)
1759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (this != &__x)
1761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // Note that _Key may be a constant type.
1763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
1765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto& __this_alloc = this->_M_get_Node_allocator();
1767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto& __that_alloc = __x._M_get_Node_allocator();
1768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (!_Alloc_traits::_S_always_equal()
1769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  && __this_alloc != __that_alloc)
1770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		{
1771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  // Replacement allocator cannot free existing storage, we need
1772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  // to erase nodes first.
1773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  clear();
1774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  std::__alloc_on_copy(__this_alloc, __that_alloc);
1775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		}
1776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
1777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
ARM GAS  /tmp/ccEv8ptb.s 			page 92


1778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Reuse_or_alloc_node __roan(*this);
1780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_impl._M_reset();
1781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_impl._M_key_compare = __x._M_impl._M_key_compare;
1782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__x._M_root() != 0)
1783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_root() = _M_copy(__x, __roan);
1784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return *this;
1787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg, typename _NodeGen>
1793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _NodeGen>
1795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_(_Base_ptr __x, _Base_ptr __p,
1799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 _Arg&& __v,
1801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 const _Val& __v,
1803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 _NodeGen& __node_gen)
1805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	bool __insert_left = (__x != 0 || __p == _M_end()
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
1808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 							_S_key(__p)));
1809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
1811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
1813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				      this->_M_impl._M_header);
1814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	++_M_impl._M_node_count;
1815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return iterator(__z);
1816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg>
1822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_lower(_Base_ptr __p, _Arg&& __v)
1827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_lower(_Base_ptr __p, const _Val& __v)
1829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool __insert_left = (__p == _M_end()
1832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    || !_M_impl._M_key_compare(_S_key(__p),
1833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						       _KeyOfValue()(__v)));
1834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 93


1835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __z = _M_create_node(_GLIBCXX_FORWARD(_Arg, __v));
1836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
1838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    this->_M_impl._M_header);
1839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       ++_M_impl._M_node_count;
1840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__z);
1841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg>
1847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal_lower(_Arg&& __v)
1852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal_lower(const _Val& __v)
1854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
1857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
1858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x;
1861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
1862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_S_left(__x) : _S_right(__x);
1863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _M_insert_lower(__y, _GLIBCXX_FORWARD(_Arg, __v));
1865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KoV,
1868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _NodeGen>
1870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
1871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
1872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
1873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// Structural copy. __x and __p must be non-null.
1875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __top = _M_clone_node(__x, __node_gen);
1876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__top->_M_parent = __p;
1877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
1879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__x->_M_right)
1881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
1882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __p = __top;
1883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __x = _S_left(__x);
1884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    while (__x != 0)
1886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_Link_type __y = _M_clone_node(__x, __node_gen);
1888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__p->_M_left = __y;
1889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__y->_M_parent = __p;
1890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		if (__x->_M_right)
1891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
ARM GAS  /tmp/ccEv8ptb.s 			page 94


1892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__p = __y;
1893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__x = _S_left(__x);
1894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
1897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_erase(__top);
1899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
1900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __top;
1902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
1907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 281              		.loc 7 1907 5 is_stmt 1 view -0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              		.loc 7 1907 5 is_stmt 0 view .LVU60
 286 0000 70B5     		push	{r4, r5, r6, lr}
 287              	.LCFI2:
 288              		.cfi_def_cfa_offset 16
 289              		.cfi_offset 4, -16
 290              		.cfi_offset 5, -12
 291              		.cfi_offset 6, -8
 292              		.cfi_offset 14, -4
 293 0002 0600     		movs	r6, r0
 294 0004 0C00     		movs	r4, r1
 295 0006 05E0     		b	.L9
 296              	.LVL23:
 297              	.L10:
 298              	.LBB2520:
 299              	.LBB2521:
 300              	.LBB2522:
 301              	.LBB2523:
 302              	.LBB2524:
 303              	.LBB2525:
 304              	.LBB2526:
 305              	.LBB2527:
 306              	.LBB2528:
 307              	.LBB2529:
 308              	.LBI2529:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 309              		.loc 3 236 7 is_stmt 1 view .LVU61
 310              	.LBB2530:
 311              	.LBB2531:
 312              	.LBI2531:
 313              		.file 8 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
ARM GAS  /tmp/ccEv8ptb.s 			page 95


   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****  */
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #include <bits/ptr_traits.h>
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #include <ext/numeric_traits.h>
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** {
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   struct __allocator_traits_base
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   {
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   protected:
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
ARM GAS  /tmp/ccEv8ptb.s 			page 96


  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   };
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     using __alloc_rebind
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   /**
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****    * @ingroup allocators
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   */
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     {
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator type
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocated type
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     private:
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Ptr
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	};
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	};
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Diff
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
ARM GAS  /tmp/ccEv8ptb.s 			page 97


 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     public:
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's size type
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
ARM GAS  /tmp/ccEv8ptb.s 			page 98


 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using is_always_equal
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     private:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static pointer
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct __construct_helper
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	    static true_type __test(int);
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  template<typename>
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	    static false_type __test(...);
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	};
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 99


 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using __has_construct
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static _Require<__has_construct<_Tp, _Args...>>
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(::new((void*)__p)
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 			  _Tp(std::forward<_Args>(__args)...)))
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static void
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__p->~_Tp()))
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ __p->~_Tp(); }
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static size_type
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	    / sizeof(value_type);
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	}
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static _Alloc2
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
ARM GAS  /tmp/ccEv8ptb.s 			page 100


 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a; }
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     public:
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static void
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Tp
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  arguments @a __args...
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
ARM GAS  /tmp/ccEv8ptb.s 			page 101


 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static void destroy(_Alloc& __a, _Tp* __p)
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static size_type max_size(const _Alloc& __a) noexcept
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static _Alloc
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     };
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     {
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator type
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocated type
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using value_type = _Tp;
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's pointer type.
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using pointer = _Tp*;
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using void_pointer = void*;
ARM GAS  /tmp/ccEv8ptb.s 			page 102


 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's difference type
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's size type
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using size_type = std::size_t;
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using is_always_equal = true_type;
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Up>
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Up>
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
ARM GAS  /tmp/ccEv8ptb.s 			page 103


 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static void
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 314              		.loc 8 469 7 view .LVU62
 315              	.LBB2532:
 316              	.LBI2532:
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       pointer
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       const_pointer
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       _GLIBCXX_NODISCARD pointer
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	if (__n > this->max_size())
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  {
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  }
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       void
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 317              		.loc 5 119 7 view .LVU63
 318              	.LBB2533:
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  {
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	    return;
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  }
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	::operator delete(__p);
 319              		.loc 5 128 19 is_stmt 0 view .LVU64
 320 0008 FFF7FEFF 		bl	_ZdlPv
 321              	.LVL24:
 322              	.L8:
 323              		.loc 5 128 19 view .LVU65
 324              	.LBE2533:
 325              	.LBE2532:
ARM GAS  /tmp/ccEv8ptb.s 			page 104


 326              	.LBE2531:
 327              	.LBE2530:
 328              	.LBE2529:
 329              	.LBE2528:
 330              	.LBE2527:
 331              	.LBB2540:
 332              	.LBI2540:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 333              		.loc 3 150 14 is_stmt 1 view .LVU66
 334              	.LBB2541:
 335              	.LBI2541:
 336              		.loc 4 153 7 view .LVU67
 337              	.LBB2542:
 338              	.LBI2542:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 339              		.loc 5 89 7 view .LVU68
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 340              		.loc 5 89 7 is_stmt 0 view .LVU69
 341              	.LBE2542:
 342              	.LBE2541:
 343              	.LBE2540:
 344              	.LBE2526:
 345              	.LBE2525:
 346              	.LBE2524:
 347              	.LBE2523:
 348              	.LBE2522:
 349              	.LBB2548:
 350              	.LBI2548:
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 351              		.loc 7 583 7 is_stmt 1 view .LVU70
 352              	.LBB2549:
 353              	.LBI2549:
 354              		.loc 8 469 7 view .LVU71
 355              	.LBB2550:
 356              	.LBI2550:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 357              		.loc 5 119 7 view .LVU72
 358              	.LBB2551:
 359              		.loc 5 128 19 is_stmt 0 view .LVU73
 360 000c 2000     		movs	r0, r4
 361 000e FFF7FEFF 		bl	_ZdlPv
 362              	.LVL25:
 363              		.loc 5 128 19 view .LVU74
 364              	.LBE2551:
 365              	.LBE2550:
 366              	.LBE2549:
 367              	.LBE2548:
 368              	.LBE2521:
1908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_erase(_Link_type __x)
1909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Erase without rebalancing.
1911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_erase(_S_right(__x));
1914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type __y = _S_left(__x);
1915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_drop_node(__x);
1916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = __y;
ARM GAS  /tmp/ccEv8ptb.s 			page 105


 369              		.loc 7 1916 4 view .LVU75
 370 0012 2C00     		movs	r4, r5
 371              	.LVL26:
 372              	.L9:
 373              		.loc 7 1916 4 view .LVU76
 374              	.LBE2520:
1911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 375              		.loc 7 1911 18 is_stmt 1 view .LVU77
 376 0014 002C     		cmp	r4, #0
 377 0016 0AD0     		beq	.L6
 378              	.LVL27:
 379              	.LBB2557:
 380              	.LBB2553:
 381              	.LBI2553:
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 382              		.loc 7 797 7 view .LVU78
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 383              		.loc 7 797 7 is_stmt 0 view .LVU79
 384              	.LBE2553:
1913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type __y = _S_left(__x);
 385              		.loc 7 1913 4 view .LVU80
 386 0018 E168     		ldr	r1, [r4, #12]
 387 001a 3000     		movs	r0, r6
 388 001c FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 389              	.LVL28:
 390              	.LBB2554:
 391              	.LBI2554:
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 392              		.loc 7 789 7 is_stmt 1 view .LVU81
 393              	.LBB2555:
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 394              		.loc 7 790 52 is_stmt 0 view .LVU82
 395 0020 A568     		ldr	r5, [r4, #8]
 396              	.LVL29:
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 397              		.loc 7 790 52 view .LVU83
 398              	.LBE2555:
 399              	.LBE2554:
 400              	.LBB2556:
 401              	.LBI2521:
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 402              		.loc 7 648 7 is_stmt 1 view .LVU84
 403              	.LBB2552:
 404              	.LBI2522:
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 405              		.loc 7 637 7 view .LVU85
 406              	.LBB2547:
 407              	.LBI2523:
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Up
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
ARM GAS  /tmp/ccEv8ptb.s 			page 106


 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static void
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Up>
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static void
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	destroy(allocator_type& __a, _Up* __p)
 408              		.loc 8 495 2 view .LVU86
 409              	.LBB2546:
 410              	.LBI2524:
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       size_type
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __PTRDIFF_MAX__ < __SIZE_MAX__
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #else
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	return size_t(-1) / sizeof(_Tp);
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	void
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	noexcept(noexcept(::new((void *)__p)
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 			    _Up(std::forward<_Args>(__args)...)))
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       template<typename _Up>
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	void
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	destroy(_Up* __p)
 411              		.loc 5 151 2 view .LVU87
 412              	.LBB2545:
 413              	.LBI2525:
 414              		.file 9 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 107


  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  */
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  */
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** {
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
ARM GAS  /tmp/ccEv8ptb.s 			page 108


  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /**
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @{
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    */
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// piecewise_construct
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     piecewise_construct_t();
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // Forward declarations.
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename...>
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     class tuple;
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<std::size_t...>
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     struct _Index_tuple;
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // constructors.
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     struct _PCC
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     {
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 109


 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				       __do_converts,
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      __converts
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      >::value;
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				       __do_converts,
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      __converts
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      >::value;
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   };
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     {
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return false;
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return false;
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return false;
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return false;
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   };
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 110


 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // PR libstdc++/79141, a utility type for preventing
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // initialization of an argument of a disabled assignment
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // operator from a pair of empty braces.
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   struct __nonesuch_no_braces : std::__nonesuch {
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     explicit __nonesuch_no_braces(const __nonesuch&) = delete;
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   };
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif // C++11
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   {
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     __pair_base() = default;
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     ~__pair_base() = default;
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif // C++11
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   };
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  /**
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    */
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     struct pair
 415              		.loc 9 208 12 view .LVU88
 416              	.LBB2544:
 417              	.LBI2526:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 418              		.loc 3 657 7 view .LVU89
 419              	.LBB2543:
 420              	.LBI2527:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 421              		.loc 3 229 7 view .LVU90
 422              	.LBB2539:
 423              	.LBB2534:
 424              	.LBI2534:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 425              		.loc 3 221 7 view .LVU91
 426              	.LBB2535:
 427              	.LBI2535:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 428              		.loc 3 186 7 view .LVU92
 429              	.LBB2536:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 430              		.loc 3 187 28 is_stmt 0 view .LVU93
 431 0022 6069     		ldr	r0, [r4, #20]
 432              	.LVL30:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 433              		.loc 3 187 28 view .LVU94
 434              	.LBE2536:
 435              	.LBE2535:
 436              	.LBB2537:
 437              	.LBI2537:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 111


 438              		.loc 3 200 7 is_stmt 1 view .LVU95
 439              	.LBB2538:
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 440              		.loc 3 203 57 is_stmt 0 view .LVU96
 441 0024 2300     		movs	r3, r4
 442 0026 1C33     		adds	r3, r3, #28
 443              	.LVL31:
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 444              		.loc 3 203 57 view .LVU97
 445              	.LBE2538:
 446              	.LBE2537:
 447              	.LBE2534:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 448              		.loc 3 231 2 view .LVU98
 449 0028 8342     		cmp	r3, r0
 450 002a EDD1     		bne	.L10
 451 002c EEE7     		b	.L8
 452              	.LVL32:
 453              	.L6:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 454              		.loc 3 231 2 view .LVU99
 455              	.LBE2539:
 456              	.LBE2543:
 457              	.LBE2544:
 458              	.LBE2545:
 459              	.LBE2546:
 460              	.LBE2547:
 461              	.LBE2552:
 462              	.LBE2556:
 463              	.LBE2557:
1917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 464              		.loc 7 1918 5 view .LVU100
 465              		@ sp needed
 466              	.LVL33:
 467              	.LVL34:
 468              		.loc 7 1918 5 view .LVU101
 469 002e 70BD     		pop	{r4, r5, r6, pc}
 470              		.cfi_endproc
 471              	.LFE2554:
 473              		.section	.text._ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIc
 474              		.align	1
 475              		.weak	_ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES
 476              		.syntax unified
 477              		.code	16
 478              		.thumb_func
 479              		.fpu softvfp
 481              	_ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessI
 482              	.LVL35:
 483              	.LFB2852:
 484              		.file 10 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // Map implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // software; you can redistribute it and/or modify it under the
ARM GAS  /tmp/ccEv8ptb.s 			page 112


   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Copyright (c) 1996,1997
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  */
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** /** @file bits/stl_map.h
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *  Do not attempt to use it directly. @headername{map}
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  */
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #ifndef _STL_MAP_H
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #define _STL_MAP_H 1
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #include <bits/functexcept.h>
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #include <bits/concept_check.h>
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #include <initializer_list>
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #include <tuple>
ARM GAS  /tmp/ccEv8ptb.s 			page 113


  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** {
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****   template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     class multimap;
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****   /**
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @brief A standard container made up of (key,value) pairs, which can be
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  retrieved based on a key, in logarithmic time.
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @ingroup associative_containers
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @tparam _Key  Type of key objects.
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @tparam  _Tp  Type of mapped objects.
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @tparam _Alloc  Allocator type, defaults to
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *                  allocator<pair<const _Key, _Tp>.
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  <a href="tables.html#66">reversible container</a>, and an
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  <a href="tables.html#69">associative container</a> (using unique keys).
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  For a @c map<Key,T> the key_type is Key, the mapped_type is T, and the
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  value_type is std::pair<const Key,T>.
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  Maps support bidirectional iterators.
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  The private tree data is declared exactly the same way for map and
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  multimap; the distinction is made entirely in how the tree functions are
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  called (*_unique versus *_equal, same as the standard).
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****   */
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****   template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     class map
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     {
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     public:
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Key					key_type;
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Tp					mapped_type;
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef std::pair<const _Key, _Tp>		value_type;
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Compare					key_compare;
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Alloc					allocator_type;
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     private:
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // concept requirements
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** # if __cplusplus < 201103L
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** # endif
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       __glibcxx_class_requires4(_Compare, bool, _Key, _Key,
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				_BinaryFunctionConcept)
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       __glibcxx_class_requires2(value_type, _Alloc_value_type, _SameTypeConcept)
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 114


 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L && defined(__STRICT_ANSI__)
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       static_assert(is_same<typename _Alloc::value_type, value_type>::value,
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  "std::map must have the same value_type as its allocator");
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     public:
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       class value_compare
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : public std::binary_function<value_type, value_type, bool>
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	friend class map<_Key, _Tp, _Compare, _Alloc>;
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       protected:
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	_Compare comp;
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	value_compare(_Compare __c)
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	: comp(__c) { }
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       public:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	bool operator()(const value_type& __x, const value_type& __y) const
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return comp(__x.first, __y.first); }
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       };
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     private:
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// This turns a red-black tree into a [multi]map.
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	rebind<value_type>::other _Pair_alloc_type;
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 		       key_compare, _Pair_alloc_type> _Rep_type;
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// The actual tree structure.
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       _Rep_type _M_t;
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     public:
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // many of these are specified differently in ISO, but the following are
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // "functionally equivalent"
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc_traits::pointer		 pointer;
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc_traits::const_pointer	 const_pointer;
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc_traits::reference		 reference;
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc_traits::const_reference	 const_reference;
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::iterator		 iterator;
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::const_iterator	 const_iterator;
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::size_type		 size_type;
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::difference_type	 difference_type;
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::reverse_iterator	 reverse_iterator;
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201402L
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       using node_type = typename _Rep_type::node_type;
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       using insert_return_type = typename _Rep_type::insert_return_type;
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // [23.3.1.1] construct/copy/destroy
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // (get_allocator() is also listed in this section)
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
ARM GAS  /tmp/ccEv8ptb.s 			page 115


 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Default constructor creates no elements.
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus < 201103L
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map() : _M_t() { }
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map() = default;
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Creates a %map with no elements.
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __comp  A comparison object.
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __a  An allocator object.
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       explicit
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const _Compare& __comp,
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  const allocator_type& __a = allocator_type())
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(__comp, _Pair_alloc_type(__a)) { }
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  %Map copy constructor.
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Whether the allocator is copied depends on the allocator traits.
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus < 201103L
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const map& __x)
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(__x._M_t) { }
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const map&) = default;
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  %Map move constructor.
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  The newly-created %map contains the exact contents of the moved
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  instance. The moved instance is a valid, but unspecified, %map.
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(map&&) = default;
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Builds a %map from an initializer_list.
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __l  An initializer_list.
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __comp  A comparison object.
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __a  An allocator object.
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Create a %map consisting of copies of the elements in the
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  initializer_list @a __l.
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This is linear in N if the range is already sorted, and NlogN
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  otherwise (where N is @a __l.size()).
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(initializer_list<value_type> __l,
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  const _Compare& __comp = _Compare(),
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  const allocator_type& __a = allocator_type())
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(__comp, _Pair_alloc_type(__a))
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended default constructor.
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       explicit
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const allocator_type& __a)
ARM GAS  /tmp/ccEv8ptb.s 			page 116


 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(_Pair_alloc_type(__a)) { }
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended copy constructor.
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const map& __m, const allocator_type& __a)
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended move constructor.
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(map&& __m, const allocator_type& __a)
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       noexcept(is_nothrow_copy_constructible<_Compare>::value
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	       && _Alloc_traits::_S_always_equal())
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended initialier-list constructor.
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(initializer_list<value_type> __l, const allocator_type& __a)
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(_Pair_alloc_type(__a))
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended range constructor.
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _InputIterator>
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	map(_InputIterator __first, _InputIterator __last,
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    const allocator_type& __a)
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	: _M_t(_Pair_alloc_type(__a))
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ _M_t._M_insert_range_unique(__first, __last); }
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Builds a %map from a range.
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  An input iterator.
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __last  An input iterator.
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Create a %map consisting of copies of the elements from
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  [__first,__last).  This is linear in N if the range is
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  already sorted, and NlogN otherwise (where N is
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  distance(__first,__last)).
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _InputIterator>
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	map(_InputIterator __first, _InputIterator __last)
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	: _M_t()
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ _M_t._M_insert_range_unique(__first, __last); }
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Builds a %map from a range.
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  An input iterator.
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __last  An input iterator.
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __comp  A comparison functor.
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __a  An allocator object.
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Create a %map consisting of copies of the elements from
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  [__first,__last).  This is linear in N if the range is
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  already sorted, and NlogN otherwise (where N is
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  distance(__first,__last)).
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _InputIterator>
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	map(_InputIterator __first, _InputIterator __last,
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    const _Compare& __comp,
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    const allocator_type& __a = allocator_type())
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	: _M_t(__comp, _Pair_alloc_type(__a))
ARM GAS  /tmp/ccEv8ptb.s 			page 117


 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ _M_t._M_insert_range_unique(__first, __last); }
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  The dtor only erases the elements, and note that if the elements
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  way.  Managing the pointer is the user's responsibility.
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       ~map() = default;
 485              		.loc 10 300 7 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		.loc 10 300 7 is_stmt 0 view .LVU103
 490 0000 10B5     		push	{r4, lr}
 491              	.LCFI3:
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 4, -8
 494              		.cfi_offset 14, -4
 495 0002 0400     		movs	r4, r0
 496              	.LVL36:
 497              	.LBB2558:
 498              	.LBB2559:
 499              	.LBI2559:
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _M_erase(_M_begin()); }
 500              		.loc 7 994 7 is_stmt 1 view .LVU104
 501              	.LBB2560:
 502              	.LBB2561:
 503              	.LBI2561:
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 504              		.loc 7 744 7 view .LVU105
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 505              		.loc 7 744 7 is_stmt 0 view .LVU106
 506              	.LBE2561:
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 507              		.loc 7 995 9 view .LVU107
 508 0004 8168     		ldr	r1, [r0, #8]
 509 0006 FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 510              	.LVL37:
 511              	.LBB2562:
 512              	.LBI2562:
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	: public _Node_allocator
 513              		.loc 7 673 9 is_stmt 1 view .LVU108
 514              	.LBB2563:
 515              	.LBI2563:
 516              		.loc 4 153 7 view .LVU109
 517              	.LBB2564:
 518              	.LBI2564:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 519              		.loc 5 89 7 view .LVU110
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 520              		.loc 5 89 7 is_stmt 0 view .LVU111
 521              	.LBE2564:
 522              	.LBE2563:
 523              	.LBE2562:
 524              	.LBE2560:
 525              	.LBE2559:
ARM GAS  /tmp/ccEv8ptb.s 			page 118


 526              	.LBE2558:
 527              		.loc 10 300 7 view .LVU112
 528 000a 2000     		movs	r0, r4
 529              		@ sp needed
 530              	.LVL38:
 531              		.loc 10 300 7 view .LVU113
 532 000c 10BD     		pop	{r4, pc}
 533              		.cfi_endproc
 534              	.LFE2852:
 536              		.weak	_ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES
 537              		.thumb_set _ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaI
 538              		.section	.text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIc
 539              		.align	1
 540              		.weak	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_
 541              		.syntax unified
 542              		.code	16
 543              		.thumb_func
 544              		.fpu softvfp
 546              	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsI
 547              	.LVL39:
 548              	.LFB2585:
1919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _Compare, _Alloc>::iterator
1924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_lower_bound(_Link_type __x, _Base_ptr __y,
1926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const _Key& __k)
1927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
1930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _S_right(__x);
1933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__y);
1934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _Compare, _Alloc>::const_iterator
1940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
1942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const _Key& __k) const
1943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
1946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _S_right(__x);
1949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return const_iterator(__y);
1950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
ARM GAS  /tmp/ccEv8ptb.s 			page 119


1955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _Compare, _Alloc>::iterator
1956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_upper_bound(_Link_type __x, _Base_ptr __y,
1958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const _Key& __k)
1959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (_M_impl._M_key_compare(__k, _S_key(__x)))
1962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _S_right(__x);
1965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__y);
1966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _Compare, _Alloc>::const_iterator
1972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
1974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const _Key& __k) const
1975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (_M_impl._M_key_compare(__k, _S_key(__x)))
1978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _S_right(__x);
1981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return const_iterator(__y);
1982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
1987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::iterator,
1988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
1989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::iterator>
1990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     equal_range(const _Key& __k)
1992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
1994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
1995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_M_impl._M_key_compare(_S_key(__x), __k))
1998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __x = _S_right(__x);
1999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
2000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __y = __x, __x = _S_left(__x);
2001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Link_type __xu(__x);
2004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Base_ptr __yu(__y);
2005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __y = __x, __x = _S_left(__x);
2006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __xu = _S_right(__xu);
2007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return pair<iterator,
2008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  iterator>(_M_lower_bound(__x, __y, __k),
2009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    _M_upper_bound(__xu, __yu, __k));
2010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
ARM GAS  /tmp/ccEv8ptb.s 			page 120


2012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return pair<iterator, iterator>(iterator(__y),
2013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				      iterator(__y));
2014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::const_iterator,
2020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::const_iterator>
2022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     equal_range(const _Key& __k) const
2024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Link_type __x = _M_begin();
2026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr __y = _M_end();
2027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
2028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_M_impl._M_key_compare(_S_key(__x), __k))
2030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __x = _S_right(__x);
2031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
2032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __y = __x, __x = _S_left(__x);
2033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Const_Link_type __xu(__x);
2036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Const_Base_ptr __yu(__y);
2037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __y = __x, __x = _S_left(__x);
2038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __xu = _S_right(__xu);
2039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return pair<const_iterator,
2040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  const_iterator>(_M_lower_bound(__x, __y, __k),
2041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 					  _M_upper_bound(__xu, __yu, __k));
2042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return pair<const_iterator, const_iterator>(const_iterator(__y),
2045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						  const_iterator(__y));
2046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
2051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     swap(_Rb_tree& __t)
2053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)
2054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (_M_root() == 0)
2056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__t._M_root() != 0)
2058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_impl._M_move_data(__t._M_impl);
2059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else if (__t._M_root() == 0)
2061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__t._M_impl._M_move_data(_M_impl);
2062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
2063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  std::swap(_M_root(),__t._M_root());
2065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  std::swap(_M_leftmost(),__t._M_leftmost());
2066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  std::swap(_M_rightmost(),__t._M_rightmost());
2067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root()->_M_parent = _M_end();
ARM GAS  /tmp/ccEv8ptb.s 			page 121


2069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __t._M_root()->_M_parent = __t._M_end();
2070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
2071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // No need to swap header's color as it does not change.
2073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);
2074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
2076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				__t._M_get_Node_allocator());
2077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
2083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
2085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
2087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
2089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
2090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
2091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool __comp = true;
2092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
2093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x;
2095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
2096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = __comp ? _S_left(__x) : _S_right(__x);
2097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator __j = iterator(__y);
2099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__comp)
2100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__j == begin())
2102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(__x, __y);
2103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    --__j;
2105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
2107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _Res(__x, __y);
2108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _Res(__j._M_node, 0);
2109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
2115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
2117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_equal_pos(const key_type& __k)
2119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
2121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
2122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
2123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
2124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x;
ARM GAS  /tmp/ccEv8ptb.s 			page 122


2126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
2127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_S_left(__x) : _S_right(__x);
2128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _Res(__x, __y);
2130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg>
2136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::iterator, bool>
2139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_unique(_Arg&& __v)
2142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_unique(const _Val& __v)
2144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<iterator, bool> _Res;
2147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr> __res
2148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
2149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__res.second)
2151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
2153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return _Res(_M_insert_(__res.first, __res.second,
2154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				 _GLIBCXX_FORWARD(_Arg, __v), __an),
2155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      true);
2156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _Res(iterator(__res.first), false);
2159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg>
2165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal(_Arg&& __v)
2170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal(const _Val& __v)
2172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr> __res
2175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_equal_pos(_KeyOfValue()(__v));
2176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Alloc_node __an(*this);
2177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _M_insert_(__res.first, __res.second,
2178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_GLIBCXX_FORWARD(_Arg, __v), __an);
2179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
ARM GAS  /tmp/ccEv8ptb.s 			page 123


2183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
2185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
2187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
2189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				  const key_type& __k)
2190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator __pos = __position._M_const_cast();
2192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
2193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // end()
2195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__pos._M_node == _M_end())
2196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (size() > 0
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
2199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_unique_pos(__k);
2202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
2204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // First, try before...
2206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  iterator __before = __pos;
2207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__pos._M_node == _M_leftmost()) // begin()
2208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
2209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
2210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_S_right(__before._M_node) == 0)
2212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
2213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else
2214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(__pos._M_node, __pos._M_node);
2215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_unique_pos(__k);
2218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
2220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // ... then try after.
2222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  iterator __after = __pos;
2223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__pos._M_node == _M_rightmost())
2224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
2226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_S_right(__pos._M_node) == 0)
2228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
2229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else
2230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(__after._M_node, __after._M_node);
2231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_unique_pos(__k);
2234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
2236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// Equivalent keys.
2237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _Res(__pos._M_node, 0);
2238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 124


2240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg, typename _NodeGen>
2244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _NodeGen>
2246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_unique_(const_iterator __position,
2250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_Arg&& __v,
2252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			const _Val& __v,
2254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_NodeGen& __node_gen)
2256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr> __res
2258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
2259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__res.second)
2261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_(__res.first, __res.second,
2262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  _GLIBCXX_FORWARD(_Arg, __v),
2263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  __node_gen);
2264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__res.first);
2265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
2271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
2273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
2275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator __pos = __position._M_const_cast();
2277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
2278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // end()
2280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__pos._M_node == _M_end())
2281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (size() > 0
2283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
2284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_equal_pos(__k);
2287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
2289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // First, try before...
2291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  iterator __before = __pos;
2292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__pos._M_node == _M_leftmost()) // begin()
2293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
2294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
2295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_S_right(__before._M_node) == 0)
ARM GAS  /tmp/ccEv8ptb.s 			page 125


2297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
2298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else
2299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(__pos._M_node, __pos._M_node);
2300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_equal_pos(__k);
2303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
2305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // ... then try after.
2307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  iterator __after = __pos;
2308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__pos._M_node == _M_rightmost())
2309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
2311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_S_right(__pos._M_node) == 0)
2313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
2314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else
2315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(__after._M_node, __after._M_node);
2316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, 0);
2319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg, typename _NodeGen>
2326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _NodeGen>
2328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal_(const_iterator __position,
2332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		       _Arg&& __v,
2334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		       const _Val& __v,
2336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		       _NodeGen& __node_gen)
2338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
2339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<_Base_ptr, _Base_ptr> __res
2340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));
2341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__res.second)
2343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return _M_insert_(__res.first, __res.second,
2344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    _GLIBCXX_FORWARD(_Arg, __v),
2345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    __node_gen);
2346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_equal_lower(_GLIBCXX_FORWARD(_Arg, __v));
2348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
2349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
ARM GAS  /tmp/ccEv8ptb.s 			page 126


2354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 549              		.loc 7 2354 5 is_stmt 1 view -0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 0
 552              		@ frame_needed = 0, uses_anonymous_args = 0
 553              		.loc 7 2354 5 is_stmt 0 view .LVU115
 554 0000 70B5     		push	{r4, r5, r6, lr}
 555              	.LCFI4:
 556              		.cfi_def_cfa_offset 16
 557              		.cfi_offset 4, -16
 558              		.cfi_offset 5, -12
 559              		.cfi_offset 6, -8
 560              		.cfi_offset 14, -4
 561 0002 0400     		movs	r4, r0
 562 0004 1D00     		movs	r5, r3
2355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
2356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool __insert_left = (__x != 0 || __p == _M_end()
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    || _M_impl._M_key_compare(_S_key(__z),
 563              		.loc 7 2358 8 view .LVU116
 564 0006 0029     		cmp	r1, #0
 565 0008 09D0     		beq	.L17
 566 000a 0120     		movs	r0, #1
 567              	.LVL40:
 568              	.L13:
2359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
2360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
2362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    this->_M_impl._M_header);
 569              		.loc 7 2362 23 view .LVU117
 570 000c 231D     		adds	r3, r4, #4
2361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    this->_M_impl._M_header);
 571              		.loc 7 2361 36 view .LVU118
 572 000e 2900     		movs	r1, r5
 573 0010 FFF7FEFF 		bl	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
 574              	.LVL41:
2363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       ++_M_impl._M_node_count;
 575              		.loc 7 2363 7 view .LVU119
 576 0014 6369     		ldr	r3, [r4, #20]
 577 0016 0133     		adds	r3, r3, #1
 578 0018 6361     		str	r3, [r4, #20]
 579              	.LVL42:
 580              	.LBB2565:
 581              	.LBI2565:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 582              		.loc 7 273 7 is_stmt 1 view .LVU120
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 583              		.loc 7 273 7 is_stmt 0 view .LVU121
 584              	.LBE2565:
2364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__z);
2365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 585              		.loc 7 2365 5 view .LVU122
 586 001a 2800     		movs	r0, r5
 587              		@ sp needed
 588              	.LVL43:
 589              	.LVL44:
 590              		.loc 7 2365 5 view .LVU123
ARM GAS  /tmp/ccEv8ptb.s 			page 127


 591 001c 70BD     		pop	{r4, r5, r6, pc}
 592              	.LVL45:
 593              	.L17:
 594              	.LBB2566:
 595              	.LBI2566:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 596              		.loc 7 755 7 is_stmt 1 view .LVU124
 597              	.LBB2567:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 598              		.loc 7 756 31 is_stmt 0 view .LVU125
 599 001e 031D     		adds	r3, r0, #4
 600              	.LVL46:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 601              		.loc 7 756 31 view .LVU126
 602              	.LBE2567:
 603              	.LBE2566:
2357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    || _M_impl._M_key_compare(_S_key(__z),
 604              		.loc 7 2357 38 view .LVU127
 605 0020 9A42     		cmp	r2, r3
 606 0022 05D0     		beq	.L15
 607              	.LVL47:
 608              	.LBB2568:
 609              	.LBI2568:
 610              		.file 11 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // Functor implementations -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * that both that copyright notice and this permission notice appear
ARM GAS  /tmp/ccEv8ptb.s 			page 128


  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Copyright (c) 1996-1998
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  */
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** /** @file bits/stl_function.h
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *  Do not attempt to use it directly. @headername{functional}
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  */
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifndef _STL_FUNCTION_H
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #define _STL_FUNCTION_H 1
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #include <bits/move.h>
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** {
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.1 base classes
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup functors Function Objects
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup utilities
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Function objects, or @e functors, are objects with an @c operator()
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  defined and accessible.  They can be passed as arguments to algorithm
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  templates and used in place of a function pointer.  Not only is the
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  resulting expressiveness of the library increased, but the generated
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  code can be more efficient than what you might write by hand.  When we
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  refer to @a functors, then, generally we include function pointers in
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  the description as well.
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Often, functors are only created as temporaries passed to algorithm
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  calls, rather than being created as named variables.
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Two examples taken from the standard itself follow.  To perform a
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  by-element addition of two vectors @c a and @c b containing @c double,
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  and put the result in @c a, use
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \code
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  transform (a.begin(), a.end(), b.begin(), a.begin(), plus<double>());
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \endcode
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  To negate every element in @c a, use
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \code
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  transform(a.begin(), a.end(), a.begin(), negate<double>());
ARM GAS  /tmp/ccEv8ptb.s 			page 129


  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \endcode
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The addition and negation functions will be inlined directly.
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The standard functors are derived from structs named @c unary_function
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  and @c binary_function.  These two classes contain nothing but typedefs,
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  to aid in generic (template) programming.  If you write your own
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  functors, you might consider doing the same.
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /**
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  This is one of the @link functors functor base classes@endlink.
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg, typename _Result>
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct unary_function
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c argument_type is the type of the argument
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Arg 	argument_type;   
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c result_type is the return type
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Result 	result_type;  
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /**
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  This is one of the @link functors functor base classes@endlink.
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct binary_function
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c first_argument_type is the type of the first argument
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Arg1 	first_argument_type; 
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c second_argument_type is the type of the second argument
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Arg2 	second_argument_type;
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c result_type is the return type
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Result 	result_type;
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.2 arithmetic
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup arithmetic_functors Arithmetic Classes
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Because basic math often needs to be done during an algorithm,
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  the library provides functors for those operations.  See the
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  documentation for @link functors the base classes@endlink
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  for examples of their use.
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   struct __is_transparent;  // undefined
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct plus;
ARM GAS  /tmp/ccEv8ptb.s 			page 130


 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct minus;
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct multiplies;
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct divides;
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct modulus;
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct negate;
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct plus : public binary_function<_Tp, _Tp, _Tp>
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x + __y; }
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct minus : public binary_function<_Tp, _Tp, _Tp>
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x - __y; }
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct multiplies : public binary_function<_Tp, _Tp, _Tp>
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x * __y; }
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct divides : public binary_function<_Tp, _Tp, _Tp>
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x / __y; }
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 131


 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct modulus : public binary_function<_Tp, _Tp, _Tp>
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x % __y; }
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct negate : public unary_function<_Tp, _Tp>
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x) const
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return -__x; }
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #define __cpp_lib_transparent_operators 201510
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct plus<void>
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct minus<void>
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct multiplies<void>
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
ARM GAS  /tmp/ccEv8ptb.s 			page 132


 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct divides<void>
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct modulus<void>
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct negate<void>
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp>
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(-std::forward<_Tp>(__t)))
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(-std::forward<_Tp>(__t))
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return -std::forward<_Tp>(__t); }
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
ARM GAS  /tmp/ccEv8ptb.s 			page 133


 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.3 comparisons
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup comparison_functors Comparison Classes
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The library provides six wrapper functors for all the basic comparisons
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  in C++, like @c <.
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct equal_to;
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct not_equal_to;
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater;
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less;
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater_equal;
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less_equal;
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct equal_to : public binary_function<_Tp, _Tp, bool>
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x == __y; }
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct not_equal_to : public binary_function<_Tp, _Tp, bool>
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x != __y; }
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater : public binary_function<_Tp, _Tp, bool>
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
ARM GAS  /tmp/ccEv8ptb.s 			page 134


 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x > __y; }
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less : public binary_function<_Tp, _Tp, bool>
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 611              		.loc 11 385 7 is_stmt 1 discriminator 2 view .LVU128
 612              		.loc 11 385 7 is_stmt 0 discriminator 2 view .LVU129
 613              	.LBE2568:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 614              		.loc 7 2358 8 discriminator 2 view .LVU130
 615 0024 1369     		ldr	r3, [r2, #16]
 616 0026 2969     		ldr	r1, [r5, #16]
 617              	.LVL48:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 618              		.loc 7 2358 8 discriminator 2 view .LVU131
 619 0028 8B42     		cmp	r3, r1
 620 002a 03DC     		bgt	.L16
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 621              		.loc 7 2358 8 view .LVU132
 622 002c 0020     		movs	r0, #0
 623              	.LVL49:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 624              		.loc 7 2358 8 view .LVU133
 625 002e EDE7     		b	.L13
 626              	.LVL50:
 627              	.L15:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 628              		.loc 7 2358 8 view .LVU134
 629 0030 0120     		movs	r0, #1
 630              	.LVL51:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 631              		.loc 7 2358 8 view .LVU135
 632 0032 EBE7     		b	.L13
 633              	.LVL52:
 634              	.L16:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 635              		.loc 7 2358 8 view .LVU136
 636 0034 0120     		movs	r0, #1
 637              	.LVL53:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 638              		.loc 7 2358 8 view .LVU137
 639 0036 E9E7     		b	.L13
 640              		.cfi_endproc
 641              	.LFE2585:
 643              		.section	.rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St
 644              		.align	2
 645              	.LC2:
 646 0000 62617369 		.ascii	"basic_string::_M_construct null not valid\000"
 646      635F7374 
 646      72696E67 
 646      3A3A5F4D 
 646      5F636F6E 
ARM GAS  /tmp/ccEv8ptb.s 			page 135


 647              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20
 648              		.align	1
 649              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_i
 650              		.syntax unified
 651              		.code	16
 652              		.thumb_func
 653              		.fpu softvfp
 655              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator
 656              	.LVL54:
 657              	.LFB2614:
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 658              		.loc 1 206 7 is_stmt 1 view -0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 8
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 662              		.loc 1 206 7 is_stmt 0 view .LVU139
 663 0000 70B5     		push	{r4, r5, r6, lr}
 664              	.LCFI5:
 665              		.cfi_def_cfa_offset 16
 666              		.cfi_offset 4, -16
 667              		.cfi_offset 5, -12
 668              		.cfi_offset 6, -8
 669              		.cfi_offset 14, -4
 670 0002 82B0     		sub	sp, sp, #8
 671              	.LCFI6:
 672              		.cfi_def_cfa_offset 24
 673 0004 0500     		movs	r5, r0
 674 0006 0E1E     		subs	r6, r1, #0
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 675              		.loc 1 211 42 view .LVU140
 676 0008 0DD0     		beq	.L23
 677              	.L19:
 678              	.LVL55:
 679              	.LBB2569:
 680              	.LBI2569:
 681              		.file 12 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // Functions used by iterators -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // You should have received a copy of the GNU General Public License and
ARM GAS  /tmp/ccEv8ptb.s 			page 136


  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1996-1998
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  */
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** /** @file bits/stl_iterator_base_funcs.h
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *  This file contains all of the general iterator-related utility
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  *  functions, such as distance() and advance().
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****  */
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** #ifndef _STL_ITERATOR_BASE_FUNCS_H
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** #define _STL_ITERATOR_BASE_FUNCS_H 1
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** #pragma GCC system_header
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** #include <bits/concept_check.h>
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** #include <debug/assertions.h>
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** {
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   // Forward declaration for the overloads of __distance.
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_iterator;
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_const_iterator;
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
ARM GAS  /tmp/ccEv8ptb.s 			page 137


  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_InputIterator __first, _InputIterator __last,
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****                input_iterator_tag)
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     {
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****       // concept requirements
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****       while (__first != __last)
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 	{
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 	  ++__first;
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 	  ++__n;
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 	}
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****       return __n;
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     }
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _RandomAccessIterator>
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_RandomAccessIterator>::difference_type
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     {
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****       // concept requirements
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_RandomAccessIteratorConcept<
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 				  _RandomAccessIterator>)
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****       return __last - __first;
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     }
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** #if _GLIBCXX_USE_CXX11_ABI
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   // Forward declaration because of the qualified call in distance.
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** #endif
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h **** 
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   /**
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *  @brief A generalization of pointer arithmetic.
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *  @param  __first  An input iterator.
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *  @param  __last  An input iterator.
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *  @return  The distance between them.
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *  Returns @c n such that __first + n == __last.  This requires
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *  that @p __last must be reachable from @p __first.  Note that @c
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *  n may be negative.
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *  For random access iterators, this uses their @c + and @c - operations
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****    *  and are constant time.  For other %iterator classes they are linear time.
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   */
ARM GAS  /tmp/ccEv8ptb.s 			page 138


 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX17_CONSTEXPR
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     distance(_InputIterator __first, _InputIterator __last)
 682              		.loc 12 138 5 is_stmt 1 view .LVU141
 683              	.LBB2570:
 684              	.LBI2570:
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 685              		.loc 12 98 5 view .LVU142
 686              	.LBB2571:
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     }
 687              		.loc 12 104 23 is_stmt 0 view .LVU143
 688 000a 941B     		subs	r4, r2, r6
 689              	.LVL56:
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     }
 690              		.loc 12 104 23 view .LVU144
 691              	.LBE2571:
 692              	.LBE2570:
 693              	.LBE2569:
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 694              		.loc 1 215 12 view .LVU145
 695 000c 0194     		str	r4, [sp, #4]
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 696              		.loc 1 217 2 view .LVU146
 697 000e 0F2C     		cmp	r4, #15
 698 0010 0ED8     		bhi	.L24
 699              	.LVL57:
 700              	.L20:
 701              	.LBB2572:
 702              	.LBI2572:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 703              		.loc 3 186 7 is_stmt 1 view .LVU147
 704              	.LBB2573:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 705              		.loc 3 187 28 is_stmt 0 view .LVU148
 706 0012 2868     		ldr	r0, [r5]
 707              	.LVL58:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 708              		.loc 3 187 28 view .LVU149
 709              	.LBE2573:
 710              	.LBE2572:
 711              	.LBB2574:
 712              	.LBI2574:
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 713              		.loc 3 396 7 is_stmt 1 view .LVU150
 714              	.LBB2575:
 715              	.LBI2575:
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 716              		.loc 3 346 7 view .LVU151
 717              	.LBB2576:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 718              		.loc 3 348 2 is_stmt 0 view .LVU152
 719 0014 012C     		cmp	r4, #1
 720 0016 14D0     		beq	.L25
 721              	.LVL59:
 722              	.LBB2577:
 723              	.LBI2577:
ARM GAS  /tmp/ccEv8ptb.s 			page 139


 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR const char_type*
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       find(const char_type* __s, size_t __n, const char_type& __a)
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	if (__n == 0)
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return 0;
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	    && __builtin_constant_p(__a)
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s, __n))
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** #endif
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static char_type*
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, size_t __n)
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	if (__n == 0)
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       static char_type*
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, size_t __n)
 724              		.loc 2 361 7 is_stmt 1 view .LVU153
 725              	.LBB2578:
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	if (__n == 0)
 726              		.loc 2 363 2 view .LVU154
 727 0018 002C     		cmp	r4, #0
 728 001a 14D0     		beq	.L22
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 729              		.loc 2 365 2 view .LVU155
 730              		.loc 2 365 49 is_stmt 0 view .LVU156
 731 001c 2200     		movs	r2, r4
 732 001e 3100     		movs	r1, r6
 733 0020 FFF7FEFF 		bl	memcpy
 734              	.LVL60:
 735              		.loc 2 365 66 view .LVU157
 736 0024 0FE0     		b	.L22
 737              	.LVL61:
 738              	.L23:
 739              		.loc 2 365 66 view .LVU158
 740              	.LBE2578:
 741              	.LBE2577:
 742              	.LBE2576:
 743              	.LBE2575:
 744              	.LBE2574:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 745              		.loc 1 211 42 discriminator 1 view .LVU159
 746 0026 9142     		cmp	r1, r2
 747 0028 EFD0     		beq	.L19
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 748              		.loc 1 212 28 view .LVU160
ARM GAS  /tmp/ccEv8ptb.s 			page 140


 749 002a 0B48     		ldr	r0, .L26
 750              	.LVL62:
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 751              		.loc 1 212 28 view .LVU161
 752 002c FFF7FEFF 		bl	_ZSt19__throw_logic_errorPKc
 753              	.LVL63:
 754              	.L24:
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 755              		.loc 1 219 6 view .LVU162
 756 0030 0022     		movs	r2, #0
 757              	.LVL64:
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 758              		.loc 1 219 6 view .LVU163
 759 0032 01A9     		add	r1, sp, #4
 760              	.LVL65:
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 761              		.loc 1 219 6 view .LVU164
 762 0034 2800     		movs	r0, r5
 763              	.LVL66:
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 764              		.loc 1 219 6 view .LVU165
 765 0036 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
 766              	.LVL67:
 767              	.LBB2583:
 768              	.LBI2583:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 769              		.loc 3 178 7 is_stmt 1 view .LVU166
 770              	.LBB2584:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 771              		.loc 3 179 9 is_stmt 0 view .LVU167
 772 003a 2860     		str	r0, [r5]
 773              	.LVL68:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 774              		.loc 3 179 9 view .LVU168
 775              	.LBE2584:
 776              	.LBE2583:
 777              	.LBB2585:
 778              	.LBI2585:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 779              		.loc 3 210 7 is_stmt 1 view .LVU169
 780              	.LBB2586:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 781              		.loc 3 211 9 is_stmt 0 view .LVU170
 782 003c 019B     		ldr	r3, [sp, #4]
 783 003e AB60     		str	r3, [r5, #8]
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 784              		.loc 3 211 45 view .LVU171
 785 0040 E7E7     		b	.L20
 786              	.LVL69:
 787              	.L25:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 788              		.loc 3 211 45 view .LVU172
 789              	.LBE2586:
 790              	.LBE2585:
 791              	.LBB2587:
 792              	.LBB2582:
 793              	.LBB2581:
ARM GAS  /tmp/ccEv8ptb.s 			page 141


 794              	.LBB2579:
 795              	.LBI2579:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 796              		.loc 2 299 7 is_stmt 1 view .LVU173
 797              	.LBB2580:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 798              		.loc 2 300 9 view .LVU174
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 799              		.loc 2 300 16 is_stmt 0 view .LVU175
 800 0042 3378     		ldrb	r3, [r6]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 801              		.loc 2 300 14 view .LVU176
 802 0044 0370     		strb	r3, [r0]
 803              	.LVL70:
 804              	.L22:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 805              		.loc 2 300 14 view .LVU177
 806              	.LBE2580:
 807              	.LBE2579:
 808              	.LBE2581:
 809              	.LBE2582:
 810              	.LBE2587:
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       }
 811              		.loc 1 232 2 view .LVU178
 812 0046 019A     		ldr	r2, [sp, #4]
 813              	.LVL71:
 814              	.LBB2588:
 815              	.LBI2588:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 816              		.loc 3 214 7 is_stmt 1 view .LVU179
 817              	.LBB2589:
 818              	.LBB2590:
 819              	.LBI2590:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 820              		.loc 3 182 7 view .LVU180
 821              	.LBB2591:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 822              		.loc 3 183 9 is_stmt 0 view .LVU181
 823 0048 6A60     		str	r2, [r5, #4]
 824              	.LVL72:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 825              		.loc 3 183 9 view .LVU182
 826              	.LBE2591:
 827              	.LBE2590:
 828              	.LBB2592:
 829              	.LBI2592:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 830              		.loc 3 186 7 is_stmt 1 view .LVU183
 831              	.LBB2593:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 832              		.loc 3 187 28 is_stmt 0 view .LVU184
 833 004a 2B68     		ldr	r3, [r5]
 834              	.LVL73:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 835              		.loc 3 187 28 view .LVU185
 836              	.LBE2593:
 837              	.LBE2592:
ARM GAS  /tmp/ccEv8ptb.s 			page 142


 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 838              		.loc 3 217 31 view .LVU186
 839 004c 9B18     		adds	r3, r3, r2
 840              	.LVL74:
 841              	.LBB2594:
 842              	.LBI2594:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 843              		.loc 2 299 7 is_stmt 1 view .LVU187
 844              	.LBB2595:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 845              		.loc 2 300 9 view .LVU188
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 846              		.loc 2 300 14 is_stmt 0 view .LVU189
 847 004e 0022     		movs	r2, #0
 848              	.LVL75:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 849              		.loc 2 300 14 view .LVU190
 850 0050 1A70     		strb	r2, [r3]
 851              	.LVL76:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 852              		.loc 2 300 14 view .LVU191
 853              	.LBE2595:
 854              	.LBE2594:
 855              	.LBE2589:
 856              	.LBE2588:
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 857              		.loc 1 233 7 view .LVU192
 858 0052 02B0     		add	sp, sp, #8
 859              		@ sp needed
 860              	.LVL77:
 861              	.LVL78:
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 862              		.loc 1 233 7 view .LVU193
 863 0054 70BD     		pop	{r4, r5, r6, pc}
 864              	.L27:
 865 0056 C046     		.align	2
 866              	.L26:
 867 0058 00000000 		.word	.LC2
 868              		.cfi_endproc
 869              	.LFE2614:
 871              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_,"axG",%progbi
 872              		.align	1
 873              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
 874              		.syntax unified
 875              		.code	16
 876              		.thumb_func
 877              		.fpu softvfp
 879              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:
 880              	.LVL79:
 881              	.LFB2336:
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 882              		.loc 3 525 7 is_stmt 1 view -0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 0
 885              		@ frame_needed = 0, uses_anonymous_args = 0
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 886              		.loc 3 525 7 is_stmt 0 view .LVU195
ARM GAS  /tmp/ccEv8ptb.s 			page 143


 887 0000 70B5     		push	{r4, r5, r6, lr}
 888              	.LCFI7:
 889              		.cfi_def_cfa_offset 16
 890              		.cfi_offset 4, -16
 891              		.cfi_offset 5, -12
 892              		.cfi_offset 6, -8
 893              		.cfi_offset 14, -4
 894 0002 0400     		movs	r4, r0
 895 0004 0D00     		movs	r5, r1
 896              	.LVL80:
 897              	.LBB2610:
 898              	.LBB2611:
 899              	.LBI2611:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 900              		.loc 3 190 7 is_stmt 1 view .LVU196
 901              	.LBB2612:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 902              		.loc 3 193 51 is_stmt 0 view .LVU197
 903 0006 0300     		movs	r3, r0
 904 0008 0833     		adds	r3, r3, #8
 905              	.LVL81:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 906              		.loc 3 193 51 view .LVU198
 907              	.LBE2612:
 908              	.LBE2611:
 909              	.LBB2613:
 910              	.LBI2613:
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 911              		.loc 3 156 2 is_stmt 1 view .LVU199
 912              	.LBB2614:
 913              	.LBB2615:
 914              	.LBI2615:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 915              		.loc 4 141 7 view .LVU200
 916              	.LBB2616:
 917              	.LBI2616:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 918              		.loc 5 83 7 view .LVU201
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 919              		.loc 5 83 7 is_stmt 0 view .LVU202
 920              	.LBE2616:
 921              	.LBE2615:
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 922              		.loc 3 157 35 view .LVU203
 923 000a 0360     		str	r3, [r0]
 924              	.LVL82:
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 925              		.loc 3 157 35 view .LVU204
 926              	.LBE2614:
 927              	.LBE2613:
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 928              		.loc 3 527 9 view .LVU205
 929 000c 0029     		cmp	r1, #0
 930 000e 0AD0     		beq	.L29
 931              	.LVL83:
 932              	.LBB2617:
 933              	.LBI2617:
ARM GAS  /tmp/ccEv8ptb.s 			page 144


 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 934              		.loc 2 329 7 is_stmt 1 view .LVU206
 935              	.LBB2618:
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 936              		.loc 2 332 2 view .LVU207
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 937              		.loc 2 335 2 view .LVU208
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 938              		.loc 2 335 25 is_stmt 0 view .LVU209
 939 0010 0800     		movs	r0, r1
 940              	.LVL84:
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 941              		.loc 2 335 25 view .LVU210
 942 0012 FFF7FEFF 		bl	strlen
 943              	.LVL85:
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 944              		.loc 2 335 25 view .LVU211
 945              	.LBE2618:
 946              	.LBE2617:
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 947              		.loc 3 527 9 view .LVU212
 948 0016 2A18     		adds	r2, r5, r0
 949              	.L30:
 950              	.LVL86:
 951              	.LBB2619:
 952              	.LBI2619:
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
 953              		.loc 3 263 9 is_stmt 1 discriminator 4 view .LVU213
 954              	.LBB2620:
 955              	.LBB2621:
 956              	.LBI2621:
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 std::__false_type)
 957              		.loc 3 243 9 discriminator 4 view .LVU214
 958              	.LBB2622:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 959              		.loc 3 247 11 is_stmt 0 discriminator 4 view .LVU215
 960 0018 0023     		movs	r3, #0
 961 001a 2900     		movs	r1, r5
 962 001c 2000     		movs	r0, r4
 963 001e FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iter
 964              	.LVL87:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 965              		.loc 3 247 11 discriminator 4 view .LVU216
 966              	.LBE2622:
 967              	.LBE2621:
 968              	.LBE2620:
 969              	.LBE2619:
 970              	.LBE2610:
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 971              		.loc 3 527 77 discriminator 4 view .LVU217
 972 0022 2000     		movs	r0, r4
 973              		@ sp needed
 974              	.LVL88:
 975              	.LVL89:
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 976              		.loc 3 527 77 discriminator 4 view .LVU218
 977 0024 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccEv8ptb.s 			page 145


 978              	.LVL90:
 979              	.L29:
 980              	.LBB2623:
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 981              		.loc 3 527 9 discriminator 2 view .LVU219
 982 0026 4A1E     		subs	r2, r1, #1
 983              	.LVL91:
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 984              		.loc 3 527 9 discriminator 2 view .LVU220
 985 0028 F6E7     		b	.L30
 986              	.LBE2623:
 987              		.cfi_endproc
 988              	.LFE2336:
 990              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 991              		.thumb_set _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_,_ZNSt7__cxx1112ba
 992              		.section	.text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIc
 993              		.align	1
 994              		.weak	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_
 995              		.syntax unified
 996              		.code	16
 997              		.thumb_func
 998              		.fpu softvfp
 1000              	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsI
 1001              	.LVL92:
 1002              	.LFB2662:
1924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_lower_bound(_Link_type __x, _Base_ptr __y,
 1003              		.loc 7 1924 5 is_stmt 1 view -0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
1924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_lower_bound(_Link_type __x, _Base_ptr __y,
 1007              		.loc 7 1924 5 is_stmt 0 view .LVU222
 1008 0000 10B5     		push	{r4, lr}
 1009              	.LCFI8:
 1010              		.cfi_def_cfa_offset 8
 1011              		.cfi_offset 4, -8
 1012              		.cfi_offset 14, -4
 1013 0002 1000     		movs	r0, r2
 1014              	.LVL93:
1924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_lower_bound(_Link_type __x, _Base_ptr __y,
 1015              		.loc 7 1924 5 view .LVU223
 1016 0004 00E0     		b	.L32
 1017              	.LVL94:
 1018              	.L34:
 1019              	.LBB2624:
 1020              	.LBI2624:
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 1021              		.loc 7 797 7 is_stmt 1 view .LVU224
 1022              	.LBB2625:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1023              		.loc 7 798 53 is_stmt 0 view .LVU225
 1024 0006 C968     		ldr	r1, [r1, #12]
 1025              	.LVL95:
 1026              	.L32:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1027              		.loc 7 798 53 view .LVU226
 1028              	.LBE2625:
ARM GAS  /tmp/ccEv8ptb.s 			page 146


 1029              	.LBE2624:
1928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 1030              		.loc 7 1928 18 is_stmt 1 view .LVU227
 1031 0008 0029     		cmp	r1, #0
 1032 000a 06D0     		beq	.L33
 1033              	.LVL96:
 1034              	.LBB2626:
 1035              	.LBI2626:
 1036              		.loc 11 385 7 view .LVU228
 1037              		.loc 11 385 7 is_stmt 0 view .LVU229
 1038              	.LBE2626:
1929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
 1039              		.loc 7 1929 2 view .LVU230
 1040 000c 0A69     		ldr	r2, [r1, #16]
 1041 000e 1C68     		ldr	r4, [r3]
 1042 0010 A242     		cmp	r2, r4
 1043 0012 F8DB     		blt	.L34
 1044              	.LVL97:
 1045              	.LBB2627:
 1046              	.LBI2627:
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 1047              		.loc 7 789 7 is_stmt 1 view .LVU231
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 1048              		.loc 7 789 7 is_stmt 0 view .LVU232
 1049              	.LBE2627:
1930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
 1050              		.loc 7 1930 4 view .LVU233
 1051 0014 0800     		movs	r0, r1
1930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
 1052              		.loc 7 1930 28 view .LVU234
 1053 0016 8968     		ldr	r1, [r1, #8]
 1054              	.LVL98:
1930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
 1055              		.loc 7 1930 28 view .LVU235
 1056 0018 F6E7     		b	.L32
 1057              	.L33:
 1058              	.LVL99:
 1059              	.LBB2628:
 1060              	.LBI2628:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1061              		.loc 7 273 7 is_stmt 1 view .LVU236
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1062              		.loc 7 273 7 is_stmt 0 view .LVU237
 1063              	.LBE2628:
1934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1064              		.loc 7 1934 5 view .LVU238
 1065              		@ sp needed
 1066 001a 10BD     		pop	{r4, pc}
 1067              		.cfi_endproc
 1068              	.LFE2662:
 1070              		.section	.text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIc
 1071              		.align	1
 1072              		.weak	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_
 1073              		.syntax unified
 1074              		.code	16
 1075              		.thumb_func
 1076              		.fpu softvfp
ARM GAS  /tmp/ccEv8ptb.s 			page 147


 1078              	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsI
 1079              	.LVL100:
 1080              	.LFB2683:
2085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
 1081              		.loc 7 2085 5 is_stmt 1 view -0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
2085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
 1085              		.loc 7 2085 5 is_stmt 0 view .LVU240
 1086 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1087              	.LCFI9:
 1088              		.cfi_def_cfa_offset 20
 1089              		.cfi_offset 4, -20
 1090              		.cfi_offset 5, -16
 1091              		.cfi_offset 6, -12
 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 C646     		mov	lr, r8
 1095 0004 00B5     		push	{lr}
 1096              	.LCFI10:
 1097              		.cfi_def_cfa_offset 24
 1098              		.cfi_offset 8, -24
 1099 0006 8046     		mov	r8, r0
 1100 0008 1700     		movs	r7, r2
 1101              	.LVL101:
 1102              	.LBB2629:
 1103              	.LBI2629:
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 1104              		.loc 7 744 7 is_stmt 1 view .LVU241
 1105              	.LBB2630:
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1106              		.loc 7 745 73 is_stmt 0 view .LVU242
 1107 000a 8C68     		ldr	r4, [r1, #8]
 1108              	.LVL102:
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1109              		.loc 7 745 73 view .LVU243
 1110              	.LBE2630:
 1111              	.LBE2629:
 1112              	.LBB2631:
 1113              	.LBI2631:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 1114              		.loc 7 755 7 is_stmt 1 view .LVU244
 1115              	.LBB2632:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1116              		.loc 7 756 31 is_stmt 0 view .LVU245
 1117 000c 0D1D     		adds	r5, r1, #4
 1118              	.LVL103:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1119              		.loc 7 756 31 view .LVU246
 1120              	.LBE2632:
 1121              	.LBE2631:
2091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
 1122              		.loc 7 2091 12 view .LVU247
 1123 000e 0123     		movs	r3, #1
 1124 0010 02E0     		b	.L37
 1125              	.LVL104:
ARM GAS  /tmp/ccEv8ptb.s 			page 148


 1126              	.L40:
 1127              	.LBB2633:
 1128              	.LBI2633:
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 1129              		.loc 7 797 7 is_stmt 1 discriminator 2 view .LVU248
 1130              	.LBB2634:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1131              		.loc 7 798 53 is_stmt 0 discriminator 2 view .LVU249
 1132 0012 E268     		ldr	r2, [r4, #12]
 1133              	.LVL105:
 1134              	.L41:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1135              		.loc 7 798 53 discriminator 2 view .LVU250
 1136              	.LBE2634:
 1137              	.LBE2633:
2085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
 1138              		.loc 7 2085 5 view .LVU251
 1139 0014 2500     		movs	r5, r4
 1140 0016 1400     		movs	r4, r2
 1141              	.LVL106:
 1142              	.L37:
2092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1143              		.loc 7 2092 18 is_stmt 1 view .LVU252
 1144 0018 002C     		cmp	r4, #0
 1145 001a 0AD0     		beq	.L38
 1146              	.LVL107:
 1147              	.LBB2635:
 1148              	.LBI2635:
 1149              		.loc 11 385 7 view .LVU253
 1150              	.LBB2636:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1151              		.loc 11 386 20 is_stmt 0 view .LVU254
 1152 001c 3D68     		ldr	r5, [r7]
 1153 001e 2669     		ldr	r6, [r4, #16]
 1154              		.loc 11 386 22 view .LVU255
 1155 0020 0123     		movs	r3, #1
 1156              	.LVL108:
 1157              		.loc 11 386 22 view .LVU256
 1158 0022 AE42     		cmp	r6, r5
 1159 0024 00DC     		bgt	.L39
 1160 0026 0023     		movs	r3, #0
 1161              	.L39:
 1162              		.loc 11 386 22 view .LVU257
 1163 0028 DBB2     		uxtb	r3, r3
 1164              	.LVL109:
 1165              		.loc 11 386 22 view .LVU258
 1166              	.LBE2636:
 1167              	.LBE2635:
2096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1168              		.loc 7 2096 17 view .LVU259
 1169 002a AE42     		cmp	r6, r5
 1170 002c F1DD     		ble	.L40
 1171              	.LVL110:
 1172              	.LBB2637:
 1173              	.LBI2637:
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 1174              		.loc 7 789 7 is_stmt 1 discriminator 1 view .LVU260
ARM GAS  /tmp/ccEv8ptb.s 			page 149


 1175              	.LBB2638:
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1176              		.loc 7 790 52 is_stmt 0 discriminator 1 view .LVU261
 1177 002e A268     		ldr	r2, [r4, #8]
 1178              	.LVL111:
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1179              		.loc 7 790 52 discriminator 1 view .LVU262
 1180              	.LBE2638:
 1181              	.LBE2637:
 1182 0030 F0E7     		b	.L41
 1183              	.LVL112:
 1184              	.L38:
 1185              	.LBB2639:
 1186              	.LBI2639:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1187              		.loc 7 273 7 is_stmt 1 view .LVU263
 1188              	.LBB2640:
 1189              	.LBB2641:
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1190              		.loc 7 274 20 is_stmt 0 view .LVU264
 1191 0032 2800     		movs	r0, r5
 1192              	.LVL113:
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1193              		.loc 7 274 20 view .LVU265
 1194              	.LBE2641:
 1195              	.LBE2640:
 1196              	.LBE2639:
2099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1197              		.loc 7 2099 7 view .LVU266
 1198 0034 002B     		cmp	r3, #0
 1199 0036 04D0     		beq	.L42
 1200              	.LVL114:
 1201              	.LBB2642:
 1202              	.LBI2642:
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(this->_M_impl._M_header._M_left); }
 1203              		.loc 7 1006 7 is_stmt 1 view .LVU267
 1204              	.LBB2643:
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1205              		.loc 7 1007 56 is_stmt 0 view .LVU268
 1206 0038 CB68     		ldr	r3, [r1, #12]
 1207              	.LVL115:
 1208              	.LBB2644:
 1209              	.LBI2644:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1210              		.loc 7 273 7 is_stmt 1 view .LVU269
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1211              		.loc 7 273 7 is_stmt 0 view .LVU270
 1212              	.LBE2644:
 1213              	.LBE2643:
 1214              	.LBE2642:
2101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(__x, __y);
 1215              		.loc 7 2101 4 view .LVU271
 1216 003a AB42     		cmp	r3, r5
 1217 003c 0CD0     		beq	.L46
 1218              	.LVL116:
 1219              	.LBB2645:
 1220              	.LBI2645:
ARM GAS  /tmp/ccEv8ptb.s 			page 150


 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 1221              		.loc 7 300 7 is_stmt 1 view .LVU272
 1222              	.LBB2646:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1223              		.loc 7 302 30 is_stmt 0 view .LVU273
 1224 003e FFF7FEFF 		bl	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
 1225              	.LVL117:
 1226              	.L42:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1227              		.loc 7 302 30 view .LVU274
 1228              	.LBE2646:
 1229              	.LBE2645:
 1230              	.LBB2647:
 1231              	.LBI2647:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1232              		.loc 11 385 7 is_stmt 1 view .LVU275
 1233              	.LBB2648:
 1234              		.loc 11 386 20 is_stmt 0 view .LVU276
 1235 0042 3B68     		ldr	r3, [r7]
 1236              	.LVL118:
 1237              		.loc 11 386 20 view .LVU277
 1238              	.LBE2648:
 1239              	.LBE2647:
2106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _Res(__x, __y);
 1240              		.loc 7 2106 7 view .LVU278
 1241 0044 0269     		ldr	r2, [r0, #16]
 1242 0046 9A42     		cmp	r2, r3
 1243 0048 0ADA     		bge	.L45
 1244              	.LVL119:
 1245              	.LBB2649:
 1246              	.LBI2649:
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     {
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       typedef _T1 first_type;    /// @c first_type is the first bound type
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       typedef _T2 second_type;   /// @c second_type is the second bound type
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       _T1 first;                 /// @c first is a copy of the first object
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       _T2 second;                /// @c second is a copy of the second object
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        *  respective default constructors.  */
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(), second() { }
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                 typename _U2 = _T2,
ARM GAS  /tmp/ccEv8ptb.s 			page 151


 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                        __not_<
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       explicit constexpr pair()
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(), second() { }
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       /** Two objects may be passed to a @c pair constructor to be copied.  */
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #else
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	                 && _PCCP::template
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       /** There is also a templated copy ctor for the @c pair class itself.  */
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #else
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			    _T1, _T2>;
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			  bool>::type=true>
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
ARM GAS  /tmp/ccEv8ptb.s 			page 152


 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // DR 811.
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U2, typename
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U2, typename
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			  && _PCCP::template
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 1247              		.loc 9 341 12 is_stmt 1 view .LVU279
 1248              	.LBB2650:
 1249              	.LBB2651:
 1250              	.LBB2652:
 1251              	.LBI2652:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1252              		.loc 6 74 5 view .LVU280
ARM GAS  /tmp/ccEv8ptb.s 			page 153


  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1253              		.loc 6 74 5 is_stmt 0 view .LVU281
 1254              	.LBE2652:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1255              		.loc 9 342 64 view .LVU282
 1256 004a 4346     		mov	r3, r8
 1257 004c 1C60     		str	r4, [r3]
 1258              	.LVL120:
 1259              	.LBB2653:
 1260              	.LBI2653:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1261              		.loc 6 74 5 is_stmt 1 view .LVU283
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1262              		.loc 6 74 5 is_stmt 0 view .LVU284
 1263              	.LBE2653:
 1264              		.loc 9 342 64 view .LVU285
 1265 004e 5D60     		str	r5, [r3, #4]
 1266              	.LVL121:
 1267              	.L36:
 1268              		.loc 9 342 64 view .LVU286
 1269              	.LBE2651:
 1270              	.LBE2650:
 1271              	.LBE2649:
2109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1272              		.loc 7 2109 5 view .LVU287
 1273 0050 4046     		mov	r0, r8
 1274              	.LVL122:
2109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1275              		.loc 7 2109 5 view .LVU288
 1276              		@ sp needed
 1277              	.LVL123:
 1278              	.LVL124:
2109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1279              		.loc 7 2109 5 view .LVU289
 1280 0052 80BC     		pop	{r7}
 1281 0054 B846     		mov	r8, r7
 1282 0056 F0BD     		pop	{r4, r5, r6, r7, pc}
 1283              	.LVL125:
 1284              	.L46:
 1285              	.LBB2654:
 1286              	.LBI2654:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1287              		.loc 9 341 12 is_stmt 1 view .LVU290
 1288              	.LBB2655:
 1289              	.LBB2656:
 1290              	.LBB2657:
 1291              	.LBI2657:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1292              		.loc 6 74 5 view .LVU291
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1293              		.loc 6 74 5 is_stmt 0 view .LVU292
 1294              	.LBE2657:
 1295              		.loc 9 342 64 view .LVU293
 1296 0058 4346     		mov	r3, r8
 1297 005a 1C60     		str	r4, [r3]
 1298              	.LVL126:
 1299              	.LBB2658:
ARM GAS  /tmp/ccEv8ptb.s 			page 154


 1300              	.LBI2658:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1301              		.loc 6 74 5 is_stmt 1 view .LVU294
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1302              		.loc 6 74 5 is_stmt 0 view .LVU295
 1303              	.LBE2658:
 1304              		.loc 9 342 64 view .LVU296
 1305 005c 5D60     		str	r5, [r3, #4]
 1306              	.LBE2656:
 1307              		.loc 9 342 68 view .LVU297
 1308 005e F7E7     		b	.L36
 1309              	.LVL127:
 1310              	.L45:
 1311              		.loc 9 342 68 view .LVU298
 1312              	.LBE2655:
 1313              	.LBE2654:
 1314              	.LBB2659:
 1315              	.LBI2659:
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 1316              		.loc 9 311 18 is_stmt 1 view .LVU299
 1317              	.LBB2660:
 1318              	.LBB2661:
 1319              	.LBB2662:
 1320              	.LBI2662:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1321              		.loc 6 74 5 view .LVU300
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1322              		.loc 6 74 5 is_stmt 0 view .LVU301
 1323              	.LBE2662:
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1324              		.loc 9 312 51 view .LVU302
 1325 0060 4346     		mov	r3, r8
 1326 0062 1860     		str	r0, [r3]
 1327 0064 0023     		movs	r3, #0
 1328 0066 4246     		mov	r2, r8
 1329 0068 5360     		str	r3, [r2, #4]
 1330              	.LVL128:
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1331              		.loc 9 312 51 view .LVU303
 1332 006a F1E7     		b	.L36
 1333              	.LBE2661:
 1334              	.LBE2660:
 1335              	.LBE2659:
 1336              		.cfi_endproc
 1337              	.LFE2683:
 1339              		.section	.text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIc
 1340              		.align	1
 1341              		.weak	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_
 1342              		.syntax unified
 1343              		.code	16
 1344              		.thumb_func
 1345              		.fpu softvfp
 1347              	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsI
 1348              	.LVL129:
 1349              	.LFB2566:
2187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
 1350              		.loc 7 2187 5 is_stmt 1 view -0
ARM GAS  /tmp/ccEv8ptb.s 			page 155


 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 0
 1353              		@ frame_needed = 0, uses_anonymous_args = 0
2187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
 1354              		.loc 7 2187 5 is_stmt 0 view .LVU305
 1355 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1356              	.LCFI11:
 1357              		.cfi_def_cfa_offset 20
 1358              		.cfi_offset 4, -20
 1359              		.cfi_offset 5, -16
 1360              		.cfi_offset 6, -12
 1361              		.cfi_offset 7, -8
 1362              		.cfi_offset 14, -4
 1363 0002 C646     		mov	lr, r8
 1364 0004 00B5     		push	{lr}
 1365              	.LCFI12:
 1366              		.cfi_def_cfa_offset 24
 1367              		.cfi_offset 8, -24
 1368 0006 0400     		movs	r4, r0
 1369 0008 0E00     		movs	r6, r1
 1370 000a 1500     		movs	r5, r2
 1371              	.LVL130:
2187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
 1372              		.loc 7 2187 5 view .LVU306
 1373 000c 1F00     		movs	r7, r3
 1374              	.LVL131:
 1375              	.LBB2663:
 1376              	.LBI2663:
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 1377              		.loc 7 352 7 is_stmt 1 view .LVU307
 1378              	.LBB2664:
 1379              	.LBB2665:
 1380              	.LBI2665:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1381              		.loc 7 273 7 view .LVU308
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1382              		.loc 7 273 7 is_stmt 0 view .LVU309
 1383              	.LBE2665:
 1384              	.LBE2664:
 1385              	.LBE2663:
 1386              	.LBB2666:
 1387              	.LBB2667:
 1388              	.LBI2667:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 1389              		.loc 7 755 7 is_stmt 1 view .LVU310
 1390              	.LBB2668:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1391              		.loc 7 756 31 is_stmt 0 view .LVU311
 1392 000e 0A1D     		adds	r2, r1, #4
 1393              	.LVL132:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1394              		.loc 7 756 31 view .LVU312
 1395              	.LBE2668:
 1396              	.LBE2667:
2195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1397              		.loc 7 2195 7 view .LVU313
 1398 0010 9542     		cmp	r5, r2
ARM GAS  /tmp/ccEv8ptb.s 			page 156


 1399 0012 13D0     		beq	.L61
 1400              	.LVL133:
 1401              	.LBB2669:
 1402              	.LBB2670:
 1403              	.LBI2670:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1404              		.loc 11 385 7 is_stmt 1 view .LVU314
 1405              	.LBB2671:
 1406              		.loc 11 386 20 is_stmt 0 view .LVU315
 1407 0014 3A68     		ldr	r2, [r7]
 1408 0016 9046     		mov	r8, r2
 1409 0018 2A69     		ldr	r2, [r5, #16]
 1410              	.LVL134:
 1411              		.loc 11 386 20 view .LVU316
 1412              	.LBE2671:
 1413              	.LBE2670:
2203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1414              		.loc 7 2203 12 view .LVU317
 1415 001a 4245     		cmp	r2, r8
 1416 001c 2FDD     		ble	.L51
 1417              	.LBB2672:
2207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
 1418              		.loc 7 2207 22 view .LVU318
 1419 001e CA68     		ldr	r2, [r1, #12]
2207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
 1420              		.loc 7 2207 4 view .LVU319
 1421 0020 AA42     		cmp	r2, r5
 1422 0022 20D0     		beq	.L62
 1423              	.LVL135:
 1424              	.LBB2673:
 1425              	.LBI2673:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 1426              		.loc 7 300 7 is_stmt 1 view .LVU320
 1427              	.LBB2674:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1428              		.loc 7 302 30 is_stmt 0 view .LVU321
 1429 0024 2800     		movs	r0, r5
 1430              	.LVL136:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1431              		.loc 7 302 30 view .LVU322
 1432 0026 FFF7FEFF 		bl	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
 1433              	.LVL137:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1434              		.loc 7 302 30 view .LVU323
 1435              	.LBE2674:
 1436              	.LBE2673:
 1437              	.LBB2675:
 1438              	.LBI2675:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1439              		.loc 11 385 7 is_stmt 1 view .LVU324
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1440              		.loc 11 385 7 is_stmt 0 view .LVU325
 1441              	.LBE2675:
2209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 1442              		.loc 7 2209 9 view .LVU326
 1443 002a 0369     		ldr	r3, [r0, #16]
 1444 002c 4345     		cmp	r3, r8
ARM GAS  /tmp/ccEv8ptb.s 			page 157


 1445 002e 20DA     		bge	.L54
 1446              	.LVL138:
 1447              	.LBB2676:
 1448              	.LBI2676:
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 1449              		.loc 7 797 7 is_stmt 1 view .LVU327
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 1450              		.loc 7 797 7 is_stmt 0 view .LVU328
 1451              	.LBE2676:
2211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
 1452              		.loc 7 2211 8 view .LVU329
 1453 0030 C368     		ldr	r3, [r0, #12]
 1454 0032 002B     		cmp	r3, #0
 1455 0034 1AD0     		beq	.L63
 1456              	.LVL139:
 1457              	.LBB2677:
 1458              	.LBI2677:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1459              		.loc 9 341 12 is_stmt 1 view .LVU330
 1460              	.LBB2678:
 1461              	.LBB2679:
 1462              	.LBB2680:
 1463              	.LBI2680:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1464              		.loc 6 74 5 view .LVU331
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1465              		.loc 6 74 5 is_stmt 0 view .LVU332
 1466              	.LBE2680:
 1467              		.loc 9 342 64 view .LVU333
 1468 0036 2560     		str	r5, [r4]
 1469              	.LVL140:
 1470              	.LBB2681:
 1471              	.LBI2681:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1472              		.loc 6 74 5 is_stmt 1 view .LVU334
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1473              		.loc 6 74 5 is_stmt 0 view .LVU335
 1474              	.LBE2681:
 1475              		.loc 9 342 64 view .LVU336
 1476 0038 6560     		str	r5, [r4, #4]
 1477              	.LBE2679:
 1478              		.loc 9 342 68 view .LVU337
 1479 003a 10E0     		b	.L47
 1480              	.LVL141:
 1481              	.L61:
 1482              		.loc 9 342 68 view .LVU338
 1483              	.LBE2678:
 1484              	.LBE2677:
 1485              	.LBE2672:
 1486              	.LBE2669:
 1487              	.LBB2715:
 1488              	.LBI2715:
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_impl._M_node_count; }
 1489              		.loc 7 1042 7 is_stmt 1 view .LVU339
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_impl._M_node_count; }
 1490              		.loc 7 1042 7 is_stmt 0 view .LVU340
 1491              	.LBE2715:
ARM GAS  /tmp/ccEv8ptb.s 			page 158


2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1492              		.loc 7 2198 8 view .LVU341
 1493 003c 4B69     		ldr	r3, [r1, #20]
 1494              	.LVL142:
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1495              		.loc 7 2198 8 view .LVU342
 1496 003e 002B     		cmp	r3, #0
 1497 0040 08D0     		beq	.L49
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1498              		.loc 7 2198 8 discriminator 1 view .LVU343
 1499 0042 0B69     		ldr	r3, [r1, #16]
 1500              	.LVL143:
 1501              	.LBB2716:
 1502              	.LBI2716:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1503              		.loc 11 385 7 is_stmt 1 discriminator 1 view .LVU344
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1504              		.loc 11 385 7 is_stmt 0 discriminator 1 view .LVU345
 1505              	.LBE2716:
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1506              		.loc 7 2198 8 discriminator 1 view .LVU346
 1507 0044 3A68     		ldr	r2, [r7]
 1508 0046 1969     		ldr	r1, [r3, #16]
 1509              	.LVL144:
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1510              		.loc 7 2198 8 discriminator 1 view .LVU347
 1511 0048 8A42     		cmp	r2, r1
 1512 004a 03DD     		ble	.L49
 1513              	.LVL145:
 1514              	.LBB2717:
 1515              	.LBI2717:
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 1516              		.loc 9 325 18 is_stmt 1 view .LVU348
 1517              	.LBB2718:
 1518              	.LBB2719:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1519              		.loc 9 326 51 is_stmt 0 view .LVU349
 1520 004c 0022     		movs	r2, #0
 1521 004e 0260     		str	r2, [r0]
 1522              	.LVL146:
 1523              	.LBB2720:
 1524              	.LBI2720:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1525              		.loc 6 74 5 is_stmt 1 view .LVU350
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1526              		.loc 6 74 5 is_stmt 0 view .LVU351
 1527              	.LBE2720:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1528              		.loc 9 326 51 view .LVU352
 1529 0050 4360     		str	r3, [r0, #4]
 1530              	.LVL147:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1531              		.loc 9 326 51 view .LVU353
 1532 0052 04E0     		b	.L47
 1533              	.L49:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1534              		.loc 9 326 51 view .LVU354
ARM GAS  /tmp/ccEv8ptb.s 			page 159


 1535              	.LBE2719:
 1536              	.LBE2718:
 1537              	.LBE2717:
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1538              		.loc 7 2201 41 discriminator 4 view .LVU355
 1539 0054 3A00     		movs	r2, r7
 1540 0056 3100     		movs	r1, r6
 1541 0058 2000     		movs	r0, r4
 1542              	.LVL148:
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1543              		.loc 7 2201 41 discriminator 4 view .LVU356
 1544 005a FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 1545              	.LVL149:
 1546              	.L47:
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1547              		.loc 7 2201 41 discriminator 4 view .LVU357
 1548              	.LBE2666:
2238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1549              		.loc 7 2238 5 view .LVU358
 1550 005e 2000     		movs	r0, r4
 1551              		@ sp needed
 1552              	.LVL150:
 1553              	.LVL151:
 1554              	.LVL152:
 1555              	.LVL153:
2238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1556              		.loc 7 2238 5 view .LVU359
 1557 0060 80BC     		pop	{r7}
 1558 0062 B846     		mov	r8, r7
 1559 0064 F0BD     		pop	{r4, r5, r6, r7, pc}
 1560              	.LVL154:
 1561              	.L62:
 1562              	.LBB2722:
 1563              	.LBB2721:
 1564              	.LBB2691:
 1565              	.LBB2682:
 1566              	.LBI2682:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1567              		.loc 9 341 12 is_stmt 1 view .LVU360
 1568              	.LBB2683:
 1569              	.LBB2684:
 1570              	.LBB2685:
 1571              	.LBI2685:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1572              		.loc 6 74 5 view .LVU361
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1573              		.loc 6 74 5 is_stmt 0 view .LVU362
 1574              	.LBE2685:
 1575              		.loc 9 342 64 view .LVU363
 1576 0066 0260     		str	r2, [r0]
 1577              	.LVL155:
 1578              	.LBB2686:
 1579              	.LBI2686:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1580              		.loc 6 74 5 is_stmt 1 view .LVU364
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1581              		.loc 6 74 5 is_stmt 0 view .LVU365
ARM GAS  /tmp/ccEv8ptb.s 			page 160


 1582              	.LBE2686:
 1583              		.loc 9 342 64 view .LVU366
 1584 0068 4260     		str	r2, [r0, #4]
 1585              	.LBE2684:
 1586              		.loc 9 342 68 view .LVU367
 1587 006a F8E7     		b	.L47
 1588              	.LVL156:
 1589              	.L63:
 1590              		.loc 9 342 68 view .LVU368
 1591              	.LBE2683:
 1592              	.LBE2682:
 1593              	.LBB2687:
 1594              	.LBI2687:
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 1595              		.loc 9 325 18 is_stmt 1 view .LVU369
 1596              	.LBB2688:
 1597              	.LBB2689:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1598              		.loc 9 326 51 is_stmt 0 view .LVU370
 1599 006c 2360     		str	r3, [r4]
 1600              	.LVL157:
 1601              	.LBB2690:
 1602              	.LBI2690:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1603              		.loc 6 74 5 is_stmt 1 view .LVU371
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1604              		.loc 6 74 5 is_stmt 0 view .LVU372
 1605              	.LBE2690:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1606              		.loc 9 326 51 view .LVU373
 1607 006e 6060     		str	r0, [r4, #4]
 1608              	.LVL158:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1609              		.loc 9 326 51 view .LVU374
 1610 0070 F5E7     		b	.L47
 1611              	.L54:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1612              		.loc 9 326 51 view .LVU375
 1613              	.LBE2689:
 1614              	.LBE2688:
 1615              	.LBE2687:
2217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1616              		.loc 7 2217 41 view .LVU376
 1617 0072 3A00     		movs	r2, r7
 1618 0074 3100     		movs	r1, r6
 1619 0076 2000     		movs	r0, r4
 1620 0078 FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 1621              	.LVL159:
 1622 007c EFE7     		b	.L47
 1623              	.LVL160:
 1624              	.L51:
2217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1625              		.loc 7 2217 41 view .LVU377
 1626              	.LBE2691:
 1627              	.LBB2692:
2219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1628              		.loc 7 2219 12 view .LVU378
ARM GAS  /tmp/ccEv8ptb.s 			page 161


 1629 007e 4245     		cmp	r2, r8
 1630 0080 1BDA     		bge	.L56
 1631              	.LBB2693:
2223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1632              		.loc 7 2223 22 view .LVU379
 1633 0082 0A69     		ldr	r2, [r1, #16]
2223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1634              		.loc 7 2223 4 view .LVU380
 1635 0084 AA42     		cmp	r2, r5
 1636 0086 0BD0     		beq	.L64
 1637              	.LVL161:
 1638              	.LBB2694:
 1639              	.LBI2694:
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 1640              		.loc 7 285 7 is_stmt 1 view .LVU381
 1641              	.LBB2695:
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1642              		.loc 7 287 30 is_stmt 0 view .LVU382
 1643 0088 2800     		movs	r0, r5
 1644              	.LVL162:
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1645              		.loc 7 287 30 view .LVU383
 1646 008a FFF7FEFF 		bl	_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
 1647              	.LVL163:
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1648              		.loc 7 287 30 view .LVU384
 1649              	.LBE2695:
 1650              	.LBE2694:
 1651              	.LBB2696:
 1652              	.LBI2696:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1653              		.loc 11 385 7 is_stmt 1 view .LVU385
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1654              		.loc 11 385 7 is_stmt 0 view .LVU386
 1655              	.LBE2696:
2225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 1656              		.loc 7 2225 9 view .LVU387
 1657 008e 0369     		ldr	r3, [r0, #16]
 1658 0090 9845     		cmp	r8, r3
 1659 0092 0CDA     		bge	.L59
 1660              	.LVL164:
 1661              	.LBB2697:
 1662              	.LBI2697:
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 1663              		.loc 7 797 7 is_stmt 1 view .LVU388
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 1664              		.loc 7 797 7 is_stmt 0 view .LVU389
 1665              	.LBE2697:
2227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
 1666              		.loc 7 2227 8 view .LVU390
 1667 0094 EB68     		ldr	r3, [r5, #12]
 1668 0096 002B     		cmp	r3, #0
 1669 0098 06D0     		beq	.L65
 1670              	.LVL165:
 1671              	.LBB2698:
 1672              	.LBI2698:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
ARM GAS  /tmp/ccEv8ptb.s 			page 162


 1673              		.loc 9 341 12 is_stmt 1 view .LVU391
 1674              	.LBB2699:
 1675              	.LBB2700:
 1676              	.LBB2701:
 1677              	.LBI2701:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1678              		.loc 6 74 5 view .LVU392
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1679              		.loc 6 74 5 is_stmt 0 view .LVU393
 1680              	.LBE2701:
 1681              		.loc 9 342 64 view .LVU394
 1682 009a 2060     		str	r0, [r4]
 1683              	.LVL166:
 1684              	.LBB2702:
 1685              	.LBI2702:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1686              		.loc 6 74 5 is_stmt 1 view .LVU395
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1687              		.loc 6 74 5 is_stmt 0 view .LVU396
 1688              	.LBE2702:
 1689              		.loc 9 342 64 view .LVU397
 1690 009c 6060     		str	r0, [r4, #4]
 1691              	.LBE2700:
 1692              		.loc 9 342 68 view .LVU398
 1693 009e DEE7     		b	.L47
 1694              	.LVL167:
 1695              	.L64:
 1696              		.loc 9 342 68 view .LVU399
 1697              	.LBE2699:
 1698              	.LBE2698:
 1699              	.LBB2703:
 1700              	.LBI2703:
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 1701              		.loc 9 325 18 is_stmt 1 view .LVU400
 1702              	.LBB2704:
 1703              	.LBB2705:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1704              		.loc 9 326 51 is_stmt 0 view .LVU401
 1705 00a0 0023     		movs	r3, #0
 1706              	.LVL168:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1707              		.loc 9 326 51 view .LVU402
 1708 00a2 0360     		str	r3, [r0]
 1709              	.LVL169:
 1710              	.LBB2706:
 1711              	.LBI2706:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1712              		.loc 6 74 5 is_stmt 1 view .LVU403
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1713              		.loc 6 74 5 is_stmt 0 view .LVU404
 1714              	.LBE2706:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1715              		.loc 9 326 51 view .LVU405
 1716 00a4 4260     		str	r2, [r0, #4]
 1717              	.LVL170:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1718              		.loc 9 326 51 view .LVU406
ARM GAS  /tmp/ccEv8ptb.s 			page 163


 1719 00a6 DAE7     		b	.L47
 1720              	.LVL171:
 1721              	.L65:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1722              		.loc 9 326 51 view .LVU407
 1723              	.LBE2705:
 1724              	.LBE2704:
 1725              	.LBE2703:
 1726              	.LBB2707:
 1727              	.LBI2707:
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 1728              		.loc 9 325 18 is_stmt 1 view .LVU408
 1729              	.LBB2708:
 1730              	.LBB2709:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1731              		.loc 9 326 51 is_stmt 0 view .LVU409
 1732 00a8 2360     		str	r3, [r4]
 1733              	.LVL172:
 1734              	.LBB2710:
 1735              	.LBI2710:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1736              		.loc 6 74 5 is_stmt 1 view .LVU410
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1737              		.loc 6 74 5 is_stmt 0 view .LVU411
 1738              	.LBE2710:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1739              		.loc 9 326 51 view .LVU412
 1740 00aa 6560     		str	r5, [r4, #4]
 1741              	.LVL173:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1742              		.loc 9 326 51 view .LVU413
 1743 00ac D7E7     		b	.L47
 1744              	.L59:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1745              		.loc 9 326 51 view .LVU414
 1746              	.LBE2709:
 1747              	.LBE2708:
 1748              	.LBE2707:
2233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1749              		.loc 7 2233 41 view .LVU415
 1750 00ae 3A00     		movs	r2, r7
 1751 00b0 3100     		movs	r1, r6
 1752 00b2 2000     		movs	r0, r4
 1753 00b4 FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 1754              	.LVL174:
 1755 00b8 D1E7     		b	.L47
 1756              	.LVL175:
 1757              	.L56:
2233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1758              		.loc 7 2233 41 view .LVU416
 1759              	.LBE2693:
 1760              	.LBB2711:
 1761              	.LBI2711:
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 1762              		.loc 9 311 18 is_stmt 1 view .LVU417
 1763              	.LBB2712:
 1764              	.LBB2713:
ARM GAS  /tmp/ccEv8ptb.s 			page 164


 1765              	.LBB2714:
 1766              	.LBI2714:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1767              		.loc 6 74 5 view .LVU418
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1768              		.loc 6 74 5 is_stmt 0 view .LVU419
 1769              	.LBE2714:
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1770              		.loc 9 312 51 view .LVU420
 1771 00ba 0560     		str	r5, [r0]
 1772 00bc 0023     		movs	r3, #0
 1773              	.LVL176:
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1774              		.loc 9 312 51 view .LVU421
 1775 00be 4360     		str	r3, [r0, #4]
 1776              	.LVL177:
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1777              		.loc 9 312 51 view .LVU422
 1778 00c0 CDE7     		b	.L47
 1779              	.LBE2713:
 1780              	.LBE2712:
 1781              	.LBE2711:
 1782              	.LBE2692:
 1783              	.LBE2721:
 1784              	.LBE2722:
 1785              		.cfi_endproc
 1786              	.LFE2566:
 1788              		.section	.text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIc
 1789              		.align	1
 1790              		.weak	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_
 1791              		.syntax unified
 1792              		.code	16
 1793              		.thumb_func
 1794              		.fpu softvfp
 1796              	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsI
 1797              	.LVL178:
 1798              	.LFB2466:
2366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
2372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool __insert_left = (__p == _M_end()
2374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    || !_M_impl._M_key_compare(_S_key(__p),
2375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						       _S_key(__z)));
2376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
2378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    this->_M_impl._M_header);
2379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       ++_M_impl._M_node_count;
2380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__z);
2381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
ARM GAS  /tmp/ccEv8ptb.s 			page 165


2386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal_lower_node(_Link_type __z)
2388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
2390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
2391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
2392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x;
2394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
2395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_S_left(__x) : _S_right(__x);
2396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _M_insert_lower_node(__y, __z);
2398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename... _Args>
2403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			     _Compare, _Alloc>::iterator, bool>
2405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_unique(_Args&&... __args)
2407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
2408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
2411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    typedef pair<iterator, bool> _Res;
2413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
2414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
2415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
2416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	
2417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(iterator(__res.first), false);
2419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
2421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
2424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
2426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename... _Args>
2430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_equal(_Args&&... __args)
2433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
2434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
2437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_equal_pos(_S_key(__z));
2439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_insert_node(__res.first, __res.second, __z);
2440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
2442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
ARM GAS  /tmp/ccEv8ptb.s 			page 166


2443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
2445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
2447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename... _Args>
2451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 1799              		.loc 7 2452 7 is_stmt 1 view -0
 1800              		.cfi_startproc
 1801              		@ args = 4, pretend = 0, frame = 8
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
 1803              		.loc 7 2452 7 is_stmt 0 view .LVU424
 1804 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1805              	.LCFI13:
 1806              		.cfi_def_cfa_offset 20
 1807              		.cfi_offset 4, -20
 1808              		.cfi_offset 5, -16
 1809              		.cfi_offset 6, -12
 1810              		.cfi_offset 7, -8
 1811              		.cfi_offset 14, -4
 1812 0002 83B0     		sub	sp, sp, #12
 1813              	.LCFI14:
 1814              		.cfi_def_cfa_offset 32
 1815 0004 0500     		movs	r5, r0
 1816 0006 0E00     		movs	r6, r1
 1817              	.LVL179:
 1818              		.loc 7 2452 7 view .LVU425
 1819 0008 1F00     		movs	r7, r3
 1820              	.LVL180:
 1821              	.LBB2723:
 1822              	.LBI2723:
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1823              		.loc 7 628 2 is_stmt 1 view .LVU426
 1824              	.LBB2724:
 1825              	.LBB2725:
 1826              	.LBI2725:
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 1827              		.loc 7 579 7 view .LVU427
 1828              	.LBB2726:
 1829              	.LBI2726:
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 1830              		.loc 8 443 7 view .LVU428
 1831              	.LBB2727:
 1832              	.LBI2727:
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 1833              		.loc 5 102 7 view .LVU429
 1834              	.LBB2728:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1835              		.loc 5 114 41 is_stmt 0 view .LVU430
 1836 000a 2C20     		movs	r0, #44
 1837              	.LVL181:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1838              		.loc 5 114 41 view .LVU431
 1839 000c FFF7FEFF 		bl	_Znwj
ARM GAS  /tmp/ccEv8ptb.s 			page 167


 1840              	.LVL182:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1841              		.loc 5 114 41 view .LVU432
 1842 0010 0400     		movs	r4, r0
 1843              	.LVL183:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1844              		.loc 5 114 41 view .LVU433
 1845              	.LBE2728:
 1846              	.LBE2727:
 1847              	.LBE2726:
 1848              	.LBE2725:
 1849              	.LBB2729:
 1850              	.LBI2729:
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1851              		.loc 7 609 2 is_stmt 1 view .LVU434
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1852              		.loc 7 609 2 is_stmt 0 view .LVU435
 1853              	.LBE2729:
 1854              	.LBE2724:
 1855              	.LBE2723:
 1856              		.file 13 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // Copyright (C) 1994-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // This file is part of GCC.
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** //
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // it under the terms of the GNU General Public License as published by
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // any later version.
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // 
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // GNU General Public License for more details.
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // 
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // You should have received a copy of the GNU General Public License and
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // <http://www.gnu.org/licenses/>.
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** /** @file new
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  This is a Standard C++ Library header.
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  handling memory allocation errors; see
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  */
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #ifndef _NEW
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #define _NEW
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 168


  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #pragma GCC system_header
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #include <bits/c++config.h>
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #include <exception>
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #pragma GCC visibility push(default)
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** extern "C++" {
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** namespace std 
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** {
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /**
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  @ingroup exceptions
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  errors from the throwing forms of @c new.  */
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   class bad_alloc : public exception 
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   {
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   public:
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     bad_alloc() throw() { }
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cplusplus >= 201103L
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     bad_alloc(const bad_alloc&) = default;
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // This declaration is not useless:
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     virtual ~bad_alloc() throw();
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // See comment in eh_exception.cc.
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     virtual const char* what() const throw();
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   };
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cplusplus >= 201103L
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   class bad_array_new_length : public bad_alloc
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   {
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   public:
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     bad_array_new_length() throw() { }
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // This declaration is not useless:
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     virtual ~bad_array_new_length() throw();
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // See comment in eh_exception.cc.
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     virtual const char* what() const throw();
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   };
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cpp_aligned_new
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   enum class align_val_t: size_t {};
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   struct nothrow_t
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   {
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccEv8ptb.s 			page 169


  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     explicit nothrow_t() = default;
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   };
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   extern const nothrow_t nothrow;
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /** If you write your own error handler to be called by @c new, it must
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  be of this type.  */
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   typedef void (*new_handler)();
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /// Takes a replacement handler as the argument, returns the
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /// previous handler.
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   new_handler set_new_handler(new_handler) throw();
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cplusplus >= 201103L
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /// Return the current new handler.
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   new_handler get_new_handler() noexcept;
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** } // namespace std
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** //@{
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** /** These are replaceable signatures:
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  - normal array new and delete (same)
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *    @c NULL on error)
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  - @c nothrow array new and delete (same)
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  does nothing) may not be replaced by a user's program.
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** */
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cpp_sized_deallocation
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cpp_aligned_new
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
ARM GAS  /tmp/ccEv8ptb.s 			page 170


 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, std::align_val_t)
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, std::align_val_t)
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cpp_sized_deallocation
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif // __cpp_sized_deallocation
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif // __cpp_aligned_new
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // Default placement versions of operator new.
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** { return __p; }
 1857              		.loc 13 174 3 is_stmt 1 view .LVU436
 1858              	.LBB2767:
 1859              	.LBB2765:
 1860              	.LBB2763:
 1861              	.LBB2730:
 1862              	.LBI2730:
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 1863              		.loc 8 482 2 view .LVU437
 1864              	.LBB2731:
 1865              	.LBI2731:
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	noexcept(noexcept(::new((void *)__p)
 1866              		.loc 5 144 2 view .LVU438
 1867              	.LBB2732:
 1868              	.LBI2732:
 1869              		.file 14 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // <tuple> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // 3.1, as published by the Free Software Foundation.
ARM GAS  /tmp/ccEv8ptb.s 			page 171


  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** /** @file include/tuple
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****  *  This is a Standard C++ Library header.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****  */
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #ifndef _GLIBCXX_TUPLE
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #define _GLIBCXX_TUPLE 1
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus < 201103L
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** # include <bits/c++0x_warning.h>
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #else
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #include <utility>
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #include <array>
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #include <bits/uses_allocator.h>
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #include <bits/invoke.h>
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** {
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    *  @addtogroup utilities
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    *  @{
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     class tuple;
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp>
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __is_empty_non_tuple : is_empty<_Tp> { };
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Using EBO for elements that are tuples causes ambiguous base errors.
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _El0, typename... _El>
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Use the Empty Base-class Optimization for empty, non-final types.
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp>
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     using __empty_not_final
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     = typename conditional<__is_final(_Tp), false_type,
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			   __is_empty_non_tuple<_Tp>>::type;
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head,
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	   bool = __empty_not_final<_Head>::value>
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Head_base;
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head>
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Head_base<_Idx, _Head, true>
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : public _Head
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
ARM GAS  /tmp/ccEv8ptb.s 			page 172


  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base()
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Head() { }
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(const _Head& __h)
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Head(__h) { }
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(const _Head_base&) = default;
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(_Head_base&&) = default;
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Head_base(_UHead&& __h)
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(std::forward<_UHead>(__h)) { }
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Head() { }
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(allocator_arg, *__a._M_a) { }
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(*__a._M_a) { }
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(std::forward<_UHead>(__uhead)) { }
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Head&
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(_Head_base& __b) noexcept { return __b; }
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Head&
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b; }
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head>
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Head_base<_Idx, _Head, false>
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base()
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl() { }
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(const _Head& __h)
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl(__h) { }
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(const _Head_base&) = default;
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(_Head_base&&) = default;
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Head_base(_UHead&& __h)
ARM GAS  /tmp/ccEv8ptb.s 			page 173


 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__h)) { }
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl() { }
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(allocator_arg, *__a._M_a) { }
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(*__a._M_a) { }
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__uhead)) { }
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Head&
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Head&
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Head _M_head_impl;
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Contains the actual implementation of the @c tuple template, stored
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * as a recursive inheritance hierarchy from the first element (most
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * derived class) to the last (least derived class). The @c Idx
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * parameter gives the 0-based index of the element stored at this
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * point in the hierarchy; we use it to implement a constant-time
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * get() operation.
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename... _Elements>
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Tuple_impl;
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Recursive tuple implementation. Here we store the @c Head element
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * and derive from a @c Tuple_impl containing the remaining elements
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * (which contains the @c Tail).
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head, typename... _Tail>
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Tuple_impl<_Idx, _Head, _Tail...>
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : public _Tuple_impl<_Idx + 1, _Tail...>,
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       private _Head_base<_Idx, _Head>
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<std::size_t, typename...> friend class _Tuple_impl;
ARM GAS  /tmp/ccEv8ptb.s 			page 174


 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Head_base<_Idx, _Head> _Base;
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Head&
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Head&
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Inherited&
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Inherited&
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_tail(const _Tuple_impl& __t) noexcept { return __t; }
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl()
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(), _Base() { }
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       explicit
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(__tail...), _Base(__head) { }
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead, typename... _UTail, typename = typename
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_UTail>(__tail)...),
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(std::forward<_UHead>(__head)) { }
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl(const _Tuple_impl&) = default;
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // 2729. Missing SFINAE on std::pair::operator=
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Tuple_impl& operator=(const _Tuple_impl&) = delete;
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Tuple_impl(_Tuple_impl&& __in)
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__and_<is_nothrow_move_constructible<_Head>,
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	              is_nothrow_move_constructible<_Inherited>>::value)
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(std::move(_M_tail(__in))),
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Base(std::forward<_Head>(_M_head(__in))) { }
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead, typename... _UTails>
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::move
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(std::forward<_UHead>
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
ARM GAS  /tmp/ccEv8ptb.s 			page 175


 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a),
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           _Base(__tag, __use_alloc<_Head>(__a)) { }
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		    const _Head& __head, const _Tail&... __tail)
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __tail...),
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead, typename... _UTail,
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename = typename enable_if<sizeof...(_Tail)
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					     == sizeof...(_UTail)>::type>
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _UHead&& __head, _UTail&&... __tail)
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	        std::forward<_UHead>(__head)) { }
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            const _Tuple_impl& __in)
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, _M_tail(__in)),
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _Tuple_impl&& __in)
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::move(_M_tail(__in))),
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	        std::forward<_Head>(_M_head(__in))) { }
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename... _UElements>
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            const _Tuple_impl<_Idx, _UElements...>& __in)
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead, typename... _UTails>
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::move
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 std::forward<_UHead>
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         void
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_tail(*this)._M_assign(
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 176


 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead, typename... _UTails>
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         void
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_head(*this) = std::forward<_UHead>
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_tail(*this)._M_assign(
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     protected:
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_swap(_Tuple_impl& __in)
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	using std::swap;
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	swap(_M_head(*this), _M_head(__in));
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Inherited::_M_swap(_M_tail(__in));
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Basis case of inheritance recursion.
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head>
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Tuple_impl<_Idx, _Head>
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : private _Head_base<_Idx, _Head>
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<std::size_t, typename...> friend class _Tuple_impl;
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Head_base<_Idx, _Head> _Base;
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Head&
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Head&
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl()
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Base() { }
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       explicit
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl(const _Head& __head)
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Base(__head) { }
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(_UHead&& __head)
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(std::forward<_UHead>(__head)) { }
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl(const _Tuple_impl&) = default;
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // 2729. Missing SFINAE on std::pair::operator=
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Tuple_impl& operator=(const _Tuple_impl&) = delete;
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Tuple_impl(_Tuple_impl&& __in)
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(is_nothrow_move_constructible<_Head>::value)
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Base(std::forward<_Head>(_M_head(__in))) { }
ARM GAS  /tmp/ccEv8ptb.s 			page 177


 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__tag, __use_alloc<_Head>(__a)) { }
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		    const _Head& __head)
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _UHead&& __head)
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	        std::forward<_UHead>(__head)) { }
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            const _Tuple_impl& __in)
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _Tuple_impl&& __in)
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	        std::forward<_Head>(_M_head(__in))) { }
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            const _Tuple_impl<_Idx, _UHead>& __in)
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _Tuple_impl<_Idx, _UHead>&& __in)
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         void
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
ARM GAS  /tmp/ccEv8ptb.s 			page 178


 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         void
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_head(*this)
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     protected:
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_swap(_Tuple_impl& __in)
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	using std::swap;
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	swap(_M_head(*this), _M_head(__in));
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Concept utility functions, reused in conditionally-explicit
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // constructors.
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<bool, typename... _Elements>
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   struct _TC
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   {
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ConstructibleTuple()
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __and_<is_constructible<_Elements, const _UElements&>...>::value;
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ImplicitlyConvertibleTuple()
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __and_<is_convertible<const _UElements&, _Elements>...>::value;
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _MoveConstructibleTuple()
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __and_<is_constructible<_Elements, _UElements&&>...>::value;
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ImplicitlyMoveConvertibleTuple()
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __and_<is_convertible<_UElements&&, _Elements>...>::value;
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename _SrcTuple>
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _NonNestedTuple()
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return  __and_<__not_<is_same<tuple<_Elements...>,
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				    __remove_cvref_t<_SrcTuple>>>,
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                      __not_<is_convertible<_SrcTuple, _Elements...>>,
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                      __not_<is_constructible<_Elements..., _SrcTuple>>
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****               >::value;
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _NotSameTuple()
ARM GAS  /tmp/ccEv8ptb.s 			page 179


 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return  __not_<is_same<tuple<_Elements...>,
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			     __remove_cvref_t<_UElements>...>>::value;
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   };
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   struct _TC<false, _Elements...>
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   {
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ConstructibleTuple()
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return false;
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ImplicitlyConvertibleTuple()
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return false;
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _MoveConstructibleTuple()
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return false;
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ImplicitlyMoveConvertibleTuple()
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return false;
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _NonNestedTuple()
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return true;
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _NotSameTuple()
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return true;
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   };
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Primary class template, tuple
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     class tuple : public _Tuple_impl<0, _Elements...>
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Tuple_impl<0, _Elements...> _Inherited;
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Used for constraining the default constructor so
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // that it becomes dependent on the constraints.
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy>
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       struct _TC2
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 180


 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         static constexpr bool _DefaultConstructibleTuple()
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           return __and_<is_default_constructible<_Elements>...>::value;
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         }
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         static constexpr bool _ImplicitlyDefaultConstructibleTuple()
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           return __and_<__is_implicitly_default_constructible<_Elements>...>
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****             ::value;
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         }
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       };
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<sizeof...(_UElements) == sizeof...(_Elements), bool>
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__assignable()
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ return __and_<is_assignable<_Elements&, _UElements>...>::value; }
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr bool __nothrow_assignable()
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	    __and_<is_nothrow_assignable<_Elements&, _UElements>...>::value;
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     public:
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void,
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<_TC2<_Dummy>::
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                     _ImplicitlyDefaultConstructibleTuple(),
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                   bool>::type = true>
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple()
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited() { }
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void,
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<_TC2<_Dummy>::
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                     _DefaultConstructibleTuple()
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                   &&
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                   !_TC2<_Dummy>::
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                     _ImplicitlyDefaultConstructibleTuple(),
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                   bool>::type = false>
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       explicit constexpr tuple()
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited() { }
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking _Elements...
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy> using _TCC =
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _TC<is_same<_Dummy, void>::value,
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****             _Elements...>;
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void,
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_Elements...>()
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && _TCC<_Dummy>::template
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>()
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && (sizeof...(_Elements) >= 1),
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=true>
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const _Elements&... __elements)
ARM GAS  /tmp/ccEv8ptb.s 			page 181


 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(__elements...) { }
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void,
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_Elements...>()
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && !_TCC<_Dummy>::template
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>()
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && (sizeof...(_Elements) >= 1),
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=false>
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       explicit constexpr tuple(const _Elements&... __elements)
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(__elements...) { }
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking _UElements...
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements> using _TMC =
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   _TC<(sizeof...(_Elements) == sizeof...(_UElements))
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		      && (_TC<(sizeof...(_UElements)==1), _Elements...>::
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			  template _NotSameTuple<_UElements...>()),
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                       _Elements...>;
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking tuple<_UElements...>
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements> using _TMCT =
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   _TC<(sizeof...(_Elements) == sizeof...(_UElements))
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		      && !is_same<tuple<_Elements...>,
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				  tuple<_UElements...>>::value,
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                       _Elements...>;
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       enable_if<
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		  _TMC<_UElements...>::template
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC<_UElements...>::template
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && (sizeof...(_Elements) >= 1),
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(_UElements&&... __elements)
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(std::forward<_UElements>(__elements)...) { }
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		  _TMC<_UElements...>::template
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC<_UElements...>::template
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && (sizeof...(_Elements) >= 1),
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(_UElements&&... __elements)
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_UElements>(__elements)...) {	}
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple(const tuple&) = default;
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple(tuple&&) = default;
 1870              		.loc 14 642 17 view .LVU439
 1871              	.LBB2733:
 1872              	.LBI2733:
ARM GAS  /tmp/ccEv8ptb.s 			page 182


 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(is_nothrow_move_constructible<_Head>::value)
 1873              		.loc 14 358 7 view .LVU440
 1874              	.LBB2734:
 1875              	.LBI2734:
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1876              		.loc 14 334 7 view .LVU441
 1877              	.LBB2735:
 1878              	.LBI2735:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1879              		.loc 14 160 7 view .LVU442
 1880              	.LBB2736:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1881              		.loc 14 160 54 is_stmt 0 view .LVU443
 1882 0012 3B68     		ldr	r3, [r7]
 1883              	.LVL184:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1884              		.loc 14 160 54 view .LVU444
 1885              	.LBE2736:
 1886              	.LBE2735:
 1887              	.LBE2734:
 1888              	.LBB2737:
 1889              	.LBI2737:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1890              		.loc 6 74 5 is_stmt 1 view .LVU445
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1891              		.loc 6 74 5 is_stmt 0 view .LVU446
 1892              	.LBE2737:
 1893              	.LBB2738:
 1894              	.LBI2738:
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl(__h) { }
 1895              		.loc 14 125 17 is_stmt 1 view .LVU447
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl(__h) { }
 1896              		.loc 14 125 17 is_stmt 0 view .LVU448
 1897              	.LBE2738:
 1898              	.LBE2733:
 1899              	.LBE2732:
 1900              	.LBE2731:
 1901              	.LBE2730:
 1902              	.LBE2763:
 1903              	.LBE2765:
 1904              	.LBE2767:
 1905              		.loc 13 174 3 is_stmt 1 view .LVU449
 1906              	.LBB2768:
 1907              	.LBB2766:
 1908              	.LBB2764:
 1909              	.LBB2762:
 1910              	.LBB2761:
 1911              	.LBB2739:
 1912              	.LBI2739:
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking tuples
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // must avoid creating temporaries.
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy> using _TNTC =
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1,
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****             _Elements...>;
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
ARM GAS  /tmp/ccEv8ptb.s 			page 183


 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_UElements...>()
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMCT<_UElements...>::template
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const tuple<_UElements...>& __in)
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         { }
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_UElements...>()
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMCT<_UElements...>::template
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(const tuple<_UElements...>& __in)
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         { }
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMCT<_UElements...>::template
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(tuple<_UElements...>&& __in)
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMCT<_UElements...>::template
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(tuple<_UElements...>&& __in)
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Allocator-extended constructors.
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a)
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a) { }
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_Elements...>()
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && _TCC<_Dummy>::template
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>(),
ARM GAS  /tmp/ccEv8ptb.s 			page 184


 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=true>
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const _Elements&... __elements)
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __elements...) { }
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_Elements...>()
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && !_TCC<_Dummy>::template
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>(),
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=false>
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                        const _Elements&... __elements)
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __elements...) { }
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename... _UElements, typename
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC<_UElements...>::template
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC<_UElements...>::template
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      _UElements&&... __elements)
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****        	{ }
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename... _UElements, typename
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC<_UElements...>::template
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC<_UElements...>::template
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      _UElements&&... __elements)
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         { }
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       typename... _UElements, typename
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_UElements...>()
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMCT<_UElements...>::template
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_UElements...>& __in)
ARM GAS  /tmp/ccEv8ptb.s 			page 185


 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       typename... _UElements, typename
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_UElements...>()
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMCT<_UElements...>::template
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_UElements...>& __in)
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       typename... _UElements, typename
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMCT<_UElements...>::template
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      tuple<_UElements...>&& __in)
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       typename... _UElements, typename
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMCT<_UElements...>::template
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      tuple<_UElements...>&& __in)
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // tuple assignment
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple&
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(typename conditional<__assignable<const _Elements&...>(),
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     const tuple&,
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     const __nonesuch_no_braces&>::type __in)
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__nothrow_assignable<const _Elements&...>())
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 186


 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	this->_M_assign(__in);
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return *this;
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple&
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(typename conditional<__assignable<_Elements...>(),
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     tuple&&,
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     __nonesuch_no_braces&&>::type __in)
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__nothrow_assignable<_Elements...>())
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	this->_M_assign(std::move(__in));
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return *this;
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<const _UElements&...>(), tuple&>
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(const tuple<_UElements...>& __in)
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<const _UElements&...>())
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_assign(__in);
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<_UElements...>(), tuple&>
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(tuple<_UElements...>&& __in)
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<_UElements...>())
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_assign(std::move(__in));
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // tuple swap
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       swap(tuple& __in)
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       { _Inherited::_M_swap(__in); }
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cpp_deduction_guides >= 201606
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _UTypes>
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(_UTypes...) -> tuple<_UTypes...>;
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _T1, typename _T2>
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(pair<_T1, _T2>) -> tuple<_T1, _T2>;
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Alloc, typename... _UTypes>
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(allocator_arg_t, _Alloc, _UTypes...) -> tuple<_UTypes...>;
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Alloc, typename _T1, typename _T2>
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(allocator_arg_t, _Alloc, pair<_T1, _T2>) -> tuple<_T1, _T2>;
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Alloc, typename... _UTypes>
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(allocator_arg_t, _Alloc, tuple<_UTypes...>) -> tuple<_UTypes...>;
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Explicit specialization, zero-element tuple.
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<>
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     class tuple<>
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     public:
ARM GAS  /tmp/ccEv8ptb.s 			page 187


 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void swap(tuple&) noexcept { /* no-op */ }
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // We need the default since we're going to define no-op
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // allocator constructors.
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple() = default;
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // No-op allocator constructors.
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t, const _Alloc&) { }
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t, const _Alloc&, const tuple&) { }
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Partial specialization, 2-element tuple.
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Includes construction and assignment from a pair.
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _T1, typename _T2>
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Tuple_impl<0, _T1, _T2> _Inherited;
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr bool __assignable()
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return __and_<is_assignable<_T1&, _U1>,
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			is_assignable<_T2&, _U2>>::value;
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr bool __nothrow_assignable()
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return __and_<is_nothrow_assignable<_T1&, _U1>,
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			is_nothrow_assignable<_T2&, _U2>>::value;
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     public:
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template <typename _U1 = _T1,
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 typename _U2 = _T2,
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 typename enable_if<__and_<
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                      __is_implicitly_default_constructible<_U1>,
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                      __is_implicitly_default_constructible<_U2>>
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                    ::value, bool>::type = true>
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	constexpr tuple()
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited() { }
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template <typename _U1 = _T1,
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 typename _U2 = _T2,
 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 typename enable_if<
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   __and_<
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     is_default_constructible<_U1>,
 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     is_default_constructible<_U2>,
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     __not_<
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                       __and_<__is_implicitly_default_constructible<_U1>,
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                              __is_implicitly_default_constructible<_U2>>>>
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   ::value, bool>::type = false>
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit constexpr tuple()
 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited() { }
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking _T1, _T2
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
ARM GAS  /tmp/ccEv8ptb.s 			page 188


 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy> using _TCC =
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _TC<is_same<_Dummy, void>::value, _T1, _T2>;
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void, typename
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                enable_if<_TCC<_Dummy>::template
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                            _ConstructibleTuple<_T1, _T2>()
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                          && _TCC<_Dummy>::template
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                            _ImplicitlyConvertibleTuple<_T1, _T2>(),
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const _T1& __a1, const _T2& __a2)
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(__a1, __a2) { }
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void, typename
 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                enable_if<_TCC<_Dummy>::template
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                            _ConstructibleTuple<_T1, _T2>()
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                          && !_TCC<_Dummy>::template
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                            _ImplicitlyConvertibleTuple<_T1, _T2>(),
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(const _T1& __a1, const _T2& __a2)
 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(__a1, __a2) { }
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking _U1, _U2
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       using _TMC = _TC<true, _T1, _T2>;
 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	          && !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(_U1&& __a1, _U2&& __a2)
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	          && !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple(const tuple&) = default;
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple(tuple&&) = default;
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const tuple<_U1, _U2>& __in)
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }
ARM GAS  /tmp/ccEv8ptb.s 			page 189


 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(const tuple<_U1, _U2>& __in)
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(tuple<_U1, _U2>&& __in)
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(tuple<_U1, _U2>&& __in)
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const pair<_U1, _U2>& __in)
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__in.first, __in.second) { }
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(const pair<_U1, _U2>& __in)
1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__in.first, __in.second) { }
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(pair<_U1, _U2>&& __in)
1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_U1>(__in.first),
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     std::forward<_U2>(__in.second)) { }
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
ARM GAS  /tmp/ccEv8ptb.s 			page 190


1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(pair<_U1, _U2>&& __in)
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_U1>(__in.first),
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     std::forward<_U2>(__in.second)) { }
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Allocator-extended constructors.
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a)
1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a) { }
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_T1, _T2>()
1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && _TCC<_Dummy>::template
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_T1, _T2>(),
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=true>
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const _T1& __a1, const _T2& __a2)
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __a1, __a2) { }
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_T1, _T2>()
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && !_TCC<_Dummy>::template
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_T1, _T2>(),
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=false>
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const _T1& __a1, const _T2& __a2)
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __a1, __a2) { }
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__a1),
1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             std::forward<_U2>(__a2)) { }
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                        _U1&& __a1, _U2&& __a2)
ARM GAS  /tmp/ccEv8ptb.s 			page 191


1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__a1),
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             std::forward<_U2>(__a2)) { }
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_U1, _U2>& __in)
1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_U1, _U2>& __in)
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                        tuple<_U1, _U2>&& __in)
1160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
1161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
1162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
ARM GAS  /tmp/ccEv8ptb.s 			page 192


1164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         tuple(allocator_arg_t __tag, const _Alloc& __a,
1170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const pair<_U1, _U2>& __in)
1171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __in.first, __in.second) { }
1172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const pair<_U1, _U2>& __in)
1181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __in.first, __in.second) { }
1182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
1190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__in.first),
1191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     std::forward<_U2>(__in.second)) { }
1192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                        pair<_U1, _U2>&& __in)
1201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__in.first),
1202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     std::forward<_U2>(__in.second)) { }
1203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple&
1205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(typename conditional<__assignable<const _T1&, const _T2&>(),
1206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     const tuple&,
1207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     const __nonesuch_no_braces&>::type __in)
1208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__nothrow_assignable<const _T1&, const _T2&>())
1209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
1210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	this->_M_assign(__in);
1211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return *this;
1212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
1213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple&
1215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(typename conditional<__assignable<_T1, _T2>(),
1216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     tuple&&,
1217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     __nonesuch_no_braces&&>::type __in)
1218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__nothrow_assignable<_T1, _T2>())
1219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
1220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	this->_M_assign(std::move(__in));
ARM GAS  /tmp/ccEv8ptb.s 			page 193


1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return *this;
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
1223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
1225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
1226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(const tuple<_U1, _U2>& __in)
1227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<const _U1&, const _U2&>())
1228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
1229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_assign(__in);
1230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
1231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
1234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<_U1, _U2>(), tuple&>
1235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(tuple<_U1, _U2>&& __in)
1236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<_U1, _U2>())
1237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
1238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_assign(std::move(__in));
1239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
1240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
1243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
1244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(const pair<_U1, _U2>& __in)
1245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<const _U1&, const _U2&>())
1246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
1247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_head(*this) = __in.first;
1248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_tail(*this)._M_head(*this) = __in.second;
1249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
1250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
1253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<_U1, _U2>(), tuple&>
1254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(pair<_U1, _U2>&& __in)
1255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<_U1, _U2>())
1256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
1257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_head(*this) = std::forward<_U1>(__in.first);
1258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
1259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
1260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void
1263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       swap(tuple& __in)
1264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__and_<__is_nothrow_swappable<_T1>,
1265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		      __is_nothrow_swappable<_T2>>::value)
1266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       { _Inherited::_M_swap(__in); }
1267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// class tuple_size
1271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct tuple_size<tuple<_Elements...>>
1273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : public integral_constant<std::size_t, sizeof...(_Elements)> { };
1274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus > 201402L
1276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp>
1277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;
ARM GAS  /tmp/ccEv8ptb.s 			page 194


1278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
1279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
1281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Recursive case for tuple_element: strip off the first element in
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * the tuple and retrieve the (i-1)th element of the remaining tuple.
1283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
1284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename _Head, typename... _Tail>
1285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct tuple_element<__i, tuple<_Head, _Tail...> >
1286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : tuple_element<__i - 1, tuple<_Tail...> > { };
1287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
1289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Basis case for tuple_element: The first element is the one we're seeking.
1290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
1291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Head, typename... _Tail>
1292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct tuple_element<0, tuple<_Head, _Tail...> >
1293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Head type;
1295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
1298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Error case for tuple_element: invalid index.
1299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
1300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<size_t __i>
1301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct tuple_element<__i, tuple<>>
1302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static_assert(__i < tuple_size<tuple<>>::value,
1304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  "tuple index is in range");
1305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename _Head, typename... _Tail>
1308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr _Head&
1309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename _Head, typename... _Tail>
1313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const _Head&
1314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a reference to the ith element of a tuple.
1318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename... _Elements>
1319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr __tuple_element_t<__i, tuple<_Elements...>>&
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(tuple<_Elements...>& __t) noexcept
1321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
1322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a const reference to the ith element of a const tuple.
1324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename... _Elements>
1325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
1326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(const tuple<_Elements...>& __t) noexcept
1327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
1328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return an rvalue reference to the ith element of a tuple rvalue.
1330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename... _Elements>
1331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
1332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(tuple<_Elements...>&& __t) noexcept
1333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
ARM GAS  /tmp/ccEv8ptb.s 			page 195


1335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return std::forward<__element_type&&>(std::get<__i>(__t));
1336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a const rvalue reference to the ith element of a const tuple rvalue.
1339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename... _Elements>
1340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
1341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(const tuple<_Elements...>&& __t) noexcept
1342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
1344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return std::forward<const __element_type&&>(std::get<__i>(__t));
1345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus >= 201402L
1348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #define __cpp_lib_tuples_by_type 201304
1350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Head, size_t __i, typename... _Tail>
1352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr _Head&
1353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Head, size_t __i, typename... _Tail>
1357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const _Head&
1358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a reference to the unique element of type _Tp of a tuple.
1362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp, typename... _Types>
1363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr _Tp&
1364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(tuple<_Types...>& __t) noexcept
1365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper2<_Tp>(__t); }
1366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a reference to the unique element of type _Tp of a tuple rvalue.
1368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp, typename... _Types>
1369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr _Tp&&
1370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(tuple<_Types...>&& __t) noexcept
1371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }
1372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a const reference to the unique element of type _Tp of a tuple.
1374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp, typename... _Types>
1375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const _Tp&
1376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(const tuple<_Types...>& __t) noexcept
1377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper2<_Tp>(__t); }
1378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a const reference to the unique element of type _Tp of
1380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// a const tuple rvalue.
1381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp, typename... _Types>
1382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const _Tp&&
1383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(const tuple<_Types...>&& __t) noexcept
1384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::forward<const _Tp&&>(std::__get_helper2<_Tp>(__t)); }
1385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
1386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // This class performs the comparison operations on tuples
1388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp, typename _Up, size_t __i, size_t __size>
1389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_compare
1390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr bool
ARM GAS  /tmp/ccEv8ptb.s 			page 196


1392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       __eq(const _Tp& __t, const _Up& __u)
1393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
1394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return bool(std::get<__i>(__t) == std::get<__i>(__u))
1395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
1396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
1397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr bool
1399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       __less(const _Tp& __t, const _Up& __u)
1400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
1401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return bool(std::get<__i>(__t) < std::get<__i>(__u))
1402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
1403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
1404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
1405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp, typename _Up, size_t __size>
1408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_compare<_Tp, _Up, __size, __size>
1409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr bool
1411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       __eq(const _Tp&, const _Up&) { return true; }
1412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr bool
1414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       __less(const _Tp&, const _Up&) { return false; }
1415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator==(const tuple<_TElements...>& __t,
1420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       const tuple<_UElements...>& __u)
1421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static_assert(sizeof...(_TElements) == sizeof...(_UElements),
1423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  "tuple objects can only be compared if they have equal sizes.");
1424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       using __compare = __tuple_compare<tuple<_TElements...>,
1425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					tuple<_UElements...>,
1426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					0, sizeof...(_TElements)>;
1427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __compare::__eq(__t, __u);
1428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator<(const tuple<_TElements...>& __t,
1433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_UElements...>& __u)
1434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static_assert(sizeof...(_TElements) == sizeof...(_UElements),
1436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  "tuple objects can only be compared if they have equal sizes.");
1437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       using __compare = __tuple_compare<tuple<_TElements...>,
1438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					tuple<_UElements...>,
1439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					0, sizeof...(_TElements)>;
1440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __compare::__less(__t, __u);
1441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator!=(const tuple<_TElements...>& __t,
1446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       const tuple<_UElements...>& __u)
1447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return !(__t == __u); }
1448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 197


1449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator>(const tuple<_TElements...>& __t,
1452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_UElements...>& __u)
1453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return __u < __t; }
1454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator<=(const tuple<_TElements...>& __t,
1458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       const tuple<_UElements...>& __u)
1459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return !(__u < __t); }
1460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator>=(const tuple<_TElements...>& __t,
1464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       const tuple<_UElements...>& __u)
1465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return !(__t < __u); }
1466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // NB: DR 705.
1468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
1470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     make_tuple(_Elements&&... __args)
1471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef tuple<typename __decay_and_strip<_Elements>::__type...>
1473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__result_type;
1474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __result_type(std::forward<_Elements>(__args)...);
1475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // 2275. Why is forward_as_tuple not constexpr?
1479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// std::forward_as_tuple
1480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr tuple<_Elements&&...>
1482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     forward_as_tuple(_Elements&&... __args) noexcept
1483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
1484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<size_t, typename, typename, size_t>
1486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_tuple_impl;
1487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
1489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
1490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : __make_tuple_impl<_Idx + 1,
1491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
1492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			_Tuple, _Nm>
1493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { };
1494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Nm, typename _Tuple, typename... _Tp>
1496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
1497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef tuple<_Tp...> __type;
1499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tuple>
1502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __do_make_tuple
1503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
1504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { };
1505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 198


1506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Returns the std::tuple equivalent of a tuple-like type.
1507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tuple>
1508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_tuple
1509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : public __do_make_tuple<__remove_cvref_t<_Tuple>>
1510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { };
1511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Combines several std::tuple's into a single one.
1513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename...>
1514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __combine_tuples;
1515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<>
1517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __combine_tuples<>
1518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef tuple<> __type;
1520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Ts>
1523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __combine_tuples<tuple<_Ts...>>
1524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef tuple<_Ts...> __type;
1526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _T1s, typename... _T2s, typename... _Rem>
1529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
1530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
1532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					_Rem...>::__type __type;
1533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Computes the result type of tuple_cat given a set of tuple-like types.
1536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Tpls>
1537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_cat_result
1538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename __combine_tuples
1540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         <typename __make_tuple<_Tpls>::__type...>::__type __type;
1541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Helper to determine the index set for the first tuple-like
1544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // type of a given set.
1545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename...>
1546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_1st_indices;
1547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<>
1549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_1st_indices<>
1550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef std::_Index_tuple<> __type;
1552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp, typename... _Tpls>
1555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_1st_indices<_Tp, _Tpls...>
1556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename std::_Build_index_tuple<std::tuple_size<
1558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	typename std::remove_reference<_Tp>::type>::value>::__type __type;
1559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Performs the actual concatenation by step-wise expanding tuple-like
1562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // objects into the elements,  which are finally forwarded into the
ARM GAS  /tmp/ccEv8ptb.s 			page 199


1563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // result tuple.
1564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Ret, typename _Indices, typename... _Tpls>
1565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_concater;
1566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
1568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
1569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _Us>
1571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         static constexpr _Ret
1572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
1573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
1574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  typedef typename __make_1st_indices<_Tpls...>::__type __idx;
1575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  typedef __tuple_concater<_Ret, __idx, _Tpls...>      __next;
1576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return __next::_S_do(std::forward<_Tpls>(__tps)...,
1577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			       std::forward<_Us>(__us)...,
1578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			       std::get<_Is>(std::forward<_Tp>(__tp))...);
1579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Ret>
1583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_concater<_Ret, std::_Index_tuple<>>
1584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _Us>
1586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr _Ret
1587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_S_do(_Us&&... __us)
1588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
1589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return _Ret(std::forward<_Us>(__us)...);
1590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// tuple_cat
1594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Tpls, typename = typename
1595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****            enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
1596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr auto
1597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple_cat(_Tpls&&... __tpls)
1598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     -> typename __tuple_cat_result<_Tpls...>::__type
1599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
1601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename __make_1st_indices<_Tpls...>::__type __idx;
1602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
1603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
1604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // 2301. Why is tie not constexpr?
1608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// tie
1609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr tuple<_Elements&...>
1611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tie(_Elements&... __args) noexcept
1612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return tuple<_Elements&...>(__args...); }
1613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// swap
1615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     inline
1617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
1618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     // Constrained free swap overload, see p0185r1
1619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     typename enable_if<__and_<__is_swappable<_Elements>...>::value
ARM GAS  /tmp/ccEv8ptb.s 			page 200


1620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       >::type
1621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #else
1622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     void
1623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
1624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
1625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     noexcept(noexcept(__x.swap(__y)))
1626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { __x.swap(__y); }
1627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
1629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type
1631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;
1632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
1633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // A class (and instance) which can be used in 'tie' when an element
1635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // of a tuple is not required.
1636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // _GLIBCXX14_CONSTEXPR
1637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // 2933. PR for LWG 2773 could be clearer
1638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   struct _Swallow_assign
1639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   {
1640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<class _Tp>
1641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _GLIBCXX14_CONSTEXPR const _Swallow_assign&
1642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(const _Tp&) const
1643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       { return *this; }
1644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   };
1645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // 2773. Making std::ignore constexpr
1648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   _GLIBCXX17_INLINE constexpr _Swallow_assign ignore{};
1649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Partial specialization for tuples
1651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Types, typename _Alloc>
1652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };
1653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // See stl_pair.h...
1655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<class _T1, class _T2>
1656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _Args1, typename... _Args2>
1657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       inline
1658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair<_T1, _T2>::
 1913              		.loc 14 1658 7 view .LVU450
 1914              	.LBB2740:
 1915              	.LBI2740:
1659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair(piecewise_construct_t,
1660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	   tuple<_Args1...> __first, tuple<_Args2...> __second)
1661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : pair(__first, __second,
1662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
1663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
1664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       { }
1665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<class _T1, class _T2>
1667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _Args1, std::size_t... _Indexes1,
1668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****              typename... _Args2, std::size_t... _Indexes2>
1669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       inline
1670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair<_T1, _T2>::
 1916              		.loc 14 1670 7 view .LVU451
 1917              	.LBB2741:
 1918              	.LBB2742:
ARM GAS  /tmp/ccEv8ptb.s 			page 201


 1919              	.LBI2742:
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
 1920              		.loc 14 1320 5 view .LVU452
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
 1921              		.loc 14 1320 5 is_stmt 0 view .LVU453
 1922              	.LBE2742:
 1923              	.LBB2743:
 1924              	.LBI2743:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1925              		.loc 6 74 5 is_stmt 1 view .LVU454
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 1926              		.loc 6 74 5 is_stmt 0 view .LVU455
 1927              	.LBE2743:
1671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
1672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
1673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
1674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 1928              		.loc 14 1674 70 view .LVU456
 1929 0014 1B68     		ldr	r3, [r3]
 1930 0016 0361     		str	r3, [r0, #16]
 1931              	.LVL185:
 1932              	.LBB2744:
 1933              	.LBI2744:
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 1934              		.loc 3 431 7 is_stmt 1 view .LVU457
 1935              	.LBB2745:
 1936              	.LBI2745:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 1937              		.loc 3 190 7 view .LVU458
 1938              	.LBB2746:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 1939              		.loc 3 193 51 is_stmt 0 view .LVU459
 1940 0018 0700     		movs	r7, r0
 1941              	.LVL186:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 1942              		.loc 3 193 51 view .LVU460
 1943 001a 1C37     		adds	r7, r7, #28
 1944              	.LVL187:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 1945              		.loc 3 193 51 view .LVU461
 1946              	.LBE2746:
 1947              	.LBE2745:
 1948              	.LBB2747:
 1949              	.LBI2747:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 1950              		.loc 4 138 7 is_stmt 1 view .LVU462
 1951              	.LBB2748:
 1952              	.LBI2748:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 1953              		.loc 5 80 7 view .LVU463
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 1954              		.loc 5 80 7 is_stmt 0 view .LVU464
 1955              	.LBE2748:
 1956              	.LBE2747:
 1957              	.LBB2749:
 1958              	.LBI2749:
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
ARM GAS  /tmp/ccEv8ptb.s 			page 202


 1959              		.loc 3 159 2 is_stmt 1 view .LVU465
 1960              	.LBB2750:
 1961              	.LBB2751:
 1962              	.LBI2751:
 1963              		.loc 6 99 5 view .LVU466
 1964              		.loc 6 99 5 is_stmt 0 view .LVU467
 1965              	.LBE2751:
 1966              	.LBB2752:
 1967              	.LBI2752:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1968              		.loc 4 141 7 is_stmt 1 view .LVU468
 1969              	.LBB2753:
 1970              	.LBI2753:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 1971              		.loc 5 83 7 view .LVU469
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 1972              		.loc 5 83 7 is_stmt 0 view .LVU470
 1973              	.LBE2753:
 1974              	.LBE2752:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 1975              		.loc 3 160 46 view .LVU471
 1976 001c 4761     		str	r7, [r0, #20]
 1977              	.LVL188:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 1978              		.loc 3 160 46 view .LVU472
 1979              	.LBE2750:
 1980              	.LBE2749:
 1981              	.LBB2754:
 1982              	.LBI2754:
 1983              		.loc 4 153 7 is_stmt 1 view .LVU473
 1984              	.LBB2755:
 1985              	.LBI2755:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 1986              		.loc 5 89 7 view .LVU474
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 1987              		.loc 5 89 7 is_stmt 0 view .LVU475
 1988              	.LBE2755:
 1989              	.LBE2754:
 1990              	.LBB2756:
 1991              	.LBI2756:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 1992              		.loc 3 214 7 is_stmt 1 view .LVU476
 1993              	.LBB2757:
 1994              	.LBI2757:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 1995              		.loc 3 182 7 view .LVU477
 1996              	.LBB2758:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 1997              		.loc 3 183 9 is_stmt 0 view .LVU478
 1998 001e 0023     		movs	r3, #0
 1999 0020 8361     		str	r3, [r0, #24]
 2000              	.LVL189:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2001              		.loc 3 183 9 view .LVU479
 2002              	.LBE2758:
 2003              	.LBE2757:
 2004              	.LBB2759:
ARM GAS  /tmp/ccEv8ptb.s 			page 203


 2005              	.LBI2759:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 2006              		.loc 2 299 7 is_stmt 1 view .LVU480
 2007              	.LBB2760:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2008              		.loc 2 300 9 view .LVU481
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2009              		.loc 2 300 14 is_stmt 0 view .LVU482
 2010 0022 0377     		strb	r3, [r0, #28]
 2011              	.LVL190:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2012              		.loc 2 300 14 view .LVU483
 2013              	.LBE2760:
 2014              	.LBE2759:
 2015              	.LBE2756:
 2016              	.LBE2744:
 2017              	.LBE2741:
 2018              	.LBE2740:
 2019              	.LBE2739:
 2020              	.LBE2761:
 2021              	.LBE2762:
 2022              	.LBE2764:
 2023              	.LBE2766:
 2024              	.LBE2768:
 2025              	.LBB2769:
 2026              	.LBB2770:
 2027              	.LBI2770:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 2028              		.loc 7 767 7 is_stmt 1 view .LVU484
 2029              	.LBB2771:
 2030              	.LBI2771:
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater_equal : public binary_function<_Tp, _Tp, bool>
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x >= __y; }
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less_equal : public binary_function<_Tp, _Tp, bool>
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x <= __y; }
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization of std::greater for pointers.
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
ARM GAS  /tmp/ccEv8ptb.s 			page 204


 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR bool
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       {
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_is_constant_evaluated())
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #else
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_constant_p(__x > __y))
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return __x > __y;
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	return (__UINTPTR_TYPE__)__x > (__UINTPTR_TYPE__)__y;
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       }
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization of std::less for pointers.
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR bool
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       {
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_is_constant_evaluated())
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #else
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_constant_p(__x < __y))
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return __x < __y;
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       }
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization of std::greater_equal for pointers.
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR bool
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       {
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_is_constant_evaluated())
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #else
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_constant_p(__x >= __y))
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return __x >= __y;
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	return (__UINTPTR_TYPE__)__x >= (__UINTPTR_TYPE__)__y;
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       }
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization of std::less_equal for pointers.
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
ARM GAS  /tmp/ccEv8ptb.s 			page 205


 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR bool
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       {
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_is_constant_evaluated())
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #else
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_constant_p(__x <= __y))
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return __x <= __y;
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	return (__UINTPTR_TYPE__)__x <= (__UINTPTR_TYPE__)__y;
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       }
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct equal_to<void>
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct not_equal_to<void>
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater<void>
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			__ptr_cmp<_Tp, _Up>{});
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
ARM GAS  /tmp/ccEv8ptb.s 			page 206


 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr bool
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp* __t, _Up* __u) const noexcept
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     private:
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr decltype(auto)
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, false_type)
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr bool
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return greater<const volatile void*>{}(
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Tp>(__t)),
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no viable operator> member function.
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2 : true_type { };
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call T.operator>(U)
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2<_Tp, _Up, __void_t<
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no overloaded operator> for these operands.
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call operator>(T,U)
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded<_Tp, _Up, __void_t<
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Tp, const volatile void*>,
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Up, const volatile void*>>;
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less<void>
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
ARM GAS  /tmp/ccEv8ptb.s 			page 207


 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			__ptr_cmp<_Tp, _Up>{});
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr bool
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp* __t, _Up* __u) const noexcept
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     private:
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr decltype(auto)
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, false_type)
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr bool
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return less<const volatile void*>{}(
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Tp>(__t)),
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no viable operator< member function.
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2 : true_type { };
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call T.operator<(U)
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2<_Tp, _Up, __void_t<
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no overloaded operator< for these operands.
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call operator<(T,U)
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded<_Tp, _Up, __void_t<
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Tp, const volatile void*>,
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Up, const volatile void*>>;
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater_equal<void>
ARM GAS  /tmp/ccEv8ptb.s 			page 208


 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			__ptr_cmp<_Tp, _Up>{});
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr bool
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp* __t, _Up* __u) const noexcept
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     private:
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr decltype(auto)
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, false_type)
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr bool
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return greater_equal<const volatile void*>{}(
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Tp>(__t)),
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no viable operator>= member function.
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2 : true_type { };
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call T.operator>=(U)
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2<_Tp, _Up, __void_t<
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no overloaded operator>= for these operands.
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call operator>=(T,U)
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded<_Tp, _Up, __void_t<
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Tp, const volatile void*>,
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Up, const volatile void*>>;
ARM GAS  /tmp/ccEv8ptb.s 			page 209


 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less_equal<void>
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			__ptr_cmp<_Tp, _Up>{});
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr bool
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp* __t, _Up* __u) const noexcept
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     private:
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr decltype(auto)
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, false_type)
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr bool
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return less_equal<const volatile void*>{}(
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Tp>(__t)),
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no viable operator<= member function.
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2 : true_type { };
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call T.operator<=(U)
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2<_Tp, _Up, __void_t<
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no overloaded operator<= for these operands.
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call operator<=(T,U)
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded<_Tp, _Up, __void_t<
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
ARM GAS  /tmp/ccEv8ptb.s 			page 210


 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Tp, const volatile void*>,
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Up, const volatile void*>>;
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif // C++14
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.4 logical operations
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup logical_functors Boolean Operations Classes
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Here are wrapper functors for Boolean operations: @c &&, @c ||,
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  and @c !.
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_and;
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_or;
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_not;
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_and : public binary_function<_Tp, _Tp, bool>
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x && __y; }
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_or : public binary_function<_Tp, _Tp, bool>
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x || __y; }
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_not : public unary_function<_Tp, bool>
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x) const
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return !__x; }
ARM GAS  /tmp/ccEv8ptb.s 			page 211


 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_and<void>
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_or<void>
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_not<void>
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp>
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(!std::forward<_Tp>(__t)))
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(!std::forward<_Tp>(__t))
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return !std::forward<_Tp>(__t); }
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_and;
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_or;
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 212


 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_xor;
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_not;
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // DR 660. Missing Bitwise Operations.
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_and : public binary_function<_Tp, _Tp, _Tp>
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x & __y; }
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_or : public binary_function<_Tp, _Tp, _Tp>
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x | __y; }
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x ^ __y; }
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_not : public unary_function<_Tp, _Tp>
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     _GLIBCXX14_CONSTEXPR
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x) const
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return ~__x; }
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template <>
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_and<void>
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 213


 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template <>
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_or<void>
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template <>
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_xor<void>
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template <>
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_not<void>
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp>
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(~std::forward<_Tp>(__t)))
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(~std::forward<_Tp>(__t))
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return ~std::forward<_Tp>(__t); }
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.5 negators
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup negators Negators
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The functions @c not1 and @c not2 each take a predicate functor
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  and return an instance of @c unary_negate or
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @c binary_negate, respectively.  These classes are functors whose
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @c operator() performs the stored predicate function and then returns
 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  the negation of the result.
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  For example, given a vector of integers and a trivial predicate,
ARM GAS  /tmp/ccEv8ptb.s 			page 214


 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \code
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  struct IntGreaterThanThree
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *    : public std::unary_function<int, bool>
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  {
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *      bool operator() (int x) { return x > 3; }
 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  };
 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  std::find_if (v.begin(), v.end(), not1(IntGreaterThanThree()));
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \endcode
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The call to @c find_if will locate the first index (i) of @c v for which
 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  <code>!(v[i] > 3)</code> is true.
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The not1/unary_negate combination works on predicates taking a single
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  argument.  The not2/binary_negate combination works on predicates which
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  take two arguments.
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Predicate>
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     class unary_negate
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public unary_function<typename _Predicate::argument_type, bool>
1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     protected:
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Predicate _M_pred;
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     public:
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       explicit
1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       unary_negate(const _Predicate& __x) : _M_pred(__x) { }
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const typename _Predicate::argument_type& __x) const
1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return !_M_pred(__x); }
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Predicate>
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     _GLIBCXX14_CONSTEXPR
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     inline unary_negate<_Predicate>
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     not1(const _Predicate& __pred)
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     { return unary_negate<_Predicate>(__pred); }
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Predicate>
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     class binary_negate
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public binary_function<typename _Predicate::first_argument_type,
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			     typename _Predicate::second_argument_type, bool>
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     protected:
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Predicate _M_pred;
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     public:
1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       explicit
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       binary_negate(const _Predicate& __x) : _M_pred(__x) { }
ARM GAS  /tmp/ccEv8ptb.s 			page 215


1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const typename _Predicate::first_argument_type& __x,
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 		 const typename _Predicate::second_argument_type& __y) const
1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return !_M_pred(__x, __y); }
1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Predicate>
1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     _GLIBCXX14_CONSTEXPR
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     inline binary_negate<_Predicate>
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     not2(const _Predicate& __pred)
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     { return binary_negate<_Predicate>(__pred); }
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.7 adaptors pointers functions
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup pointer_adaptors Adaptors for pointers to functions
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The advantage of function objects over pointers to functions is that
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  the objects in the standard library declare nested typedefs describing
1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  their argument and result types with uniform names (e.g., @c result_type
1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  from the base classes @c unary_function and @c binary_function).
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Sometimes those typedefs are required, not just optional.
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Adaptors are provided to turn pointers to unary (single-argument) and
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  binary (double-argument) functions into function objects.  The
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  long-winded functor @c pointer_to_unary_function is constructed with a
1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  function pointer @c f, and its @c operator() called with argument @c x
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  returns @c f(x).  The functor @c pointer_to_binary_function does the same
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  thing, but with a double-argument @c f and @c operator().
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The function @c ptr_fun takes a pointer-to-function @c f and constructs
1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  an instance of the appropriate functor.
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg, typename _Result>
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     class pointer_to_unary_function : public unary_function<_Arg, _Result>
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     protected:
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Result (*_M_ptr)(_Arg);
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     public:
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       pointer_to_unary_function() { }
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       explicit
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       pointer_to_unary_function(_Result (*__x)(_Arg))
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       : _M_ptr(__x) { }
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Result
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Arg __x) const
1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return _M_ptr(__x); }
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 216


1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg, typename _Result>
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     inline pointer_to_unary_function<_Arg, _Result>
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     ptr_fun(_Result (*__x)(_Arg))
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     { return pointer_to_unary_function<_Arg, _Result>(__x); }
1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     class pointer_to_binary_function
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public binary_function<_Arg1, _Arg2, _Result>
1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     protected:
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Result (*_M_ptr)(_Arg1, _Arg2);
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     public:
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       pointer_to_binary_function() { }
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       explicit
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       : _M_ptr(__x) { }
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Result
1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Arg1 __x, _Arg2 __y) const
1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return _M_ptr(__x, __y); }
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     ptr_fun(_Result (*__x)(_Arg1, _Arg2))
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct _Identity
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public unary_function<_Tp, _Tp>
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp&
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp& __x) const
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x; }
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       const _Tp&
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x) const
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x; }
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization, avoids confusing errors in e.g. std::set<const T>.
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Pair>
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct _Select1st
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public unary_function<_Pair, typename _Pair::first_type>
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typename _Pair::first_type&
1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Pair& __x) const
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x.first; }
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 217


1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       const typename _Pair::first_type&
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Pair& __x) const
 2031              		.loc 11 1155 7 view .LVU485
 2032              	.LBB2772:
1156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x.first; }
 2033              		.loc 11 1156 20 is_stmt 0 view .LVU486
 2034 0024 0300     		movs	r3, r0
 2035 0026 1033     		adds	r3, r3, #16
 2036              	.LVL191:
 2037              		.loc 11 1156 20 view .LVU487
 2038              	.LBE2772:
 2039              	.LBE2771:
 2040              	.LBE2770:
2453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
2454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
2455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
2458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 2041              		.loc 7 2459 11 view .LVU488
 2042 0028 3200     		movs	r2, r6
 2043 002a 2900     		movs	r1, r5
 2044 002c 6846     		mov	r0, sp
 2045              	.LVL192:
 2046              		.loc 7 2459 11 view .LVU489
 2047 002e FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 2048              	.LVL193:
2460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
 2049              		.loc 7 2461 16 view .LVU490
 2050 0032 019A     		ldr	r2, [sp, #4]
 2051              		.loc 7 2461 6 view .LVU491
 2052 0034 002A     		cmp	r2, #0
 2053 0036 06D0     		beq	.L67
2462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
 2054              		.loc 7 2462 60 view .LVU492
 2055 0038 2300     		movs	r3, r4
 2056 003a 0099     		ldr	r1, [sp]
 2057 003c 2800     		movs	r0, r5
 2058 003e FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 2059              	.LVL194:
 2060              	.L68:
 2061              	.LBE2769:
2463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return iterator(__res.first);
2466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
2468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
2471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 2062              		.loc 7 2472 7 view .LVU493
 2063 0042 03B0     		add	sp, sp, #12
 2064              		@ sp needed
ARM GAS  /tmp/ccEv8ptb.s 			page 218


 2065              	.LVL195:
 2066              	.LVL196:
 2067              	.LVL197:
 2068              	.LVL198:
 2069              		.loc 7 2472 7 view .LVU494
 2070 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 2071              	.LVL199:
 2072              	.L67:
 2073              	.LBB2797:
 2074              	.LBB2773:
 2075              	.LBI2773:
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 2076              		.loc 7 648 7 is_stmt 1 view .LVU495
 2077              	.LBB2774:
 2078              	.LBI2774:
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 2079              		.loc 7 637 7 view .LVU496
 2080              	.LBB2775:
 2081              	.LBI2775:
 2082              		.loc 8 495 2 view .LVU497
 2083              	.LBB2776:
 2084              	.LBI2776:
 2085              		.loc 5 151 2 view .LVU498
 2086              	.LBB2777:
 2087              	.LBI2777:
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 2088              		.loc 9 208 12 view .LVU499
 2089              	.LBB2778:
 2090              	.LBI2778:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 2091              		.loc 3 657 7 view .LVU500
 2092              	.LBB2779:
 2093              	.LBI2779:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 2094              		.loc 3 229 7 view .LVU501
 2095              	.LBB2780:
 2096              	.LBB2781:
 2097              	.LBI2781:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2098              		.loc 3 221 7 view .LVU502
 2099              	.LBB2782:
 2100              	.LBI2782:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2101              		.loc 3 186 7 view .LVU503
 2102              	.LBB2783:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2103              		.loc 3 187 28 is_stmt 0 view .LVU504
 2104 0046 6069     		ldr	r0, [r4, #20]
 2105              	.LVL200:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2106              		.loc 3 187 28 view .LVU505
 2107              	.LBE2783:
 2108              	.LBE2782:
 2109              	.LBE2781:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2110              		.loc 3 231 2 view .LVU506
 2111 0048 8742     		cmp	r7, r0
ARM GAS  /tmp/ccEv8ptb.s 			page 219


 2112 004a 01D0     		beq	.L69
 2113              	.LVL201:
 2114              	.LBB2784:
 2115              	.LBI2784:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2116              		.loc 3 236 7 is_stmt 1 view .LVU507
 2117              	.LBB2785:
 2118              	.LBB2786:
 2119              	.LBI2786:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2120              		.loc 8 469 7 view .LVU508
 2121              	.LBB2787:
 2122              	.LBI2787:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 2123              		.loc 5 119 7 view .LVU509
 2124              	.LBB2788:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2125              		.loc 5 128 19 is_stmt 0 view .LVU510
 2126 004c FFF7FEFF 		bl	_ZdlPv
 2127              	.LVL202:
 2128              	.L69:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2129              		.loc 5 128 19 view .LVU511
 2130              	.LBE2788:
 2131              	.LBE2787:
 2132              	.LBE2786:
 2133              	.LBE2785:
 2134              	.LBE2784:
 2135              	.LBE2780:
 2136              	.LBE2779:
 2137              	.LBB2789:
 2138              	.LBI2789:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 2139              		.loc 3 150 14 is_stmt 1 view .LVU512
 2140              	.LBB2790:
 2141              	.LBI2790:
 2142              		.loc 4 153 7 view .LVU513
 2143              	.LBB2791:
 2144              	.LBI2791:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2145              		.loc 5 89 7 view .LVU514
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2146              		.loc 5 89 7 is_stmt 0 view .LVU515
 2147              	.LBE2791:
 2148              	.LBE2790:
 2149              	.LBE2789:
 2150              	.LBE2778:
 2151              	.LBE2777:
 2152              	.LBE2776:
 2153              	.LBE2775:
 2154              	.LBE2774:
 2155              	.LBB2792:
 2156              	.LBI2792:
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 2157              		.loc 7 583 7 is_stmt 1 view .LVU516
 2158              	.LBB2793:
 2159              	.LBI2793:
ARM GAS  /tmp/ccEv8ptb.s 			page 220


 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2160              		.loc 8 469 7 view .LVU517
 2161              	.LBB2794:
 2162              	.LBI2794:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 2163              		.loc 5 119 7 view .LVU518
 2164              	.LBB2795:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2165              		.loc 5 128 19 is_stmt 0 view .LVU519
 2166 0050 2000     		movs	r0, r4
 2167 0052 FFF7FEFF 		bl	_ZdlPv
 2168              	.LVL203:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2169              		.loc 5 128 19 view .LVU520
 2170              	.LBE2795:
 2171              	.LBE2794:
 2172              	.LBE2793:
 2173              	.LBE2792:
 2174              	.LBE2773:
 2175              	.LBB2796:
 2176              	.LBI2796:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 2177              		.loc 7 273 7 is_stmt 1 view .LVU521
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 2178              		.loc 7 273 7 is_stmt 0 view .LVU522
 2179              	.LBE2796:
2465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
 2180              		.loc 7 2465 33 view .LVU523
 2181 0056 0098     		ldr	r0, [sp]
 2182 0058 F3E7     		b	.L68
 2183              	.LBE2797:
 2184              		.cfi_endproc
 2185              	.LFE2466:
 2187              		.section	.text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIc
 2188              		.align	1
 2189              		.weak	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_
 2190              		.syntax unified
 2191              		.code	16
 2192              		.thumb_func
 2193              		.fpu softvfp
 2195              	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsI
 2196              	.LVL204:
 2197              	.LFB2480:
2452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
 2198              		.loc 7 2452 7 is_stmt 1 view -0
 2199              		.cfi_startproc
 2200              		@ args = 4, pretend = 0, frame = 8
 2201              		@ frame_needed = 0, uses_anonymous_args = 0
2452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
 2202              		.loc 7 2452 7 is_stmt 0 view .LVU525
 2203 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2204              	.LCFI15:
 2205              		.cfi_def_cfa_offset 20
 2206              		.cfi_offset 4, -20
 2207              		.cfi_offset 5, -16
 2208              		.cfi_offset 6, -12
 2209              		.cfi_offset 7, -8
ARM GAS  /tmp/ccEv8ptb.s 			page 221


 2210              		.cfi_offset 14, -4
 2211 0002 83B0     		sub	sp, sp, #12
 2212              	.LCFI16:
 2213              		.cfi_def_cfa_offset 32
 2214 0004 0500     		movs	r5, r0
 2215 0006 0E00     		movs	r6, r1
 2216              	.LVL205:
2452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
 2217              		.loc 7 2452 7 view .LVU526
 2218 0008 1F00     		movs	r7, r3
 2219              	.LVL206:
 2220              	.LBB2798:
 2221              	.LBI2798:
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 2222              		.loc 7 628 2 is_stmt 1 view .LVU527
 2223              	.LBB2799:
 2224              	.LBB2800:
 2225              	.LBI2800:
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 2226              		.loc 7 579 7 view .LVU528
 2227              	.LBB2801:
 2228              	.LBI2801:
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 2229              		.loc 8 443 7 view .LVU529
 2230              	.LBB2802:
 2231              	.LBI2802:
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 2232              		.loc 5 102 7 view .LVU530
 2233              	.LBB2803:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2234              		.loc 5 114 41 is_stmt 0 view .LVU531
 2235 000a 2C20     		movs	r0, #44
 2236              	.LVL207:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2237              		.loc 5 114 41 view .LVU532
 2238 000c FFF7FEFF 		bl	_Znwj
 2239              	.LVL208:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2240              		.loc 5 114 41 view .LVU533
 2241 0010 0400     		movs	r4, r0
 2242              	.LVL209:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2243              		.loc 5 114 41 view .LVU534
 2244              	.LBE2803:
 2245              	.LBE2802:
 2246              	.LBE2801:
 2247              	.LBE2800:
 2248              	.LBB2804:
 2249              	.LBI2804:
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 2250              		.loc 7 609 2 is_stmt 1 view .LVU535
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 2251              		.loc 7 609 2 is_stmt 0 view .LVU536
 2252              	.LBE2804:
 2253              	.LBE2799:
 2254              	.LBE2798:
 2255              		.loc 13 174 3 is_stmt 1 view .LVU537
ARM GAS  /tmp/ccEv8ptb.s 			page 222


 2256              	.LBB2843:
 2257              	.LBB2841:
 2258              	.LBB2839:
 2259              	.LBB2805:
 2260              	.LBI2805:
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 2261              		.loc 8 482 2 view .LVU538
 2262              	.LBB2806:
 2263              	.LBI2806:
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	noexcept(noexcept(::new((void *)__p)
 2264              		.loc 5 144 2 view .LVU539
 2265              	.LBB2807:
 2266              	.LBI2807:
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 2267              		.loc 14 642 17 view .LVU540
 2268              	.LBB2808:
 2269              	.LBI2808:
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(is_nothrow_move_constructible<_Head>::value)
 2270              		.loc 14 358 7 view .LVU541
 2271              	.LBB2809:
 2272              	.LBI2809:
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 2273              		.loc 14 334 7 view .LVU542
 2274              	.LBB2810:
 2275              	.LBI2810:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 2276              		.loc 14 160 7 view .LVU543
 2277              	.LBB2811:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 2278              		.loc 14 160 54 is_stmt 0 view .LVU544
 2279 0012 3B68     		ldr	r3, [r7]
 2280              	.LVL210:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 2281              		.loc 14 160 54 view .LVU545
 2282              	.LBE2811:
 2283              	.LBE2810:
 2284              	.LBE2809:
 2285              	.LBB2812:
 2286              	.LBI2812:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 2287              		.loc 6 74 5 is_stmt 1 view .LVU546
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 2288              		.loc 6 74 5 is_stmt 0 view .LVU547
 2289              	.LBE2812:
 2290              	.LBB2813:
 2291              	.LBI2813:
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__h)) { }
 2292              		.loc 14 132 19 is_stmt 1 view .LVU548
 2293              	.LBB2814:
 2294              	.LBI2814:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 2295              		.loc 6 74 5 view .LVU549
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 2296              		.loc 6 74 5 is_stmt 0 view .LVU550
 2297              	.LBE2814:
 2298              	.LBE2813:
 2299              	.LBE2808:
ARM GAS  /tmp/ccEv8ptb.s 			page 223


 2300              	.LBE2807:
 2301              	.LBE2806:
 2302              	.LBE2805:
 2303              	.LBE2839:
 2304              	.LBE2841:
 2305              	.LBE2843:
 2306              		.loc 13 174 3 is_stmt 1 view .LVU551
 2307              	.LBB2844:
 2308              	.LBB2842:
 2309              	.LBB2840:
 2310              	.LBB2838:
 2311              	.LBB2837:
 2312              	.LBB2815:
 2313              	.LBI2815:
1658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair(piecewise_construct_t,
 2314              		.loc 14 1658 7 view .LVU552
 2315              	.LBB2816:
 2316              	.LBI2816:
1670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
 2317              		.loc 14 1670 7 view .LVU553
 2318              	.LBB2817:
 2319              	.LBB2818:
 2320              	.LBI2818:
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
 2321              		.loc 14 1320 5 view .LVU554
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
 2322              		.loc 14 1320 5 is_stmt 0 view .LVU555
 2323              	.LBE2818:
 2324              	.LBB2819:
 2325              	.LBI2819:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 2326              		.loc 6 74 5 is_stmt 1 view .LVU556
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 2327              		.loc 6 74 5 is_stmt 0 view .LVU557
 2328              	.LBE2819:
 2329              		.loc 14 1674 70 view .LVU558
 2330 0014 1B68     		ldr	r3, [r3]
 2331 0016 0361     		str	r3, [r0, #16]
 2332              	.LVL211:
 2333              	.LBB2820:
 2334              	.LBI2820:
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 2335              		.loc 3 431 7 is_stmt 1 view .LVU559
 2336              	.LBB2821:
 2337              	.LBI2821:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 2338              		.loc 3 190 7 view .LVU560
 2339              	.LBB2822:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 2340              		.loc 3 193 51 is_stmt 0 view .LVU561
 2341 0018 0700     		movs	r7, r0
 2342              	.LVL212:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 2343              		.loc 3 193 51 view .LVU562
 2344 001a 1C37     		adds	r7, r7, #28
 2345              	.LVL213:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
ARM GAS  /tmp/ccEv8ptb.s 			page 224


 2346              		.loc 3 193 51 view .LVU563
 2347              	.LBE2822:
 2348              	.LBE2821:
 2349              	.LBB2823:
 2350              	.LBI2823:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 2351              		.loc 4 138 7 is_stmt 1 view .LVU564
 2352              	.LBB2824:
 2353              	.LBI2824:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2354              		.loc 5 80 7 view .LVU565
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2355              		.loc 5 80 7 is_stmt 0 view .LVU566
 2356              	.LBE2824:
 2357              	.LBE2823:
 2358              	.LBB2825:
 2359              	.LBI2825:
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 2360              		.loc 3 159 2 is_stmt 1 view .LVU567
 2361              	.LBB2826:
 2362              	.LBB2827:
 2363              	.LBI2827:
 2364              		.loc 6 99 5 view .LVU568
 2365              		.loc 6 99 5 is_stmt 0 view .LVU569
 2366              	.LBE2827:
 2367              	.LBB2828:
 2368              	.LBI2828:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2369              		.loc 4 141 7 is_stmt 1 view .LVU570
 2370              	.LBB2829:
 2371              	.LBI2829:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2372              		.loc 5 83 7 view .LVU571
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2373              		.loc 5 83 7 is_stmt 0 view .LVU572
 2374              	.LBE2829:
 2375              	.LBE2828:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 2376              		.loc 3 160 46 view .LVU573
 2377 001c 4761     		str	r7, [r0, #20]
 2378              	.LVL214:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 2379              		.loc 3 160 46 view .LVU574
 2380              	.LBE2826:
 2381              	.LBE2825:
 2382              	.LBB2830:
 2383              	.LBI2830:
 2384              		.loc 4 153 7 is_stmt 1 view .LVU575
 2385              	.LBB2831:
 2386              	.LBI2831:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2387              		.loc 5 89 7 view .LVU576
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2388              		.loc 5 89 7 is_stmt 0 view .LVU577
 2389              	.LBE2831:
 2390              	.LBE2830:
 2391              	.LBB2832:
ARM GAS  /tmp/ccEv8ptb.s 			page 225


 2392              	.LBI2832:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 2393              		.loc 3 214 7 is_stmt 1 view .LVU578
 2394              	.LBB2833:
 2395              	.LBI2833:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 2396              		.loc 3 182 7 view .LVU579
 2397              	.LBB2834:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2398              		.loc 3 183 9 is_stmt 0 view .LVU580
 2399 001e 0023     		movs	r3, #0
 2400 0020 8361     		str	r3, [r0, #24]
 2401              	.LVL215:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2402              		.loc 3 183 9 view .LVU581
 2403              	.LBE2834:
 2404              	.LBE2833:
 2405              	.LBB2835:
 2406              	.LBI2835:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 2407              		.loc 2 299 7 is_stmt 1 view .LVU582
 2408              	.LBB2836:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2409              		.loc 2 300 9 view .LVU583
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2410              		.loc 2 300 14 is_stmt 0 view .LVU584
 2411 0022 0377     		strb	r3, [r0, #28]
 2412              	.LVL216:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2413              		.loc 2 300 14 view .LVU585
 2414              	.LBE2836:
 2415              	.LBE2835:
 2416              	.LBE2832:
 2417              	.LBE2820:
 2418              	.LBE2817:
 2419              	.LBE2816:
 2420              	.LBE2815:
 2421              	.LBE2837:
 2422              	.LBE2838:
 2423              	.LBE2840:
 2424              	.LBE2842:
 2425              	.LBE2844:
 2426              	.LBB2845:
 2427              	.LBB2846:
 2428              	.LBI2846:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 2429              		.loc 7 767 7 is_stmt 1 view .LVU586
 2430              	.LBB2847:
 2431              	.LBI2847:
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x.first; }
 2432              		.loc 11 1155 7 view .LVU587
 2433              	.LBB2848:
 2434              		.loc 11 1156 20 is_stmt 0 view .LVU588
 2435 0024 0300     		movs	r3, r0
 2436 0026 1033     		adds	r3, r3, #16
 2437              	.LVL217:
 2438              		.loc 11 1156 20 view .LVU589
ARM GAS  /tmp/ccEv8ptb.s 			page 226


 2439              	.LBE2848:
 2440              	.LBE2847:
 2441              	.LBE2846:
2459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 2442              		.loc 7 2459 11 view .LVU590
 2443 0028 3200     		movs	r2, r6
 2444 002a 2900     		movs	r1, r5
 2445 002c 6846     		mov	r0, sp
 2446              	.LVL218:
2459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 2447              		.loc 7 2459 11 view .LVU591
 2448 002e FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 2449              	.LVL219:
2461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
 2450              		.loc 7 2461 16 view .LVU592
 2451 0032 019A     		ldr	r2, [sp, #4]
2461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
 2452              		.loc 7 2461 6 view .LVU593
 2453 0034 002A     		cmp	r2, #0
 2454 0036 06D0     		beq	.L71
2462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 2455              		.loc 7 2462 60 view .LVU594
 2456 0038 2300     		movs	r3, r4
 2457 003a 0099     		ldr	r1, [sp]
 2458 003c 2800     		movs	r0, r5
 2459 003e FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 2460              	.LVL220:
 2461              	.L72:
 2462              	.LBE2845:
 2463              		.loc 7 2472 7 view .LVU595
 2464 0042 03B0     		add	sp, sp, #12
 2465              		@ sp needed
 2466              	.LVL221:
 2467              	.LVL222:
 2468              	.LVL223:
 2469              	.LVL224:
 2470              		.loc 7 2472 7 view .LVU596
 2471 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 2472              	.LVL225:
 2473              	.L71:
 2474              	.LBB2873:
 2475              	.LBB2849:
 2476              	.LBI2849:
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 2477              		.loc 7 648 7 is_stmt 1 view .LVU597
 2478              	.LBB2850:
 2479              	.LBI2850:
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 2480              		.loc 7 637 7 view .LVU598
 2481              	.LBB2851:
 2482              	.LBI2851:
 2483              		.loc 8 495 2 view .LVU599
 2484              	.LBB2852:
 2485              	.LBI2852:
 2486              		.loc 5 151 2 view .LVU600
 2487              	.LBB2853:
 2488              	.LBI2853:
ARM GAS  /tmp/ccEv8ptb.s 			page 227


 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 2489              		.loc 9 208 12 view .LVU601
 2490              	.LBB2854:
 2491              	.LBI2854:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 2492              		.loc 3 657 7 view .LVU602
 2493              	.LBB2855:
 2494              	.LBI2855:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 2495              		.loc 3 229 7 view .LVU603
 2496              	.LBB2856:
 2497              	.LBB2857:
 2498              	.LBI2857:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2499              		.loc 3 221 7 view .LVU604
 2500              	.LBB2858:
 2501              	.LBI2858:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2502              		.loc 3 186 7 view .LVU605
 2503              	.LBB2859:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2504              		.loc 3 187 28 is_stmt 0 view .LVU606
 2505 0046 6069     		ldr	r0, [r4, #20]
 2506              	.LVL226:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2507              		.loc 3 187 28 view .LVU607
 2508              	.LBE2859:
 2509              	.LBE2858:
 2510              	.LBE2857:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2511              		.loc 3 231 2 view .LVU608
 2512 0048 8742     		cmp	r7, r0
 2513 004a 01D0     		beq	.L73
 2514              	.LVL227:
 2515              	.LBB2860:
 2516              	.LBI2860:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2517              		.loc 3 236 7 is_stmt 1 view .LVU609
 2518              	.LBB2861:
 2519              	.LBB2862:
 2520              	.LBI2862:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2521              		.loc 8 469 7 view .LVU610
 2522              	.LBB2863:
 2523              	.LBI2863:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 2524              		.loc 5 119 7 view .LVU611
 2525              	.LBB2864:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2526              		.loc 5 128 19 is_stmt 0 view .LVU612
 2527 004c FFF7FEFF 		bl	_ZdlPv
 2528              	.LVL228:
 2529              	.L73:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2530              		.loc 5 128 19 view .LVU613
 2531              	.LBE2864:
 2532              	.LBE2863:
ARM GAS  /tmp/ccEv8ptb.s 			page 228


 2533              	.LBE2862:
 2534              	.LBE2861:
 2535              	.LBE2860:
 2536              	.LBE2856:
 2537              	.LBE2855:
 2538              	.LBB2865:
 2539              	.LBI2865:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 2540              		.loc 3 150 14 is_stmt 1 view .LVU614
 2541              	.LBB2866:
 2542              	.LBI2866:
 2543              		.loc 4 153 7 view .LVU615
 2544              	.LBB2867:
 2545              	.LBI2867:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2546              		.loc 5 89 7 view .LVU616
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2547              		.loc 5 89 7 is_stmt 0 view .LVU617
 2548              	.LBE2867:
 2549              	.LBE2866:
 2550              	.LBE2865:
 2551              	.LBE2854:
 2552              	.LBE2853:
 2553              	.LBE2852:
 2554              	.LBE2851:
 2555              	.LBE2850:
 2556              	.LBB2868:
 2557              	.LBI2868:
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 2558              		.loc 7 583 7 is_stmt 1 view .LVU618
 2559              	.LBB2869:
 2560              	.LBI2869:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2561              		.loc 8 469 7 view .LVU619
 2562              	.LBB2870:
 2563              	.LBI2870:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 2564              		.loc 5 119 7 view .LVU620
 2565              	.LBB2871:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2566              		.loc 5 128 19 is_stmt 0 view .LVU621
 2567 0050 2000     		movs	r0, r4
 2568 0052 FFF7FEFF 		bl	_ZdlPv
 2569              	.LVL229:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 2570              		.loc 5 128 19 view .LVU622
 2571              	.LBE2871:
 2572              	.LBE2870:
 2573              	.LBE2869:
 2574              	.LBE2868:
 2575              	.LBE2849:
 2576              	.LBB2872:
 2577              	.LBI2872:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 2578              		.loc 7 273 7 is_stmt 1 view .LVU623
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 2579              		.loc 7 273 7 is_stmt 0 view .LVU624
ARM GAS  /tmp/ccEv8ptb.s 			page 229


 2580              	.LBE2872:
2465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
 2581              		.loc 7 2465 33 view .LVU625
 2582 0056 0098     		ldr	r0, [sp]
 2583 0058 F3E7     		b	.L72
 2584              	.LBE2873:
 2585              		.cfi_endproc
 2586              	.LFE2480:
 2588              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20f
 2589              		.align	1
 2590              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_it
 2591              		.syntax unified
 2592              		.code	16
 2593              		.thumb_func
 2594              		.fpu softvfp
 2596              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_
 2597              	.LVL230:
 2598              	.LFB2716:
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 2599              		.loc 1 206 7 is_stmt 1 view -0
 2600              		.cfi_startproc
 2601              		@ args = 0, pretend = 0, frame = 8
 2602              		@ frame_needed = 0, uses_anonymous_args = 0
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 2603              		.loc 1 206 7 is_stmt 0 view .LVU627
 2604 0000 70B5     		push	{r4, r5, r6, lr}
 2605              	.LCFI17:
 2606              		.cfi_def_cfa_offset 16
 2607              		.cfi_offset 4, -16
 2608              		.cfi_offset 5, -12
 2609              		.cfi_offset 6, -8
 2610              		.cfi_offset 14, -4
 2611 0002 82B0     		sub	sp, sp, #8
 2612              	.LCFI18:
 2613              		.cfi_def_cfa_offset 24
 2614 0004 0500     		movs	r5, r0
 2615 0006 0E1E     		subs	r6, r1, #0
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 2616              		.loc 1 211 42 view .LVU628
 2617 0008 0DD0     		beq	.L79
 2618              	.L75:
 2619              	.LVL231:
 2620              	.LBB2874:
 2621              	.LBI2874:
 2622              		.loc 12 138 5 is_stmt 1 view .LVU629
 2623              	.LBB2875:
 2624              	.LBI2875:
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 2625              		.loc 12 98 5 view .LVU630
 2626              	.LBB2876:
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     }
 2627              		.loc 12 104 23 is_stmt 0 view .LVU631
 2628 000a 941B     		subs	r4, r2, r6
 2629              	.LVL232:
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_funcs.h ****     }
 2630              		.loc 12 104 23 view .LVU632
 2631              	.LBE2876:
ARM GAS  /tmp/ccEv8ptb.s 			page 230


 2632              	.LBE2875:
 2633              	.LBE2874:
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 2634              		.loc 1 215 12 view .LVU633
 2635 000c 0194     		str	r4, [sp, #4]
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  {
 2636              		.loc 1 217 2 view .LVU634
 2637 000e 0F2C     		cmp	r4, #15
 2638 0010 0ED8     		bhi	.L80
 2639              	.LVL233:
 2640              	.L76:
 2641              	.LBB2877:
 2642              	.LBI2877:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2643              		.loc 3 186 7 is_stmt 1 view .LVU635
 2644              	.LBB2878:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2645              		.loc 3 187 28 is_stmt 0 view .LVU636
 2646 0012 2868     		ldr	r0, [r5]
 2647              	.LVL234:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2648              		.loc 3 187 28 view .LVU637
 2649              	.LBE2878:
 2650              	.LBE2877:
 2651              	.LBB2879:
 2652              	.LBI2879:
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 2653              		.loc 3 392 7 is_stmt 1 view .LVU638
 2654              	.LBB2880:
 2655              	.LBI2880:
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 2656              		.loc 3 346 7 view .LVU639
 2657              	.LBB2881:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 2658              		.loc 3 348 2 is_stmt 0 view .LVU640
 2659 0014 012C     		cmp	r4, #1
 2660 0016 14D0     		beq	.L81
 2661              	.LVL235:
 2662              	.LBB2882:
 2663              	.LBI2882:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 2664              		.loc 2 361 7 is_stmt 1 view .LVU641
 2665              	.LBB2883:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 2666              		.loc 2 363 2 view .LVU642
 2667 0018 002C     		cmp	r4, #0
 2668 001a 14D0     		beq	.L78
 2669              		.loc 2 365 2 view .LVU643
 2670              		.loc 2 365 49 is_stmt 0 view .LVU644
 2671 001c 2200     		movs	r2, r4
 2672 001e 3100     		movs	r1, r6
 2673 0020 FFF7FEFF 		bl	memcpy
 2674              	.LVL236:
 2675              		.loc 2 365 66 view .LVU645
 2676 0024 0FE0     		b	.L78
 2677              	.LVL237:
 2678              	.L79:
ARM GAS  /tmp/ccEv8ptb.s 			page 231


 2679              		.loc 2 365 66 view .LVU646
 2680              	.LBE2883:
 2681              	.LBE2882:
 2682              	.LBE2881:
 2683              	.LBE2880:
 2684              	.LBE2879:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 2685              		.loc 1 211 42 discriminator 1 view .LVU647
 2686 0026 9142     		cmp	r1, r2
 2687 0028 EFD0     		beq	.L75
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 2688              		.loc 1 212 28 view .LVU648
 2689 002a 0B48     		ldr	r0, .L82
 2690              	.LVL238:
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 2691              		.loc 1 212 28 view .LVU649
 2692 002c FFF7FEFF 		bl	_ZSt19__throw_logic_errorPKc
 2693              	.LVL239:
 2694              	.L80:
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 2695              		.loc 1 219 6 view .LVU650
 2696 0030 0022     		movs	r2, #0
 2697              	.LVL240:
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 2698              		.loc 1 219 6 view .LVU651
 2699 0032 01A9     		add	r1, sp, #4
 2700              	.LVL241:
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 2701              		.loc 1 219 6 view .LVU652
 2702 0034 2800     		movs	r0, r5
 2703              	.LVL242:
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 2704              		.loc 1 219 6 view .LVU653
 2705 0036 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
 2706              	.LVL243:
 2707              	.LBB2888:
 2708              	.LBI2888:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 2709              		.loc 3 178 7 is_stmt 1 view .LVU654
 2710              	.LBB2889:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2711              		.loc 3 179 9 is_stmt 0 view .LVU655
 2712 003a 2860     		str	r0, [r5]
 2713              	.LVL244:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2714              		.loc 3 179 9 view .LVU656
 2715              	.LBE2889:
 2716              	.LBE2888:
 2717              	.LBB2890:
 2718              	.LBI2890:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 2719              		.loc 3 210 7 is_stmt 1 view .LVU657
 2720              	.LBB2891:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2721              		.loc 3 211 9 is_stmt 0 view .LVU658
 2722 003c 019B     		ldr	r3, [sp, #4]
 2723 003e AB60     		str	r3, [r5, #8]
ARM GAS  /tmp/ccEv8ptb.s 			page 232


 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2724              		.loc 3 211 45 view .LVU659
 2725 0040 E7E7     		b	.L76
 2726              	.LVL245:
 2727              	.L81:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2728              		.loc 3 211 45 view .LVU660
 2729              	.LBE2891:
 2730              	.LBE2890:
 2731              	.LBB2892:
 2732              	.LBB2887:
 2733              	.LBB2886:
 2734              	.LBB2884:
 2735              	.LBI2884:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 2736              		.loc 2 299 7 is_stmt 1 view .LVU661
 2737              	.LBB2885:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2738              		.loc 2 300 9 view .LVU662
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2739              		.loc 2 300 16 is_stmt 0 view .LVU663
 2740 0042 3378     		ldrb	r3, [r6]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2741              		.loc 2 300 14 view .LVU664
 2742 0044 0370     		strb	r3, [r0]
 2743              	.LVL246:
 2744              	.L78:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2745              		.loc 2 300 14 view .LVU665
 2746              	.LBE2885:
 2747              	.LBE2884:
 2748              	.LBE2886:
 2749              	.LBE2887:
 2750              	.LBE2892:
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc ****       }
 2751              		.loc 1 232 2 view .LVU666
 2752 0046 019A     		ldr	r2, [sp, #4]
 2753              	.LVL247:
 2754              	.LBB2893:
 2755              	.LBI2893:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 2756              		.loc 3 214 7 is_stmt 1 view .LVU667
 2757              	.LBB2894:
 2758              	.LBB2895:
 2759              	.LBI2895:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 2760              		.loc 3 182 7 view .LVU668
 2761              	.LBB2896:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2762              		.loc 3 183 9 is_stmt 0 view .LVU669
 2763 0048 6A60     		str	r2, [r5, #4]
 2764              	.LVL248:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2765              		.loc 3 183 9 view .LVU670
 2766              	.LBE2896:
 2767              	.LBE2895:
 2768              	.LBB2897:
ARM GAS  /tmp/ccEv8ptb.s 			page 233


 2769              	.LBI2897:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2770              		.loc 3 186 7 is_stmt 1 view .LVU671
 2771              	.LBB2898:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2772              		.loc 3 187 28 is_stmt 0 view .LVU672
 2773 004a 2B68     		ldr	r3, [r5]
 2774              	.LVL249:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2775              		.loc 3 187 28 view .LVU673
 2776              	.LBE2898:
 2777              	.LBE2897:
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 2778              		.loc 3 217 31 view .LVU674
 2779 004c 9B18     		adds	r3, r3, r2
 2780              	.LVL250:
 2781              	.LBB2899:
 2782              	.LBI2899:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 2783              		.loc 2 299 7 is_stmt 1 view .LVU675
 2784              	.LBB2900:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2785              		.loc 2 300 9 view .LVU676
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2786              		.loc 2 300 14 is_stmt 0 view .LVU677
 2787 004e 0022     		movs	r2, #0
 2788              	.LVL251:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2789              		.loc 2 300 14 view .LVU678
 2790 0050 1A70     		strb	r2, [r3]
 2791              	.LVL252:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 2792              		.loc 2 300 14 view .LVU679
 2793              	.LBE2900:
 2794              	.LBE2899:
 2795              	.LBE2894:
 2796              	.LBE2893:
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 2797              		.loc 1 233 7 view .LVU680
 2798 0052 02B0     		add	sp, sp, #8
 2799              		@ sp needed
 2800              	.LVL253:
 2801              	.LVL254:
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.tcc **** 
 2802              		.loc 1 233 7 view .LVU681
 2803 0054 70BD     		pop	{r4, r5, r6, pc}
 2804              	.L83:
 2805 0056 C046     		.align	2
 2806              	.L82:
 2807 0058 00000000 		.word	.LC2
 2808              		.cfi_endproc
 2809              	.LFE2716:
 2811              		.section	.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_,"axG",
 2812              		.align	1
 2813              		.weak	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_
 2814              		.syntax unified
 2815              		.code	16
ARM GAS  /tmp/ccEv8ptb.s 			page 234


 2816              		.thumb_func
 2817              		.fpu softvfp
 2819              	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_:
 2820              	.LVL255:
 2821              	.LFB2360:
1255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
1259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(const _CharT* __s)
1264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_append(__s, __n);
1269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append multiple characters.
1273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
1275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
1293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters.
1296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator,
1304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
1306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
ARM GAS  /tmp/ccEv8ptb.s 			page 235


1307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
1308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         basic_string&
1309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
1319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         append(const _Tp& __svt)
1321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         {
1322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           __sv_type __sv = __svt;
1323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           return this->append(__sv.data(), __sv.size());
1324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         }
1325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
1329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
1330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
1334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
1336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
1337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return _M_append(__sv.data()
1339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
1340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
1342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
1343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a single character.
1346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to append.
1347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
1349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       push_back(_CharT __c)
1350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __size = this->size();
1352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
ARM GAS  /tmp/ccEv8ptb.s 			page 236


1364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(const basic_string& __str)
1365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->_M_assign(__str);
1367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
1368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(basic_string&& __str)
1381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this = std::move(__str);
1386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
1388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to use.
1392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 237


1421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  function returns.
1433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(const _CharT* __s)
1436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			  traits_type::length(__s));
1440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
1446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character @a __c.
1450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator,
1465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
1467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
1468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
1469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         basic_string&
1470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
ARM GAS  /tmp/ccEv8ptb.s 			page 238


1478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
1483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value from a string_view.
1487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
1491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	assign(const _Tp& __svt)
1493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
1494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
1497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
1503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
1506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
1508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
1509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return _M_replace(size_type(0), this->size(),
1511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      __sv.data()
1512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
1513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
1515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
1516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *              insert at.
1522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
1534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
ARM GAS  /tmp/ccEv8ptb.s 			page 239


1535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
1542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
1556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
1559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *              insert at.
1565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __end  End of range.
1567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is thrown.
1574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator,
1576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	iterator
1578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         {
1580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
1585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
1586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __end  End of range.
1591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
ARM GAS  /tmp/ccEv8ptb.s 			page 240


1592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
1599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         void
1600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
1603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
1612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(const_iterator __p, initializer_list<_CharT> __l)
1613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->insert(__p, __l.begin(), __l.end()); }
1614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
1616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // See PR libstdc++/83328
1617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
1618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
1624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
1625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert value of a string.
1628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to insert.
1630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a substring.
1645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to insert.
1647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
ARM GAS  /tmp/ccEv8ptb.s 			page 241


1649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a C substring.
1670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
1677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a C string.
1690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
1696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
1702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 242


1706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     traits_type::length(__s));
1709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
1720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert one character.
1734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
1746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
1762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
ARM GAS  /tmp/ccEv8ptb.s 			page 243


1763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
1765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
1768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
1773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
1774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  from.
1775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
1776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
1779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
1783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0),
1785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      __sv.data()
1786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
1787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
1788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
1789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
1790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Remove characters.
1793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
1798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n == npos)
1811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else if (__n != 0)
1813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
1814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
1815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Remove one character.
1819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
ARM GAS  /tmp/ccEv8ptb.s 			page 244


1820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
1826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       erase(__const_iterator __position)
1827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __position < end());
1830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
1845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __last <= end());
1849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         const size_type __pos = __first - begin();
1850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__last == end())
1851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
1853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Remove the last character.
1860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The string must be non-empty.
1862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
1863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
1864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       pop_back() noexcept
1865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
1870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
1876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
ARM GAS  /tmp/ccEv8ptb.s 			page 245


1877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
1879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  error is thrown.
1887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
1897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str.size().
1902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is thrown.
ARM GAS  /tmp/ccEv8ptb.s 			page 246


1934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      size_type __n2)
1938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
1963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
1966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
1973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is thrown.
1983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
1984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
1985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
1989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
1990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
ARM GAS  /tmp/ccEv8ptb.s 			page 247


1991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String value to insert.
1994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
1997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
1999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
2000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
2001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const basic_string& __str)
2005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
2006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
2009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
2013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
2018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
2021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
2025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
2033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
ARM GAS  /tmp/ccEv8ptb.s 			page 248


2048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
2056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
2057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      _CharT __c)
2068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
2076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
2079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
2088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator,
2091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         basic_string&
2093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         {
2096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				   && __i2 <= end());
2098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 					   std::__false_type());
2101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
2103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
2104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
ARM GAS  /tmp/ccEv8ptb.s 			page 249


2105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
2107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         basic_string&
2108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
2109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
2110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         {
2112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				   && __i2 <= end());
2114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
2119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
2121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
2136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
2147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
ARM GAS  /tmp/ccEv8ptb.s 			page 250


2162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
2180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
2183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
2184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
2185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  The position to replace at.
2190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
2191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
2205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
2206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
2209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
2218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      __sv.data()
ARM GAS  /tmp/ccEv8ptb.s 			page 251


2219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
2220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
2221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
2226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           to replace at.
2227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
2228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           for the replace.
2229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
2240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     private:
2242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _Integer>
2243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	basic_string&
2244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
2249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	basic_string&
2250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    __false_type);
2253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     _CharT __c);
2257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		 const size_type __len2);
2261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
2263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     public:
2266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Copy substring into C string.
2269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to copy value into.
2270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
2271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
2272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Number of characters actually copied
2273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
ARM GAS  /tmp/ccEv8ptb.s 			page 252


2276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range is thrown.
2278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Swap contents with another string.
2284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  String to swap with.
2285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  time.
2288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
2290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // String operations:
2293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  happen.
2298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const _CharT*
2300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
2301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data(); }
2302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
2305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
2307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
2308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
2309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
2310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const _CharT*
2312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
2313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data(); }
2314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
2318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
2320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
2321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _CharT*
2323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       data() noexcept
2324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data(); }
2325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
2326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
2329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       allocator_type
2331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
2332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_get_allocator(); }
ARM GAS  /tmp/ccEv8ptb.s 			page 253


2333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a C substring.
2336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to locate.
2337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
2339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
2342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
2345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
2348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a string.
2352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to locate.
2353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
2357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found, returns npos.
2359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
2362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
2364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a string_view.
2368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
2375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
2379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
2381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a C string.
2384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to locate.
2385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
2389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
ARM GAS  /tmp/ccEv8ptb.s 			page 254


2390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
2397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character.
2401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to locate.
2402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
2406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
2411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a string.
2414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to locate.
2415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
2419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
2420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
2424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
2426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
2430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
2437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
2441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
2443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
2446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to locate.
ARM GAS  /tmp/ccEv8ptb.s 			page 255


2447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
2452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
2455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
2458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a C string.
2462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to locate.
2463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
2464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
2465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
2467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
2468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
2469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
2472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
2475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character.
2479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to locate.
2480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
2489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character of string.
2492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
2500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
2503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccEv8ptb.s 			page 256


2504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
2505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
2509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                characters to locate.
2511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
2517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
2521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
2523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
2526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns npos.
2535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
2538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
2542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
2552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
2556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character.
2560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to locate.
ARM GAS  /tmp/ccEv8ptb.s 			page 257


2561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
2565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
2566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
2569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find(__c, __pos); }
2573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
2584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
2587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
2589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                characters to locate.
2595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
2601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
2605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
2607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
2610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
ARM GAS  /tmp/ccEv8ptb.s 			page 258


2618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns npos.
2619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
2622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
2626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
2636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
2640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character.
2644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to locate.
2645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
2653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
2656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
2657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
2660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
2665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
2666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
2670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
2672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccEv8ptb.s 			page 259


2675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
2676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  A object convertible to string_view containing
2677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                characters to avoid.
2678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
2681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
2684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
2688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
2690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
2693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
2696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
2700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
2705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
2706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
2709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
2715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
2719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
2723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a different character.
2727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to avoid.
2728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
2730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
ARM GAS  /tmp/ccEv8ptb.s 			page 260


2732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
2733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
2734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
2737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
2741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
2747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
2749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
2752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
2754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
2758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                characters to avoid.
2760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
2763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
2766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
2770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
2772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
2775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
2778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
2781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
2782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns npos.
2784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
2787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
2788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccEv8ptb.s 			page 261


2789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
2790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
2796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
2798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
2801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
2805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a different character.
2809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to avoid.
2810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
2812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
2814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
2815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
2816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
2818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
2819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Get a substring.
2823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
2824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
2825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  The new string.
2826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
2829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
2830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
2831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
2832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string
2834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
2835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return basic_string(*this,
2836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
2837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a string.
2840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to compare against.
2841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
2844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
2845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
ARM GAS  /tmp/ccEv8ptb.s 			page 262


2846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
2847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
2848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
2849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
2853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(const basic_string& __str) const
2854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
2855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __size = this->size();
2856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __osize = __str.size();
2857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
2858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
2860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (!__r)
2861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
2862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return __r;
2863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
2864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
2869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
2871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
2873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	compare(const _Tp& __svt) const
2874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  const size_type __size = this->size();
2878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
2879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
2880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
2882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  if (!__r)
2883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
2884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __r;
2885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
2890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
2891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                against.
2893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
2895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
2897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
2898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
2902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
ARM GAS  /tmp/ccEv8ptb.s 			page 263


2903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
2907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
2908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                against.
2910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
2911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
2912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
2914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
2915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
2916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
2917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
2918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
2920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __sv_type(*this)
2922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
2923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
2924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
2925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare substring to a string.
2928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
2930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to compare against.
2931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
2934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
2935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
2936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
2937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
2938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
2939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
2940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  strings by calling
2941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
2942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
2943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the shorter one is ordered first.
2944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
2946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
2947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
2950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
2951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to compare against.
2953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
2954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
2955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
2959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
ARM GAS  /tmp/ccEv8ptb.s 			page 264


2960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
2961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
2962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
2963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
2964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
2965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
2966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  calling
2967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
2968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
2972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
2973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
2974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a C string.
2977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to compare against.
2978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
2980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
2981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
2983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
2984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
2985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
2986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  ordered first.
2988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
2989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
2990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
2991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
2992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
2993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 5 String::compare specification questionable
2994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
2995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
2996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to compare against.
2999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
3000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
3002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
3003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
3004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
3005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
3006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
3007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
3008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  function then compares the two string by calling
3009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
3010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
3011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  one is ordered first.
3012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
3013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
3014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
3015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccEv8ptb.s 			page 265


3017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
3018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
3019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
3020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  character %array to compare against.
3021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
3022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
3023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
3025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
3026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
3027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
3028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
3029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
3030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
3031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
3032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  function then compares the two strings by calling
3033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
3034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
3035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  one is ordered first.
3036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
3038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  no special meaning.
3039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
3040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
3041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
3042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      size_type __n2) const;
3043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus > 201703L
3045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
3046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept
3047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
3048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
3050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       starts_with(_CharT __x) const noexcept
3051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
3052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
3054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       starts_with(const _CharT* __x) const noexcept
3055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
3056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
3058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept
3059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
3060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
3062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ends_with(_CharT __x) const noexcept
3063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
3064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
3066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ends_with(const _CharT* __x) const noexcept
3067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
3068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++20
3069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Allow basic_stringbuf::__xfer_bufptrs to call _M_length:
3071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename, typename, typename> friend class basic_stringbuf;
3072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     };
3073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
ARM GAS  /tmp/ccEv8ptb.s 			page 266


3074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else  // !_GLIBCXX_USE_CXX11_ABI
3075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // Reference-counted COW string implentation
3076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
3078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
3079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
3080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @ingroup strings
3082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @ingroup sequences
3083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @tparam _CharT  Type of character
3085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
3086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *                   char_traits<_CharT>.
3087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
3088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
3090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
3091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
3092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
3093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
3094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @doctodo
3096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Documentation?  What's that?
3099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Nathan Myers <ncm@cantrip.org>.
3100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  A string looks like this:
3102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @code
3104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *                                        [_Rep]
3105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *                                        _M_length
3106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *   [basic_string<char_type>]            _M_capacity
3107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *   _M_dataplus                          _M_refcount
3108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *   _M_p ---------------->               unnamed array of char_type
3109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @endcode
3110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Where the _M_p points to the first character in the string, and
3112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  you cast it to a pointer-to-_Rep and subtract 1 to get a
3113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  pointer to the header.
3114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  This approach has the enormous advantage that a string object
3116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  requires only one allocation.  All the ugliness is confined
3117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  within a single %pair of inline functions, which each compile to
3118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  a single @a add instruction: _Rep::_M_data(), and
3119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  string::_M_rep(); and the allocation function which gets a
3120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  block of raw bytes and with room enough and constructs a _Rep
3121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  object at the front.
3122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  The reason you want _M_data pointing to the character %array and
3124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  not the _Rep is so that the debugger can see the string
3125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  contents. (Probably we should add a non-inline member to get
3126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  the _Rep for the debugger to use, so users can check the actual
3127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  string length.)
3128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Note that the _Rep object is a POD so that you can have a
3130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  static <em>empty string</em> _Rep object already @a constructed before
ARM GAS  /tmp/ccEv8ptb.s 			page 267


3131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  static constructors have run.  The reference-count encoding is
3132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  chosen so that a 0 indicates one reference, so you never try to
3133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  destroy the empty-string _Rep object.
3134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
3135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  All but the last paragraph is considered pretty conventional
3136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  for a C++ string implementation.
3137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   */
3138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // 21.3  Template class basic_string
3139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
3140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     class basic_string
3141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     {
3142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;
3143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Types:
3145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     public:
3146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef _Traits					    traits_type;
3147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _Traits::char_type		    value_type;
3148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef _Alloc					    allocator_type;
3149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::size_type	    size_type;
3150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::difference_type   difference_type;
3151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus < 201103L
3152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::reference	    reference;
3153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_reference   const_reference;
3154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
3155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef value_type&				    reference;
3156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef const value_type&				    const_reference;
3157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::pointer	    pointer;
3159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_pointer	    const_pointer;
3160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
3161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
3162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****                                                             const_iterator;
3163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
3164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		    reverse_iterator;
3165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     protected:
3167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // type used for positions in insert, erase etc.
3168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef iterator __const_iterator;
3169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     private:
3171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _Rep: string representation
3172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //   Invariants:
3173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //   1. String really contains _M_length + 1 characters: due to 21.3.4
3174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //      must be kept null-terminated.
3175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //   2. _M_capacity >= _M_length
3176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).
3177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //   3. _M_refcount has three states:
3178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //      -1: leaked, one reference, no ref-copies allowed, non-const.
3179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //       0: one reference, non-const.
3180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //     n>0: n + 1 references, operations require a lock, const.
3181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //   4. All fields==0 is an empty string, given the extra storage
3182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //      beyond-the-end for a null terminator; thus, the shared
3183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       //      empty string representation needs no constructor.
3184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       struct _Rep_base
3186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	size_type		_M_length;
ARM GAS  /tmp/ccEv8ptb.s 			page 268


3188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	size_type		_M_capacity;
3189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_Atomic_word		_M_refcount;
3190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       };
3191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       struct _Rep : _Rep_base
3193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// Types:
3195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
3196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// (Public) Data members:
3198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// The maximum number of individual char_type elements of an
3200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// individual string is determined by _S_max_size. This is the
3201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// value that will be returned by max_size().  (Whereas npos
3202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// is the maximum number of bytes the allocator can allocate.)
3203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// If one was to divvy up the theoretical largest size string,
3204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// with a terminating character and m _CharT elements, it'd
3205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// look like this:
3206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
3207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// Solving for m:
3208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
3209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// In addition, this implementation quarters this amount.
3210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	static const size_type	_S_max_size;
3211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	static const _CharT	_S_terminal;
3212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// The following storage is init'd to 0 by the linker, resulting
3214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         // (carefully) in an empty string with one reference.
3215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         static size_type _S_empty_rep_storage[];
3216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         static _Rep&
3218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _S_empty_rep() _GLIBCXX_NOEXCEPT
3219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { 
3220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  // NB: Mild hack to avoid strict-aliasing warnings.  Note that
3221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  // _S_empty_rep_storage is never modified and the punning should
3222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  // be reasonably safe in this case.
3223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
3224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return *reinterpret_cast<_Rep*>(__p);
3225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
3226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         bool
3228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_is_leaked() const _GLIBCXX_NOEXCEPT
3229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         {
3230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if defined(__GTHREADS)
3231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           // so we need to use an atomic load. However, _M_is_leaked
3233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           // predicate does not change concurrently (i.e. the string is either
3234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           // leaked or not), so a relaxed load is enough.
3235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_RELAXED) < 0;
3236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
3237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           return this->_M_refcount < 0;
3238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         }
3240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         bool
3242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_is_shared() const _GLIBCXX_NOEXCEPT
3243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
3244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if defined(__GTHREADS)
ARM GAS  /tmp/ccEv8ptb.s 			page 269


3245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           // so we need to use an atomic load. Another thread can drop last
3247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           // but one reference concurrently with this check, so we need this
3248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           // load to be acquire to synchronize with release fetch_and_add in
3249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           // _M_dispose.
3250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_ACQUIRE) > 0;
3251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
3252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           return this->_M_refcount > 0;
3253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         }
3255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         void
3257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_set_leaked() _GLIBCXX_NOEXCEPT
3258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { this->_M_refcount = -1; }
3259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         void
3261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_set_sharable() _GLIBCXX_NOEXCEPT
3262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { this->_M_refcount = 0; }
3263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	void
3265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT
3266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
3267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    {
3271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_M_set_sharable();  // One reference.
3272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_M_length = __n;
3273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      traits_type::assign(this->_M_refdata()[__n], _S_terminal);
3274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      // grrr. (per 21.3.4)
3275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      // You cannot leave those LWG people alone for a second.
3276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    }
3277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
3278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_CharT*
3280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_refdata() throw()
3281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{ return reinterpret_cast<_CharT*>(this + 1); }
3282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_CharT*
3284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
3285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
3286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return (!_M_is_leaked() && __alloc1 == __alloc2)
3287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	          ? _M_refcopy() : _M_clone(__alloc1);
3288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
3289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// Create & Destroy
3291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	static _Rep*
3292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_S_create(size_type, size_type, const _Alloc&);
3293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	void
3295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT
3296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
3297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    {
3301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      // Be race-detector-friendly.  For more info see bits/c++config.
ARM GAS  /tmp/ccEv8ptb.s 			page 270


3302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
3303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****               // Decrement of _M_refcount is acq_rel, because:
3304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****               // - all but last decrements need to release to synchronize with
3305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****               //   the last decrement that will delete the object.
3306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****               // - the last decrement needs to acquire to synchronize with
3307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****               //   all the previous decrements.
3308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****               // - last but one decrement needs to release to synchronize with
3309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****               //   the acquire load in _M_is_shared that will conclude that
3310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****               //   the object is not shared anymore.
3311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
3312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 							 -1) <= 0)
3313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		{
3314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
3315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  _M_destroy(__a);
3316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		}
3317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    }
3318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}  // XXX MT
3319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	void
3321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_destroy(const _Alloc&) throw();
3322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_CharT*
3324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_refcopy() throw()
3325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
3326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
3330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return _M_refdata();
3331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}  // XXX MT
3332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_CharT*
3334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_clone(const _Alloc&, size_type __res = 0);
3335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       };
3336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
3338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       struct _Alloc_hider : _Alloc
3339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT
3341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: _Alloc(__a), _M_p(__dat) { }
3342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_CharT* _M_p; // The actual data.
3344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       };
3345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     public:
3347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Data Members (public):
3348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // NB: This is an unsigned type, and thus represents the maximum
3349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // size that the allocator can hold.
3350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
3351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
3352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     private:
3354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Data Members (private):
3355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       mutable _Alloc_hider	_M_dataplus;
3356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _CharT*
3358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_data() const _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccEv8ptb.s 			page 271


3359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return  _M_dataplus._M_p; }
3360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _CharT*
3362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT
3363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return (_M_dataplus._M_p = __p); }
3364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _Rep*
3366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_rep() const _GLIBCXX_NOEXCEPT
3367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }
3368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // For the internal use we have functions similar to `begin'/`end'
3370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // but they do not call _M_leak.
3371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
3372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_ibegin() const _GLIBCXX_NOEXCEPT
3373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return iterator(_M_data()); }
3374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
3376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_iend() const _GLIBCXX_NOEXCEPT
3377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
3378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
3380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_leak()    // for use in begin() & non-const op[]
3381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (!_M_rep()->_M_is_leaked())
3383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_leak_hard();
3384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
3387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
3388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__pos > this->size())
3390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
3391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
3392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				   __s, __pos, this->size());
3393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return __pos;
3394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
3397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
3398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
3400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
3401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
3404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
3405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
3406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
3408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
3409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // True if _Rep and source do not overlap.
3412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
3413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
3414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
ARM GAS  /tmp/ccEv8ptb.s 			page 272


3416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
3417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
3420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // traits_type::copy/move/assign.
3421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
3422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n == 1)
3425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
3427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
3428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
3431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n == 1)
3434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
3436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);	  
3437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
3440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT
3441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n == 1)
3443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
3444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
3445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);	  
3446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
3449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
3450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _Iterator>
3451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         static void
3452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
3453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         {
3454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
3455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
3456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
3457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
3459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
3460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
3463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
3464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
3468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
3469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static void
3472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
ARM GAS  /tmp/ccEv8ptb.s 			page 273


3473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static int
3477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
3478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
3480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
3482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
3483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
3484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
3485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
3486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return int(__d);
3487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
3490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, size_type __len2);
3491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
3493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_leak_hard();
3494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static _Rep&
3496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_empty_rep() _GLIBCXX_NOEXCEPT
3497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _Rep::_S_empty_rep(); }
3498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
3500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
3501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
3502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp, typename _Res>
3504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	using _If_sv = enable_if_t<
3505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
3506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
3507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
3508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _Res>;
3509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
3511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static __sv_type
3512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
3513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __svt; }
3514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
3516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // allows to add an internal constructor that does not
3517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // participate in overload resolution when a string_view
3518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // is provided.
3519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       struct __sv_wrapper
3520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
3522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__sv_type _M_sv;
3523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       };
3524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
3527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *          wrapper.
3528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
3529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
ARM GAS  /tmp/ccEv8ptb.s 			page 274


3530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       explicit
3532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
3533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
3534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     public:
3537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Construct/copy/destroy:
3538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
3539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
3540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
3543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string()
3545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc())
3548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
3549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc())
3550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { }
3552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
3555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       explicit
3557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const _Alloc& __a);
3558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // NB: per LWG issue 42, semantics different from IS:
3560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a str.
3562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
3563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str);
3565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
3567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
3568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
3571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
3580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		   size_type __n);
3585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
ARM GAS  /tmp/ccEv8ptb.s 			page 275


3587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
3588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a);
3594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
3597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __s  Source character %array.
3598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
3602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  has no special meaning.
3603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
3605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
3608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __s  Source C string.
3609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
3612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
3614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters.
3615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __c  Character to use.
3616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
3619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
3621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Move construct string.
3623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
3624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
3626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
3627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        **/
3628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str)
3629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept // FIXME C++11: should always be noexcept.
3631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(std::move(__str._M_dataplus))
3633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__str._M_data(_S_empty_rep()._M_refdata());
3636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
3637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));
3638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
3643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
ARM GAS  /tmp/ccEv8ptb.s 			page 276


3644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
3647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
3649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(__str._M_rep()->_M_grab(__a, __str.get_allocator()), __a)
3650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { }
3651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
3653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(__str._M_data(), __a)
3654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__a == __str.get_allocator())
3656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
3657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    __str._M_data(_S_empty_rep()._M_refdata());
3659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
3660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    __str._M_data(_S_construct(size_type(), _CharT(), __a));
3661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
3663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
3664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_dataplus._M_p = _S_construct(__str.begin(), __str.end(), __a);
3665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
3667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
3670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __beg  Start of range.
3671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __end  End of range.
3672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
3675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
3676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc());
3677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
3679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
3681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
3682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
3683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
3684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a   Allocator to use.
3685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
3688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
3689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
3690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
3693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
3694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	explicit
3698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
3699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
3700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
ARM GAS  /tmp/ccEv8ptb.s 			page 277


3701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Destroy the string instance.
3704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ~basic_string() _GLIBCXX_NOEXCEPT
3706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_rep()->_M_dispose(this->get_allocator()); }
3707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
3710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
3711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
3713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(const basic_string& __str)
3714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->assign(__str); }
3715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
3718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
3719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
3721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(const _CharT* __s) 
3722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->assign(__s); }
3723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
3726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __c  Source character.
3727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
3729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  (*this)[0] == @a c.
3730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
3732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(_CharT __c) 
3733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { 
3734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->assign(1, __c); 
3735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
3736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
3739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
3741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
3742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
3744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
3745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        **/
3746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
3747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(basic_string&& __str)
3748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value)
3749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// NB: DR 1204.
3751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->swap(__str);
3752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
3753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
3757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
ARM GAS  /tmp/ccEv8ptb.s 			page 278


3758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
3760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
3761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
3763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
3764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
3766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
3768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
3770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __svt An object convertible to  string_view.
3771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
3773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
3774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	operator=(const _Tp& __svt)
3775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{ return this->assign(__svt); }
3776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Convert to a string_view.
3779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return A string_view.
3780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator __sv_type() const noexcept
3782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(data(), size()); }
3783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
3784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Iterators:
3786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
3788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the %string.  Unshares the string.
3789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
3791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       begin() // FIXME C++11: should be noexcept.
3792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_leak();
3794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return iterator(_M_data());
3795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character in the %string.
3800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_iterator
3802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
3803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_iterator(_M_data()); }
3804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
3807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character in the %string.  Unshares the string.
3808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
3810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       end() // FIXME C++11: should be noexcept.
3811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_leak();
3813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return iterator(_M_data() + this->size());
3814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
ARM GAS  /tmp/ccEv8ptb.s 			page 279


3815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  last character in the %string.
3819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_iterator
3821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
3822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
3823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
3826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
3827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  order.  Unshares the string.
3828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reverse_iterator
3830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rbegin() // FIXME C++11: should be noexcept.
3831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
3832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  reverse element order.
3837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reverse_iterator
3839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
3840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
3844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
3845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  element order.  Unshares the string.
3846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reverse_iterator
3848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rend() // FIXME C++11: should be noexcept.
3849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
3850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is done in reverse element order.
3855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reverse_iterator
3857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
3858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
3861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character in the %string.
3864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_iterator
3866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       cbegin() const noexcept
3867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
3868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  last character in the %string.
ARM GAS  /tmp/ccEv8ptb.s 			page 280


3872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_iterator
3874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       cend() const noexcept
3875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
3876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  reverse element order.
3881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reverse_iterator
3883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       crbegin() const noexcept
3884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is done in reverse element order.
3890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reverse_iterator
3892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       crend() const noexcept
3893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     public:
3897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Capacity:
3898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  null-termination.
3900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
3901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
3902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  null-termination.
3906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
3907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
3908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
3911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
3912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
3913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _Rep::_S_max_size; }
3914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
3919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function will %resize the %string to the specified
3921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
3922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
3923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
3924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
3926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
3927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccEv8ptb.s 			page 281


3929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
3933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
3934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
3935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
3936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  setting them to 0.
3937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
3939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       resize(size_type __n)
3940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
3941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
3943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
3944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
3945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       shrink_to_fit() _GLIBCXX_NOEXCEPT
3946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cpp_exceptions
3948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (capacity() > size())
3949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
3950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    try
3951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      { reserve(0); }
3952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    catch(...)
3953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      { }
3954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
3955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
3957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
3958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
3961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  before needing to allocate more memory.
3962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
3964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
3965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_rep()->_M_capacity; }
3966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
3969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *          characters.
3970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
3971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
3972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
3974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
3975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
3976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
3977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
3978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
3979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
3980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
3981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
3982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  data.
3983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
3985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
ARM GAS  /tmp/ccEv8ptb.s 			page 282


3986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
3987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
3988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Erases the string, making it empty.
3989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
3990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
3992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
3993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
3994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (_M_rep()->_M_is_shared())
3995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
3996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_rep()->_M_dispose(this->get_allocator());
3997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    _M_data(_S_empty_rep()._M_refdata());
3998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  }
3999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	else
4000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_rep()->_M_set_length_and_sharable(0);
4001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
4003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // PR 56166: this should not throw.
4004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
4005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       clear()
4006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_mutate(0, this->size(), 0); }
4007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
4008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
4011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  <code>*this == ""</code>.
4012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
4014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
4015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->size() == 0; }
4016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Element access:
4018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
4020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
4021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
4022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
4024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
4025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
4026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  see at().)
4027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reference
4029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
4030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
4032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
4033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
4037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
4038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
4039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
4041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
4042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
ARM GAS  /tmp/ccEv8ptb.s 			page 283


4043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  see at().)  Unshares the string.
4044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reference
4046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator[](size_type __pos)
4047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
4049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	// and in C++11 mode.
4050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
4051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
4052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
4053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_leak();
4054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
4055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
4059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
4060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
4061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
4062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
4064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
4065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
4066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reference
4068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       at(size_type __n) const
4069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n >= this->size())
4071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
4072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
4073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
4074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				   __n, this->size());
4075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_data()[__n];
4076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
4080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
4081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
4082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
4083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
4085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
4086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.  Success results in
4087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  unsharing the string.
4088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reference
4090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       at(size_type __n)
4091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__n >= size())
4093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
4094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
4095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
4096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				   __n, this->size());
4097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_leak();
4098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_data()[__n];
4099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
ARM GAS  /tmp/ccEv8ptb.s 			page 284


4100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
4104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  element of the %string.
4105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reference
4107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       front()
4108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return operator[](0);
4111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
4115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  element of the %string.
4116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reference
4118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       front() const noexcept
4119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return operator[](0);
4122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
4126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  element of the %string.
4127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       reference
4129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       back()
4130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
4133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
4137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  last element of the %string.
4138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const_reference
4140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       back() const noexcept
4141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
4144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
4146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Modifiers:
4148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
4150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
4151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator+=(const basic_string& __str)
4155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->append(__str); }
4156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 285


4157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
4159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
4160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator+=(const _CharT* __s)
4164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->append(__s); }
4165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a character.
4168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to append.
4169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator+=(_CharT __c)
4173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { 
4174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->push_back(__c);
4175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
4176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
4182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
4186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
4188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
4190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
4192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
4196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
4198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{ return this->append(__svt); }
4199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
4200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
4203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
4204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(const basic_string& __str);
4208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a substring.
4211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
4212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
4213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
ARM GAS  /tmp/ccEv8ptb.s 			page 286


4214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
4216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
4218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
4219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
4220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  remainder of @a __str is appended.
4221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos);
4224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a C substring.
4227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
4228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(const _CharT* __s, size_type __n);
4233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
4236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
4237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(const _CharT* __s)
4241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->append(__s, traits_type::length(__s));
4244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append multiple characters.
4248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
4250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
4253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(size_type __n, _CharT __c);
4256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
4261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
4265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
4267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters.
4270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
ARM GAS  /tmp/ccEv8ptb.s 			page 287


4271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
4275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
4277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         basic_string&
4278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
4279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { return this->replace(_M_iend(), _M_iend(), __first, __last); }
4280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
4282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
4284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
4288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	append(const _Tp& __svt)
4290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
4291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->append(__sv.data(), __sv.size());
4293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
4294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
4297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended
4298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *               from.
4299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
4300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
4301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
4304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
4306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
4307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return append(__sv.data()
4309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
4310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
4311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
4312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
4313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Append a single character.
4316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to append.
4317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
4319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       push_back(_CharT __c)
4320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { 
4321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __len = 1 + this->size();
4322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (__len > this->capacity() || _M_rep()->_M_is_shared())
4323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  this->reserve(__len);
4324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	traits_type::assign(_M_data()[this->size()], __c);
4325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_rep()->_M_set_length_and_sharable(__len);
4326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 288


4328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
4331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(const basic_string& __str);
4335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
4340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
4343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
4344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(basic_string&& __str)
4347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(allocator_traits<_Alloc>::is_always_equal::value)
4348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->swap(__str);
4350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
4351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
4353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
4356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to use.
4357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
4358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
4361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
4363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
4364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is larger than the number of available characters in @a
4365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
4366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
4369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->assign(__str._M_data()
4370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    + __str._M_check(__pos, "basic_string::assign"),
4371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    __str._M_limit(__pos, __n)); }
4372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to a C substring.
4375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
4376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
4380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
4381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
4382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n);
ARM GAS  /tmp/ccEv8ptb.s 			page 289


4385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
4388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
4389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
4392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
4393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  function returns.
4394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(const _CharT* __s)
4397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->assign(__s, traits_type::length(__s));
4400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
4404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
4405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
4406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
4409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  character @a __c.
4410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
4413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
4414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
4417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
4418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
4422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
4424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         basic_string&
4425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
4426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
4427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
4431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
4432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
4436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
4437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
4438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
4440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value from a string_view.
ARM GAS  /tmp/ccEv8ptb.s 			page 290


4442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt The source object convertible to string_view.
4443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
4446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	assign(const _Tp& __svt)
4448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
4449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
4451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
4452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
4455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
4456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
4457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
4458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
4461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
4463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
4464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return assign(__sv.data()
4466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
4467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
4468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
4469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
4470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
4476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
4479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
4480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
4483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
4485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
4486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
4487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
4490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __beg  Start of range.
4492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __end  End of range.
4493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
4496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
ARM GAS  /tmp/ccEv8ptb.s 			page 291


4499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
4501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         void
4502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
4503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
4504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
4508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
4513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
4514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
4517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
4519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert value of a string.
4522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to insert.
4524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
4528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
4531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
4534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->insert(__pos1, __str, size_type(0), __str.size()); }
4535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a substring.
4538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  The string to insert.
4540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
4541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
4545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
4546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
4548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
4549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
4550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
4551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
4552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
ARM GAS  /tmp/ccEv8ptb.s 			page 292


4556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
4557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->insert(__pos1, __str._M_data()
4558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    + __str._M_check(__pos2, "basic_string::insert"),
4559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    __str._M_limit(__pos2, __n)); }
4560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a C substring.
4563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
4565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
4566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
4570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
4572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
4573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
4574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
4575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  doesn't change if an error is thrown.
4576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n);
4579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a C string.
4582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
4584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
4588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
4590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
4591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
4592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
4593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
4594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
4597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->insert(__pos, __s, traits_type::length(__s));
4600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
4605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
4607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
4611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
ARM GAS  /tmp/ccEv8ptb.s 			page 293


4613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
4614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
4615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
4617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
4620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
4621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			      size_type(0), __n, __c); }
4622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert one character.
4625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
4626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
4627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
4628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
4631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
4632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
4633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
4635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
4637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       insert(iterator __p, _CharT __c)
4638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __pos = __p - _M_ibegin();
4641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
4642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
4647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
4649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
4651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
4654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
4656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
4657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
4659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
4660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
4663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
4665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
4666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  from.
4667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
4668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
ARM GAS  /tmp/ccEv8ptb.s 			page 294


4670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
4671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         insert(size_type __pos1, const _Tp& __svt,
4673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
4674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
4675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0), __sv.data()
4677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
4678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
4679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
4680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
4681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Remove characters.
4684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
4685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
4686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
4689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
4691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
4692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
4693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
4694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
4696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
4699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { 
4700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_mutate(_M_check(__pos, "basic_string::erase"),
4701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  _M_limit(__pos, __n), size_type(0));
4702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return *this;
4703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Remove one character.
4707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
4708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
4709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
4711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
4712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
4714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       erase(iterator __position)
4715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()
4717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __position < _M_iend());
4718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __pos = __position - _M_ibegin();
4719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_mutate(__pos, size_type(1), size_type(0));
4720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Remove a range of characters.
4726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
ARM GAS  /tmp/ccEv8ptb.s 			page 295


4727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
4728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
4729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
4731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
4732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       iterator
4734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       erase(iterator __first, iterator __last);
4735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****  
4736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
4737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Remove the last character.
4739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The string must be non-empty.
4741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
4742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
4743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       pop_back() // FIXME C++11: should be noexcept.
4744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	erase(size() - 1, 1);
4747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
4749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
4754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
4755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.
4758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
4761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
4762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
4764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
4765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  error is thrown.
4766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
4769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
4770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
4774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
4776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
4777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
4778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
4780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str.size().
4781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
ARM GAS  /tmp/ccEv8ptb.s 			page 296


4784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
4785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
4786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
4787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
4788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
4791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
4792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
4793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
4794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
4795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
4798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
4801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
4802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
4804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
4808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
4809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
4810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
4811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is thrown.
4813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
4816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      size_type __n2);
4817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
4820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
4823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
4825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
4829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
4830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
4831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  change if an error is thrown.
4833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
4836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
4839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 297


4841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
4843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
4846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
4847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
4849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
4852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
4853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
4855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is thrown.
4857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
4860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
4861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
4862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
4865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String value to insert.
4868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
4873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
4874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
4875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const basic_string& __str)
4878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
4879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
4882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
4885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
4886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
4891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
4894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
4897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 298


4898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
4901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
4905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
4908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
4913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s)
4918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
4921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
4925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
4929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
4934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
4939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
4943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
4946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
4947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
4950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
4951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
4952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
4954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
ARM GAS  /tmp/ccEv8ptb.s 			page 299


4955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
4959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
4960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
4961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         basic_string&
4962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
4963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
4964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         {
4965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				   && __i2 <= _M_iend());
4967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
4968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
4969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
4970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
4971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
4973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
4974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
4976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
4987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
4994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
4995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
4996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
4997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
4998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
5000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
5001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
5002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
5003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
5006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
5007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
5008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
5009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
5010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				 && __i2 <= _M_iend());
5011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
ARM GAS  /tmp/ccEv8ptb.s 			page 300


5012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
5013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
5014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
5017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
5019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
5020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
5021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
5022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
5023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
5024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
5026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
5027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
5028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
5029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  thrown.
5030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string& replace(iterator __i1, iterator __i2,
5032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
5033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
5034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++11
5035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  The position to replace at.
5040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
5041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
5042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
5043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
5046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
5047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
5050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
5055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
5056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
5057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
5058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
5059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
5060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
5063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         replace(size_type __pos1, size_type __n1, const _Tp& __svt,
5064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
5065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
5068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      __sv.data()
ARM GAS  /tmp/ccEv8ptb.s 			page 301


5069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
5070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
5071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
5075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
5076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           to replace at.
5077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
5078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           for the replace.
5079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
5080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
5081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
5084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
5085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
5088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
5090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     private:
5092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _Integer>
5093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	basic_string&
5094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
5095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    _Integer __val, __true_type)
5096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }
5097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InputIterator>
5099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	basic_string&
5100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
5101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    _InputIterator __k2, __false_type);
5102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
5104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
5105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     _CharT __c);
5106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string&
5108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
5109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		      size_type __n2);
5110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _S_construct_aux is used to implement the 21.3.1 para 15 which
5112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // requires special behaviour if _InIter is an integral type
5113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InIterator>
5114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         static _CharT*
5115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _S_construct_aux(_InIterator __beg, _InIterator __end,
5116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 const _Alloc& __a, __false_type)
5117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
5119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****           return _S_construct(__beg, __end, __a, _Tag());
5120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
5124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _Integer>
5125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         static _CharT*
ARM GAS  /tmp/ccEv8ptb.s 			page 302


5126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _S_construct_aux(_Integer __beg, _Integer __end,
5127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 const _Alloc& __a, __true_type)
5128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         { return _S_construct_aux_2(static_cast<size_type>(__beg),
5129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 				    __end, __a); }
5130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static _CharT*
5132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
5133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _S_construct(__req, __c, __a); }
5134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InIterator>
5136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         static _CharT*
5137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
5138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
5140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return _S_construct_aux(__beg, __end, __a, _Integral());
5141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         }
5142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
5144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _InIterator>
5145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         static _CharT*
5146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
5147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		      input_iterator_tag);
5148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
5150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
5151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<class _FwdIterator>
5152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         static _CharT*
5153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
5154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     forward_iterator_tag);
5155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       static _CharT*
5157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);
5158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     public:
5160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Copy substring into C string.
5163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to copy value into.
5164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
5165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
5166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Number of characters actually copied
5167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
5168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
5170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
5171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  out_of_range is thrown.
5172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
5175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Swap contents with another string.
5178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  String to swap with.
5179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
5181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  time.
5182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
ARM GAS  /tmp/ccEv8ptb.s 			page 303


5183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       void
5184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       swap(basic_string& __s)
5185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(allocator_traits<_Alloc>::is_always_equal::value);
5186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // String operations:
5188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
5190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
5192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  happen.
5193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const _CharT*
5195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
5196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data(); }
5197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
5200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
5202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
5203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
5204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
5205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const _CharT*
5207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
5208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data(); }
5209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
5213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
5215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
5216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _CharT*
5218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       data() noexcept
5219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
5220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_M_leak();
5221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return _M_data();
5222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
5224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
5227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       allocator_type
5229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
5230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
5231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a C substring.
5234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to locate.
5235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
5237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
ARM GAS  /tmp/ccEv8ptb.s 			page 304


5240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
5243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
5246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a string.
5250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to locate.
5251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
5255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
5256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found, returns npos.
5257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
5260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
5262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a C string.
5265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to locate.
5266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
5270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
5271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
5276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
5278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character.
5282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to locate.
5283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
5287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
5289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
5292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a string_view.
5296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
ARM GAS  /tmp/ccEv8ptb.s 			page 305


5297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
5303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
5307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
5309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a string.
5312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to locate.
5313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
5317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
5318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
5322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
5324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
5327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to locate.
5328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
5333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
5336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
5339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a C string.
5343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to locate.
5344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
5345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
5346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
5348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
5349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
5350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 306


5354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
5356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character.
5360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to locate.
5361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
5367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
5370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
5374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
5375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
5381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
5385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
5387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character of string.
5390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
5398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
5401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
5403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
5406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
ARM GAS  /tmp/ccEv8ptb.s 			page 307


5411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
5413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns npos.
5415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
5418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
5422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
5432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
5434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
5436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character.
5440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to locate.
5441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
5445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
5446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
5447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
5449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find(__c, __pos); }
5453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
5457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                characters to locate.
5459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
5465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
ARM GAS  /tmp/ccEv8ptb.s 			page 308


5468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
5469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
5471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
5482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
5485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
5487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
5490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
5497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns npos.
5499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
5502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
5506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
5516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
5518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
5520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character.
5524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to locate.
ARM GAS  /tmp/ccEv8ptb.s 			page 309


5525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
5531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
5533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
5537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                characters to locate.
5543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
5549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
5553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
5555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
5558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
5563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
5564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  was found.  If not found, returns npos.
5565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
5568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
5570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
5573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
5576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
5580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
ARM GAS  /tmp/ccEv8ptb.s 			page 310


5582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
5585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
5586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
5589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
5595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
5599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
5601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
5603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a different character.
5607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to avoid.
5608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
5612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
5613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
5614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
5617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
5622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                characters to avoid.
5624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of first occurrence.
5626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
5627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
5630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
5634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
5636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
ARM GAS  /tmp/ccEv8ptb.s 			page 311


5639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
5645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
5647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
5650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
5652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
5655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
5658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
5661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
5662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
5663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns npos.
5664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
5667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
5668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
5670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
5676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  npos.
5678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
5681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
5683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
5685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a different character.
5689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __c  Character to avoid.
5690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
5694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
5695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  found.  If not found, returns npos.
ARM GAS  /tmp/ccEv8ptb.s 			page 312


5696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       size_type
5698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
5699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
5704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                characters to avoid.
5706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Index of last occurrence.
5708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
5709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
5712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
5716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
5718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Get a substring.
5721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
5722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
5723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  The new string.
5724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
5725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
5727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
5728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
5729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
5730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string
5732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
5733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return basic_string(*this,
5734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
5735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a string.
5738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to compare against.
5739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
5742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
5743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
5744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
5745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
5746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
5747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
5748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
5751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(const basic_string& __str) const
5752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 313


5753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __size = this->size();
5754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __osize = __str.size();
5755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
5756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
5758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	if (!__r)
5759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
5760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	return __r;
5761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
5762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
5764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
5767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
5769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
5771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	compare(const _Tp& __svt) const
5772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	   __sv_type __sv = __svt;
5775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  const size_type __size = this->size();
5776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
5777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
5778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
5780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  if (!__r)
5781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
5782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __r;
5783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
5788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
5789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
5790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                against.
5791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
5793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
5795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
5796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
5800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
5805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
5806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __svt   An object convertible to string_view to compare
5807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *                 against.
5808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
5809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
ARM GAS  /tmp/ccEv8ptb.s 			page 314


5810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        */
5812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       template<typename _Tp>
5813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	_If_sv<_Tp, int>
5814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
5815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
5816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
5818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  return __sv_type(*this)
5820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
5821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
5822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++17
5823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare substring to a string.
5826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
5828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to compare against.
5829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
5832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
5833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
5834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
5835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
5836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
5837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
5838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  strings by calling
5839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
5840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
5841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the shorter one is ordered first.
5842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
5844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
5845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
5848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
5849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __str  String to compare against.
5851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
5852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
5853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
5857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
5858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
5859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
5860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
5861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
5862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
5863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
5864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  calling
5865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
5866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
ARM GAS  /tmp/ccEv8ptb.s 			page 315


5867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
5870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
5871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
5872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare to a C string.
5875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to compare against.
5876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
5879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
5880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
5881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
5882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
5883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
5884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
5885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  ordered first.
5886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
5888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
5889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 5 String::compare specification questionable
5892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
5894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  C string to compare against.
5897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
5901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
5902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
5903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
5904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
5905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
5906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  function then compares the two string by calling
5907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
5908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  one is ordered first.
5910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
5912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
5913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       /**
5915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
5916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __s  character %array to compare against.
5919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
5920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
ARM GAS  /tmp/ccEv8ptb.s 			page 316


5924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
5925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
5926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
5927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
5928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
5929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
5930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  function then compares the two strings by calling
5931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
5932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  one is ordered first.
5934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *
5935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
5936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****        *  no special meaning.
5937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       */
5938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       int
5939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
5940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      size_type __n2) const;
5941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus > 201703L
5943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
5944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept
5945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
5946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
5948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       starts_with(_CharT __x) const noexcept
5949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
5950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
5952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       starts_with(const _CharT* __x) const noexcept
5953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).starts_with(__x); }
5954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
5956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept
5957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
5958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
5960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ends_with(_CharT __x) const noexcept
5961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
5962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       bool
5964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ends_with(const _CharT* __x) const noexcept
5965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return __sv_type(this->data(), this->size()).ends_with(__x); }
5966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // C++20
5967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** # ifdef _GLIBCXX_TM_TS_INTERNAL
5969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       friend void
5970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,
5971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 					    void* exc);
5972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       friend const char*
5973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ::_txnal_cow_string_c_str(const void *that);
5974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       friend void
5975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ::_txnal_cow_string_D1(void *that);
5976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       friend void
5977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       ::_txnal_cow_string_D1_commit(void *that);
5978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** # endif
5979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   };
5980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif  // !_GLIBCXX_USE_CXX11_ABI
ARM GAS  /tmp/ccEv8ptb.s 			page 317


5981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cpp_deduction_guides >= 201606
5983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
5984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _InputIterator, typename _CharT
5985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	     = typename iterator_traits<_InputIterator>::value_type,
5986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
5987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	   typename = _RequireInputIter<_InputIterator>,
5988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
5989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
5990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;
5991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
5992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
5993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // 3075. basic_string needs deduction guides from basic_string_view
5994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits,
5995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
5996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
5997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())
5998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       -> basic_string<_CharT, _Traits, _Allocator>;
5999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits,
6001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	   typename _Allocator = allocator<_CharT>,
6002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	   typename = _RequireAllocator<_Allocator>>
6003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_string(basic_string_view<_CharT, _Traits>,
6004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		 typename basic_string<_CharT, _Traits, _Allocator>::size_type,
6005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		 typename basic_string<_CharT, _Traits, _Allocator>::size_type,
6006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		 const _Allocator& = _Allocator())
6007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       -> basic_string<_CharT, _Traits, _Allocator>;
6008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
6009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
6010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // operator+
6012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Concatenate two strings.
6014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Last string.
6016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
6017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_string<_CharT, _Traits, _Alloc>
6020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 2822              		.loc 3 6020 5 is_stmt 1 view -0
 2823              		.cfi_startproc
 2824              		@ args = 0, pretend = 0, frame = 0
 2825              		@ frame_needed = 0, uses_anonymous_args = 0
 2826              		.loc 3 6020 5 is_stmt 0 view .LVU683
 2827 0000 70B5     		push	{r4, r5, r6, lr}
 2828              	.LCFI19:
 2829              		.cfi_def_cfa_offset 16
 2830              		.cfi_offset 4, -16
 2831              		.cfi_offset 5, -12
 2832              		.cfi_offset 6, -8
 2833              		.cfi_offset 14, -4
 2834 0002 0400     		movs	r4, r0
 2835 0004 0B00     		movs	r3, r1
 2836 0006 1500     		movs	r5, r2
 2837              	.LVL256:
 2838              	.LBB2901:
ARM GAS  /tmp/ccEv8ptb.s 			page 318


 2839              	.LBI2901:
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 2840              		.loc 3 448 7 is_stmt 1 view .LVU684
 2841              	.LBB2902:
 2842              	.LBB2903:
 2843              	.LBI2903:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 2844              		.loc 3 190 7 view .LVU685
 2845              	.LBB2904:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 2846              		.loc 3 193 51 is_stmt 0 view .LVU686
 2847 0008 0200     		movs	r2, r0
 2848              	.LVL257:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 2849              		.loc 3 193 51 view .LVU687
 2850 000a 0832     		adds	r2, r2, #8
 2851              	.LVL258:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 2852              		.loc 3 193 51 view .LVU688
 2853              	.LBE2904:
 2854              	.LBE2903:
 2855              	.LBB2905:
 2856              	.LBI2905:
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 2857              		.loc 3 290 7 is_stmt 1 view .LVU689
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 2858              		.loc 3 290 7 is_stmt 0 view .LVU690
 2859              	.LBE2905:
 2860              	.LBB2906:
 2861              	.LBI2906:
 2862              		.file 15 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
ARM GAS  /tmp/ccEv8ptb.s 			page 319


  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****  */
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** # include <bits/move.h>
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** #else
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** #endif
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** {
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** /**
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++11 allocators.
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****  * @ingroup allocators
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** */
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** template<typename _Alloc, typename = typename _Alloc::value_type>
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****   struct __alloc_traits
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** #endif
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****   {
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     typedef value_type&                             reference;
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     using _Base_type::allocate;
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     using _Base_type::deallocate;
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     using _Base_type::construct;
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     using _Base_type::destroy;
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     using _Base_type::max_size;
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****   private:
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     template<typename _Ptr>
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       using __is_custom_pointer
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****   public:
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
ARM GAS  /tmp/ccEv8ptb.s 			page 320


  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 					      std::forward<_Args>(__args)...)))
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       {
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::__to_address(__p),
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       }
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     template<typename _Ptr>
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::__to_address(__p)); }
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h **** 
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
 2863              		.loc 15 97 19 is_stmt 1 view .LVU691
 2864              	.LBB2907:
 2865              	.LBI2907:
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static size_type
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       max_size(const allocator_type& __a) noexcept
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.max_size(); }
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return @c __rhs
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static allocator_type
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 2866              		.loc 8 514 7 view .LVU692
 2867              	.LBB2908:
 2868              	.LBI2908:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2869              		.loc 4 141 7 view .LVU693
 2870              	.LBB2909:
 2871              	.LBI2909:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2872              		.loc 5 83 7 view .LVU694
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2873              		.loc 5 83 7 is_stmt 0 view .LVU695
 2874              	.LBE2909:
 2875              	.LBE2908:
 2876              	.LBE2907:
 2877              	.LBE2906:
 2878              	.LBB2910:
 2879              	.LBI2910:
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 2880              		.loc 3 159 2 is_stmt 1 view .LVU696
 2881              	.LBB2911:
 2882              	.LBB2912:
ARM GAS  /tmp/ccEv8ptb.s 			page 321


 2883              	.LBI2912:
 2884              		.loc 6 99 5 view .LVU697
 2885              		.loc 6 99 5 is_stmt 0 view .LVU698
 2886              	.LBE2912:
 2887              	.LBB2913:
 2888              	.LBI2913:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 2889              		.loc 4 141 7 is_stmt 1 view .LVU699
 2890              	.LBB2914:
 2891              	.LBI2914:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2892              		.loc 5 83 7 view .LVU700
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2893              		.loc 5 83 7 is_stmt 0 view .LVU701
 2894              	.LBE2914:
 2895              	.LBE2913:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 2896              		.loc 3 160 46 view .LVU702
 2897 000c 0260     		str	r2, [r0]
 2898              	.LVL259:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 2899              		.loc 3 160 46 view .LVU703
 2900              	.LBE2911:
 2901              	.LBE2910:
 2902              	.LBB2915:
 2903              	.LBI2915:
 2904              		.loc 4 153 7 is_stmt 1 view .LVU704
 2905              	.LBB2916:
 2906              	.LBI2916:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2907              		.loc 5 89 7 view .LVU705
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 2908              		.loc 5 89 7 is_stmt 0 view .LVU706
 2909              	.LBE2916:
 2910              	.LBE2915:
 2911              	.LBB2917:
 2912              	.LBI2917:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2913              		.loc 3 186 7 is_stmt 1 view .LVU707
 2914              	.LBB2918:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2915              		.loc 3 187 28 is_stmt 0 view .LVU708
 2916 000e 0968     		ldr	r1, [r1]
 2917              	.LVL260:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2918              		.loc 3 187 28 view .LVU709
 2919              	.LBE2918:
 2920              	.LBE2917:
 2921              	.LBB2919:
 2922              	.LBI2919:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2923              		.loc 3 186 7 is_stmt 1 view .LVU710
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2924              		.loc 3 186 7 is_stmt 0 view .LVU711
 2925              	.LBE2919:
 2926              	.LBB2920:
 2927              	.LBI2920:
ARM GAS  /tmp/ccEv8ptb.s 			page 322


 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 2928              		.loc 3 936 7 is_stmt 1 view .LVU712
 2929              	.LBB2921:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2930              		.loc 3 937 16 is_stmt 0 view .LVU713
 2931 0010 5A68     		ldr	r2, [r3, #4]
 2932              	.LVL261:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2933              		.loc 3 937 16 view .LVU714
 2934              	.LBE2921:
 2935              	.LBE2920:
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2936              		.loc 3 451 9 view .LVU715
 2937 0012 8A18     		adds	r2, r1, r2
 2938              	.LVL262:
 2939              	.LBB2922:
 2940              	.LBI2922:
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
 2941              		.loc 3 263 9 is_stmt 1 view .LVU716
 2942              	.LBB2923:
 2943              	.LBB2924:
 2944              	.LBI2924:
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 std::__false_type)
 2945              		.loc 3 243 9 view .LVU717
 2946              	.LBB2925:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 2947              		.loc 3 247 11 is_stmt 0 view .LVU718
 2948 0014 0023     		movs	r3, #0
 2949              	.LVL263:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 2950              		.loc 3 247 11 view .LVU719
 2951 0016 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_itera
 2952              	.LVL264:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 2953              		.loc 3 247 11 view .LVU720
 2954              	.LBE2925:
 2955              	.LBE2924:
 2956              	.LBE2923:
 2957              	.LBE2922:
 2958              	.LBE2902:
 2959              	.LBE2901:
 2960              	.LBB2926:
 2961              	.LBI2926:
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
 2962              		.loc 3 1221 7 is_stmt 1 view .LVU721
 2963              	.LBB2927:
 2964              	.LBB2928:
 2965              	.LBI2928:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2966              		.loc 3 186 7 view .LVU722
 2967              	.LBB2929:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2968              		.loc 3 187 28 is_stmt 0 view .LVU723
 2969 001a 2968     		ldr	r1, [r5]
 2970              	.LVL265:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2971              		.loc 3 187 28 view .LVU724
ARM GAS  /tmp/ccEv8ptb.s 			page 323


 2972              	.LBE2929:
 2973              	.LBE2928:
 2974              	.LBB2930:
 2975              	.LBI2930:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 2976              		.loc 3 930 7 is_stmt 1 view .LVU725
 2977              	.LBB2931:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2978              		.loc 3 931 16 is_stmt 0 view .LVU726
 2979 001c 6A68     		ldr	r2, [r5, #4]
 2980              	.LVL266:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2981              		.loc 3 931 16 view .LVU727
 2982              	.LBE2931:
 2983              	.LBE2930:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2984              		.loc 3 1222 55 view .LVU728
 2985 001e 2000     		movs	r0, r4
 2986 0020 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj
 2987              	.LVL267:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 2988              		.loc 3 1222 55 view .LVU729
 2989              	.LBE2927:
 2990              	.LBE2926:
6021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     {
6023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
6024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       __str.append(__rhs);
6025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       return __str;
6026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     }
 2991              		.loc 3 6026 5 view .LVU730
 2992 0024 2000     		movs	r0, r4
 2993              		@ sp needed
 2994              	.LVL268:
 2995              	.LVL269:
 2996              		.loc 3 6026 5 view .LVU731
 2997 0026 70BD     		pop	{r4, r5, r6, pc}
 2998              		.cfi_endproc
 2999              	.LFE2360:
 3001              		.section	.text._Z5colorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN12Colored_text11Text_c
 3002              		.align	1
 3003              		.global	_Z5colorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN12Colored_text11Text_colorsE
 3004              		.syntax unified
 3005              		.code	16
 3006              		.thumb_func
 3007              		.fpu softvfp
 3009              	_Z5colorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN12Colored_text11Text_colorsE:
 3010              	.LVL270:
 3011              	.LFB2100:
 3012              		.file 16 "alohal/misc/text_transform.cpp"
   1:alohal/misc/text_transform.cpp **** #include "text_transform.hpp"
   2:alohal/misc/text_transform.cpp **** 
   3:alohal/misc/text_transform.cpp **** namespace Colored_text {
   4:alohal/misc/text_transform.cpp **** map<Text_colors, string> Color_sequence{
   5:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::reset, "\u001b[0m"),
   6:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::black, "\u001b[30m"),
   7:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::red, "\u001b[31m"),
ARM GAS  /tmp/ccEv8ptb.s 			page 324


   8:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::green, "\u001b[32m"),
   9:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::yellow, "\u001b[33m"),
  10:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::blue, "\u001b[34m"),
  11:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::magenta, "\u001b[35m"),
  12:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::cyan, "\u001b[36m"),
  13:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::white, "\u001b[37m"),
  14:alohal/misc/text_transform.cpp **** };
  15:alohal/misc/text_transform.cpp **** }
  16:alohal/misc/text_transform.cpp **** 
  17:alohal/misc/text_transform.cpp **** string color(string text, Colored_text::Text_colors color){
 3013              		.loc 16 17 59 is_stmt 1 view -0
 3014              		.cfi_startproc
 3015              		@ args = 0, pretend = 0, frame = 56
 3016              		@ frame_needed = 0, uses_anonymous_args = 0
 3017              		.loc 16 17 59 is_stmt 0 view .LVU733
 3018 0000 70B5     		push	{r4, r5, r6, lr}
 3019              	.LCFI20:
 3020              		.cfi_def_cfa_offset 16
 3021              		.cfi_offset 4, -16
 3022              		.cfi_offset 5, -12
 3023              		.cfi_offset 6, -8
 3024              		.cfi_offset 14, -4
 3025 0002 90B0     		sub	sp, sp, #64
 3026              	.LCFI21:
 3027              		.cfi_def_cfa_offset 80
 3028 0004 0500     		movs	r5, r0
 3029 0006 0C00     		movs	r4, r1
 3030 0008 0392     		str	r2, [sp, #12]
  18:alohal/misc/text_transform.cpp ****     return Colored_text::Color_sequence[color] + text + Colored_text::Color_sequence[Colored_text::
 3031              		.loc 16 18 5 is_stmt 1 view .LVU734
 3032              	.LVL271:
 3033              	.LBB3049:
 3034              	.LBI3049:
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  %Map assignment operator.
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Whether the allocator is copied depends on the allocator traits.
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus < 201103L
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map&
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator=(const map& __x)
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	_M_t = __x._M_t;
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return *this;
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map&
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator=(const map&) = default;
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Move assignment operator.
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map&
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator=(map&&) = default;
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  %Map list assignment operator.
ARM GAS  /tmp/ccEv8ptb.s 			page 325


 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __l  An initializer_list.
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function fills a %map with copies of the elements in the
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  initializer list @a __l.
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that the assignment completely changes the %map and
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  that the resulting %map's size is the same as the number
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  of elements assigned.
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map&
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator=(initializer_list<value_type> __l)
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	_M_t._M_assign_unique(__l.begin(), __l.end());
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return *this;
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Get a copy of the memory allocation object.
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       allocator_type
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return allocator_type(_M_t.get_allocator()); }
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // iterators
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read/write iterator that points to the first pair in the
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  %map.
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Iteration is done in ascending order according to the keys.
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       begin() _GLIBCXX_NOEXCEPT
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.begin(); }
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points to the first pair
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in the %map.  Iteration is done in ascending order according to the
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  keys.
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       begin() const _GLIBCXX_NOEXCEPT
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.begin(); }
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read/write iterator that points one past the last
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pair in the %map.  Iteration is done in ascending order
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  according to the keys.
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       end() _GLIBCXX_NOEXCEPT
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points one past the last
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pair in the %map.  Iteration is done in ascending order according to
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the keys.
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       end() const _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccEv8ptb.s 			page 326


 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read/write reverse iterator that points to the last pair in
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the %map.  Iteration is done in descending order according to the
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  keys.
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       reverse_iterator
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       rbegin() _GLIBCXX_NOEXCEPT
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rbegin(); }
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to the
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  last pair in the %map.  Iteration is done in descending order
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  according to the keys.
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_reverse_iterator
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rbegin(); }
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read/write reverse iterator that points to one before the
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first pair in the %map.  Iteration is done in descending order
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  according to the keys.
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       reverse_iterator
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       rend() _GLIBCXX_NOEXCEPT
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rend(); }
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to one
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  before the first pair in the %map.  Iteration is done in descending
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  order according to the keys.
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_reverse_iterator
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       rend() const _GLIBCXX_NOEXCEPT
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rend(); }
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points to the first pair
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in the %map.  Iteration is done in ascending order according to the
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  keys.
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       cbegin() const noexcept
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.begin(); }
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points one past the last
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pair in the %map.  Iteration is done in ascending order according to
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the keys.
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       cend() const noexcept
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 327


 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to the
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  last pair in the %map.  Iteration is done in descending order
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  according to the keys.
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_reverse_iterator
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       crbegin() const noexcept
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rbegin(); }
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to one
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  before the first pair in the %map.  Iteration is done in descending
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  order according to the keys.
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_reverse_iterator
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       crend() const noexcept
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rend(); }
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // capacity
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /** Returns true if the %map is empty.  (Thus begin() would equal
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  end().)
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       */
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       _GLIBCXX_NODISCARD bool
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       empty() const _GLIBCXX_NOEXCEPT
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.empty(); }
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /** Returns the size of the %map.  */
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size_type
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size() const _GLIBCXX_NOEXCEPT
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.size(); }
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /** Returns the maximum size of the %map.  */
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size_type
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       max_size() const _GLIBCXX_NOEXCEPT
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.max_size(); }
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // [23.3.1.2] element access
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Subscript ( @c [] ) access to %map data.
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __k  The key for which data should be retrieved.
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A reference to the data of the (key,data) %pair.
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Allows for easy lookup with the subscript ( @c [] )
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  operator.  Returns data associated with the key specified in
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  subscript.  If the key does not exist, a pair with that key
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  is created using default values, which is then returned.
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Lookup requires logarithmic time.
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       mapped_type&
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator[](const key_type& __k)
 3035              		.loc 10 490 7 view .LVU735
 3036              	.LBB3050:
 3037              	.LBB3051:
 3038              	.LBI3051:
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 328


 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// concept requirements
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator __i = lower_bound(__k);
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// __i->first is greater than or equivalent to __k.
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<>());
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = insert(__i, value_type(__k, mapped_type()));
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return (*__i).second;
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       mapped_type&
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator[](key_type&& __k)
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// concept requirements
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator __i = lower_bound(__k);
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// __i->first is greater than or equivalent to __k.
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					std::forward_as_tuple(std::move(__k)),
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					std::tuple<>());
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return (*__i).second;
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // DR 464. Suggestion for new member functions in standard containers.
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Access to %map data.
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __k  The key for which data should be retrieved.
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A reference to the data whose key is equivalent to @a __k, if
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           such a data is present in the %map.
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @throw  std::out_of_range  If no such data is present.
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       mapped_type&
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       at(const key_type& __k)
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator __i = lower_bound(__k);
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __throw_out_of_range(__N("map::at"));
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return (*__i).second;
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const mapped_type&
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       at(const key_type& __k) const
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	const_iterator __i = lower_bound(__k);
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __throw_out_of_range(__N("map::at"));
ARM GAS  /tmp/ccEv8ptb.s 			page 329


 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return (*__i).second;
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // modifiers
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __args  Arguments used to generate a new pair instance (see
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	        std::piecewise_contruct for passing arguments to each
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	        part of the pair constructor).
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that points
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           to the possibly inserted pair, and the second is a bool that
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           is true if the pair was actually inserted.
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to build and insert a (key, value) %pair into
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the %map.
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename... _Args>
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	std::pair<iterator, bool>
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	emplace(_Args&&... __args)
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __pos  An iterator that serves as a hint as to where the pair
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                should be inserted.
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __args  Arguments used to generate a new pair instance (see
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	         std::piecewise_contruct for passing arguments to each
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	         part of the pair constructor).
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator that points to the element with key of the
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          std::pair built from @a __args (may or may not be that
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          std::pair).
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function is not concerned about whether the insertion took place,
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  and thus does not return a boolean like the single-argument emplace()
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  does.
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that the first parameter is only a hint and can potentially
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  improve the performance of the insertion process. A bad hint would
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  cause no gains in efficiency.
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  See
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.i
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  for more on @a hinting.
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time (if the hint is not taken).
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename... _Args>
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	emplace_hint(const_iterator __pos, _Args&&... __args)
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
ARM GAS  /tmp/ccEv8ptb.s 			page 330


 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return _M_t._M_emplace_hint_unique(__pos,
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					     std::forward<_Args>(__args)...);
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201402L
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Extract a node.
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       node_type
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       extract(const_iterator __pos)
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__glibcxx_assert(__pos != end());
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return _M_t.extract(__pos);
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Extract a node.
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       node_type
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       extract(const key_type& __x)
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.extract(__x); }
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Re-insert an extracted node.
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert_return_type
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(node_type&& __nh)
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_reinsert_node_unique(std::move(__nh)); }
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Re-insert an extracted node.
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(const_iterator __hint, node_type&& __nh)
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_reinsert_node_hint_unique(__hint, std::move(__nh)); }
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename, typename>
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	friend class std::_Rb_tree_merge_helper;
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _C2>
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	merge(map<_Key, _Tp, _C2, _Alloc>& __source)
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  using _Merge_helper = _Rb_tree_merge_helper<map, _C2>;
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  _M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _C2>
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	merge(map<_Key, _Tp, _C2, _Alloc>&& __source)
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ merge(__source); }
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _C2>
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	merge(multimap<_Key, _Tp, _C2, _Alloc>& __source)
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  using _Merge_helper = _Rb_tree_merge_helper<map, _C2>;
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  _M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _C2>
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	merge(multimap<_Key, _Tp, _C2, _Alloc>&& __source)
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ merge(__source); }
ARM GAS  /tmp/ccEv8ptb.s 			page 331


 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif // C++17
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201402L
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #define __cpp_lib_map_try_emplace 201411
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                the map.
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __args  Arguments used to generate the .second for a new pair
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                instance.
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that points
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           to the possibly inserted pair, and the second is a bool that
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           is true if the pair was actually inserted.
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to build and insert a (key, value) %pair into
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the %map.
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  If a %pair is not inserted, this function has no effect.
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename... _Args>
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	pair<iterator, bool>
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	try_emplace(const key_type& __k, _Args&&... __args)
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i = lower_bound(__k);
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__i == end() || key_comp()(__k, (*__i).first))
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      __i = emplace_hint(__i, std::piecewise_construct,
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(__k),
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				   std::forward<_Args>(__args)...));
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return {__i, true};
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return {__i, false};
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // move-capable overload
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename... _Args>
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	pair<iterator, bool>
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	try_emplace(key_type&& __k, _Args&&... __args)
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i = lower_bound(__k);
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__i == end() || key_comp()(__k, (*__i).first))
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      __i = emplace_hint(__i, std::piecewise_construct,
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(std::move(__k)),
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				   std::forward<_Args>(__args)...));
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return {__i, true};
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return {__i, false};
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 332


 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __hint  An iterator that serves as a hint as to where the
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                  pair should be inserted.
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                the map.
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __args  Arguments used to generate the .second for a new pair
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                instance.
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator that points to the element with key of the
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          std::pair built from @a __args (may or may not be that
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          std::pair).
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function is not concerned about whether the insertion took place,
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  and thus does not return a boolean like the single-argument
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  try_emplace() does. However, if insertion did not take place,
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  this function has no effect.
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that the first parameter is only a hint and can potentially
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  improve the performance of the insertion process. A bad hint would
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  cause no gains in efficiency.
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  See
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.i
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  for more on @a hinting.
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time (if the hint is not taken).
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename... _Args>
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	try_emplace(const_iterator __hint, const key_type& __k,
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 		    _Args&&... __args)
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i;
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__true_hint.second)
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    __i = emplace_hint(iterator(__true_hint.second),
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::piecewise_construct,
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::forward_as_tuple(__k),
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::forward_as_tuple(
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward<_Args>(__args)...));
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  else
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    __i = iterator(__true_hint.first);
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return __i;
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // move-capable overload
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename... _Args>
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	try_emplace(const_iterator __hint, key_type&& __k, _Args&&... __args)
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i;
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__true_hint.second)
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    __i = emplace_hint(iterator(__true_hint.second),
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::piecewise_construct,
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::forward_as_tuple(std::move(__k)),
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::forward_as_tuple(
ARM GAS  /tmp/ccEv8ptb.s 			page 333


 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward<_Args>(__args)...));
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  else
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    __i = iterator(__true_hint.first);
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return __i;
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert a std::pair into the %map.
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __x Pair to be inserted (see std::make_pair for easy
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	     creation of pairs).
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           points to the possibly inserted pair, and the second is
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           a bool that is true if the pair was actually inserted.
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to insert a (key, value) %pair into the %map.
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @{
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       std::pair<iterator, bool>
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(const value_type& __x)
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_insert_unique(__x); }
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // 2354. Unnecessary copying when inserting into maps with braced-init
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       std::pair<iterator, bool>
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(value_type&& __x)
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_insert_unique(std::move(__x)); }
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Pair>
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__enable_if_t<is_constructible<value_type, _Pair>::value,
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 		      pair<iterator, bool>>
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert(_Pair&& __x)
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // @}
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert a list of std::pairs into the %map.
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __list  A std::initializer_list<value_type> of pairs to be
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                  inserted.
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Complexity similar to that of the range constructor.
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(std::initializer_list<value_type> __list)
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { insert(__list.begin(), __list.end()); }
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert a std::pair into the %map.
ARM GAS  /tmp/ccEv8ptb.s 			page 334


 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __position  An iterator that serves as a hint as to where the
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                    pair should be inserted.
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Pair to be inserted (see std::make_pair for easy creation
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *               of pairs).
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator that points to the element with key of
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           @a __x (may or may not be the %pair passed in).
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function is not concerned about whether the insertion
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  took place, and thus does not return a boolean like the
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  single-argument insert() does.  Note that the first
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  parameter is only a hint and can potentially improve the
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  performance of the insertion process.  A bad hint would
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  cause no gains in efficiency.
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  See
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.i
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  for more on @a hinting.
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time (if the hint is not taken).
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @{
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(const_iterator __position, const value_type& __x)
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(iterator __position, const value_type& __x)
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_insert_unique_(__position, __x); }
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // 2354. Unnecessary copying when inserting into maps with braced-init
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(const_iterator __position, value_type&& __x)
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_insert_unique_(__position, std::move(__x)); }
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Pair>
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__enable_if_t<is_constructible<value_type, _Pair>::value, iterator>
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert(const_iterator __position, _Pair&& __x)
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return _M_t._M_emplace_hint_unique(__position,
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					     std::forward<_Pair>(__x));
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // @}
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Template function that attempts to insert a range of elements.
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  Iterator pointing to the start of the range to be
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                   inserted.
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __last  Iterator pointing to the end of the range.
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Complexity similar to that of the range constructor.
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _InputIterator>
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
ARM GAS  /tmp/ccEv8ptb.s 			page 335


 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert(_InputIterator __first, _InputIterator __last)
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ _M_t._M_insert_range_unique(__first, __last); }
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201402L
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #define __cpp_lib_map_insertion 201411
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert or assign a std::pair into the %map.
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                the map.
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __obj  Argument used to generate the .second for a pair
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                instance.
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           points to the possibly inserted pair, and the second is
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           a bool that is true if the pair was actually inserted.
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to insert a (key, value) %pair into the %map.
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  If the %pair was already in the %map, the .second of the %pair
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  is assigned from __obj.
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename _Obj>
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	pair<iterator, bool>
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert_or_assign(const key_type& __k, _Obj&& __obj)
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i = lower_bound(__k);
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__i == end() || key_comp()(__k, (*__i).first))
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      __i = emplace_hint(__i, std::piecewise_construct,
 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(__k),
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				   std::forward<_Obj>(__obj)));
 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return {__i, true};
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  (*__i).second = std::forward<_Obj>(__obj);
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return {__i, false};
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // move-capable overload
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename _Obj>
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	pair<iterator, bool>
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert_or_assign(key_type&& __k, _Obj&& __obj)
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i = lower_bound(__k);
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__i == end() || key_comp()(__k, (*__i).first))
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      __i = emplace_hint(__i, std::piecewise_construct,
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(std::move(__k)),
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				   std::forward<_Obj>(__obj)));
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return {__i, true};
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  (*__i).second = std::forward<_Obj>(__obj);
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return {__i, false};
ARM GAS  /tmp/ccEv8ptb.s 			page 336


 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert or assign a std::pair into the %map.
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __hint  An iterator that serves as a hint as to where the
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                  pair should be inserted.
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                the map.
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __obj  Argument used to generate the .second for a pair
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                instance.
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator that points to the element with key of
 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           @a __x (may or may not be the %pair passed in).
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to insert a (key, value) %pair into the %map.
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  If the %pair was already in the %map, the .second of the %pair
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  is assigned from __obj.
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename _Obj>
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert_or_assign(const_iterator __hint,
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			 const key_type& __k, _Obj&& __obj)
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i;
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__true_hint.second)
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return emplace_hint(iterator(__true_hint.second),
 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::piecewise_construct,
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::forward_as_tuple(__k),
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::forward_as_tuple(
 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				    std::forward<_Obj>(__obj)));
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = iterator(__true_hint.first);
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  (*__i).second = std::forward<_Obj>(__obj);
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return __i;
 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // move-capable overload
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename _Obj>
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert_or_assign(const_iterator __hint, key_type&& __k, _Obj&& __obj)
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i;
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__true_hint.second)
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return emplace_hint(iterator(__true_hint.second),
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::piecewise_construct,
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::forward_as_tuple(std::move(__k)),
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::forward_as_tuple(
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				    std::forward<_Obj>(__obj)));
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
ARM GAS  /tmp/ccEv8ptb.s 			page 337


1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = iterator(__true_hint.first);
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  (*__i).second = std::forward<_Obj>(__obj);
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return __i;
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // DR 130. Associative erase should return an iterator.
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases an element from a %map.
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __position  An iterator pointing to the element to be erased.
1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator pointing to the element immediately following
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          @a position prior to the element being erased. If no such
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          element exists, end() is returned.
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases an element, pointed to by the given
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  iterator, from a %map.  Note that this function only erases
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element, and that if the element is itself a pointer,
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the pointed-to memory is not touched in any way.  Managing
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the pointer is the user's responsibility.
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @{
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(const_iterator __position)
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.erase(__position); }
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // LWG 2059
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       _GLIBCXX_ABI_TAG_CXX11
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(iterator __position)
1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.erase(__position); }
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // @}
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases an element from a %map.
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __position  An iterator pointing to the element to be erased.
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases an element, pointed to by the given
1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  iterator, from a %map.  Note that this function only erases
1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element, and that if the element is itself a pointer,
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the pointed-to memory is not touched in any way.  Managing
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the pointer is the user's responsibility.
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(iterator __position)
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t.erase(__position); }
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases elements according to the provided key.
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of element to be erased.
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  The number of elements erased.
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases all the elements located by the given key from
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  a %map.
ARM GAS  /tmp/ccEv8ptb.s 			page 338


1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that this function only erases the element, and that if
1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element is itself a pointer, the pointed-to memory is not touched
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in any way.  Managing the pointer is the user's responsibility.
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size_type
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(const key_type& __x)
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.erase(__x); }
1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // DR 130. Associative erase should return an iterator.
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases a [first,last) range of elements from a %map.
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  Iterator pointing to the start of the range to be
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                   erased.
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __last Iterator pointing to the end of the range to
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                be erased.
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return The iterator @a __last.
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases a sequence of elements from a %map.
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that this function only erases the element, and that if
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element is itself a pointer, the pointed-to memory is not touched
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in any way.  Managing the pointer is the user's responsibility.
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(const_iterator __first, const_iterator __last)
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.erase(__first, __last); }
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases a [__first,__last) range of elements from a %map.
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  Iterator pointing to the start of the range to be
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                   erased.
1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __last Iterator pointing to the end of the range to
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                be erased.
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases a sequence of elements from a %map.
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that this function only erases the element, and that if
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element is itself a pointer, the pointed-to memory is not touched
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in any way.  Managing the pointer is the user's responsibility.
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(iterator __first, iterator __last)
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t.erase(__first, __last); }
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Swaps data with another %map.
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  A %map of the same element and allocator types.
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This exchanges the elements between two maps in constant
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  time.  (It is only swapping a pointer, an integer, and an
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  instance of the @c Compare type (which itself is often
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  stateless and empty), so it should be quite fast.)  Note
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  that the global std::swap() function is specialized such
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  that std::swap(m1,m2) will feed to this function.
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Whether the allocators are swapped depends on the allocator traits.
ARM GAS  /tmp/ccEv8ptb.s 			page 339


1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       swap(map& __x)
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t.swap(__x._M_t); }
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Erases all elements in a %map.  Note that this function only
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  erases the elements, and that if the elements themselves are
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pointers, the pointed-to memory is not touched in any way.
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Managing the pointer is the user's responsibility.
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       clear() _GLIBCXX_NOEXCEPT
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t.clear(); }
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // observers
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns the key comparison object out of which the %map was
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  constructed.
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       key_compare
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       key_comp() const
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.key_comp(); }
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a value comparison object, built from the key comparison
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  object out of which the %map was constructed.
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       value_compare
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       value_comp() const
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return value_compare(_M_t.key_comp()); }
1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // [23.3.1.3] map operations
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Tries to locate an element in a %map.
1157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) %pair to be located.
1158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  Iterator pointing to sought-after element, or end() if not
1159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           found.
1160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function takes a key and tries to locate the element with which
1162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the key matches.  If successful the function returns an iterator
1163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pointing to the sought after %pair.  If unsuccessful it returns the
1164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  past-the-end ( @c end() ) iterator.
1165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       find(const key_type& __x)
1169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.find(__x); }
1170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201103L
1172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Kt>
1173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	auto
1174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
1175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_find_tr(__x); }
ARM GAS  /tmp/ccEv8ptb.s 			page 340


1176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@}
1178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Tries to locate an element in a %map.
1182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) %pair to be located.
1183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  Read-only (constant) iterator pointing to sought-after
1184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           element, or end() if not found.
1185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function takes a key and tries to locate the element with which
1187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the key matches.  If successful the function returns a constant
1188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  iterator pointing to the sought after %pair. If unsuccessful it
1189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  returns the past-the-end ( @c end() ) iterator.
1190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
1193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       find(const key_type& __x) const
1194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.find(__x); }
1195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201103L
1197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Kt>
1198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	auto
1199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
1200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_find_tr(__x); }
1201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@}
1203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Finds the number of elements with given key.
1207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) pairs to be located.
1208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  Number of elements with specified key.
1209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function only makes sense for multimaps; for map the result will
1211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  either be 0 (not present) or 1 (present).
1212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size_type
1214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       count(const key_type& __x) const
1215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
1216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201103L
1218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Kt>
1219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	auto
1220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_count_tr(__x); }
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@}
1224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201703L
1226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Finds whether an element with the given key exists.
1229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) pairs to be located.
1230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  True if there is an element with the specified key.
1231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       bool
ARM GAS  /tmp/ccEv8ptb.s 			page 341


1233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       contains(const key_type& __x) const
1234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.find(__x) != _M_t.end(); }
1235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Kt>
1237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	auto
1238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	contains(const _Kt& __x) const
1239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	-> decltype(_M_t._M_find_tr(__x), void(), true)
1240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_find_tr(__x) != _M_t.end(); }
1241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@}
1242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Finds the beginning of a subsequence matching given key.
1247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) pair to be located.
1248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  Iterator pointing to first element equal to or greater
1249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           than key, or end().
1250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function returns the first element of a subsequence of elements
1252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  that matches the given key.  If unsuccessful it returns an iterator
1253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pointing to the first element that has a greater value than given key
1254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  or end() if no such element exists.
1255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       lower_bound(const key_type& __x)
 3039              		.loc 10 1257 7 view .LVU736
 3040              	.LBB3052:
 3041              	.LBI3052:
1281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 3042              		.loc 7 1281 7 view .LVU737
 3043              	.LBB3053:
 3044              	.LBB3054:
 3045              	.LBI3054:
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 3046              		.loc 7 744 7 view .LVU738
 3047              	.LBB3055:
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3048              		.loc 7 745 73 is_stmt 0 view .LVU739
 3049 000a 2F48     		ldr	r0, .L94
 3050              	.LVL272:
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3051              		.loc 7 745 73 view .LVU740
 3052              	.LBE3055:
 3053              	.LBE3054:
 3054              	.LBB3056:
 3055              	.LBI3056:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 3056              		.loc 7 755 7 is_stmt 1 view .LVU741
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 3057              		.loc 7 755 7 is_stmt 0 view .LVU742
 3058              	.LBE3056:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3059              		.loc 7 1282 56 view .LVU743
 3060 000c 061D     		adds	r6, r0, #4
 3061 000e 03AB     		add	r3, sp, #12
 3062              	.LVL273:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 342


 3063              		.loc 7 1282 56 view .LVU744
 3064 0010 3200     		movs	r2, r6
 3065              	.LVL274:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3066              		.loc 7 1282 56 view .LVU745
 3067 0012 8168     		ldr	r1, [r0, #8]
 3068              	.LVL275:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3069              		.loc 7 1282 56 view .LVU746
 3070 0014 FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 3071              	.LVL276:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3072              		.loc 7 1282 56 view .LVU747
 3073              	.LBE3053:
 3074              	.LBE3052:
 3075              	.LBE3051:
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// __i->first is greater than or equivalent to __k.
 3076              		.loc 10 495 11 view .LVU748
 3077 0018 0300     		movs	r3, r0
 3078              	.LVL277:
 3079              	.LBB3057:
 3080              	.LBI3057:
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 3081              		.loc 10 372 7 is_stmt 1 view .LVU749
 3082              	.LBB3058:
 3083              	.LBI3058:
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 3084              		.loc 7 1014 7 view .LVU750
 3085              	.LBB3059:
 3086              	.LBI3059:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 3087              		.loc 7 273 7 view .LVU751
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 3088              		.loc 7 273 7 is_stmt 0 view .LVU752
 3089              	.LBE3059:
 3090              	.LBE3058:
 3091              	.LBE3057:
 3092              	.LBB3060:
 3093              	.LBI3060:
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 3094              		.loc 7 315 7 is_stmt 1 view .LVU753
 3095              	.LBB3061:
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3096              		.loc 7 316 20 is_stmt 0 view .LVU754
 3097 001a 0100     		movs	r1, r0
 3098              	.LVL278:
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3099              		.loc 7 316 20 view .LVU755
 3100              	.LBE3061:
 3101              	.LBE3060:
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 3102              		.loc 10 497 19 view .LVU756
 3103 001c B042     		cmp	r0, r6
 3104 001e 03D0     		beq	.L86
 3105              	.LVL279:
 3106              	.LBB3062:
 3107              	.LBI3062:
ARM GAS  /tmp/ccEv8ptb.s 			page 343


 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 3108              		.loc 11 385 7 is_stmt 1 view .LVU757
 3109              	.LBB3063:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 3110              		.loc 11 386 20 is_stmt 0 view .LVU758
 3111 0020 0269     		ldr	r2, [r0, #16]
 3112              	.LVL280:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 3113              		.loc 11 386 20 view .LVU759
 3114              	.LBE3063:
 3115              	.LBE3062:
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 3116              		.loc 10 497 19 view .LVU760
 3117 0022 0398     		ldr	r0, [sp, #12]
 3118 0024 9042     		cmp	r0, r2
 3119 0026 09DA     		bge	.L87
 3120              	.LVL281:
 3121              	.L86:
 3122              	.LBB3064:
 3123              	.LBI3064:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 3124              		.loc 7 348 7 is_stmt 1 view .LVU761
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 3125              		.loc 7 348 7 is_stmt 0 view .LVU762
 3126              	.LBE3064:
 3127              	.LBB3065:
 3128              	.LBI3065:
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(__elements...) { }
 3129              		.loc 14 588 19 is_stmt 1 view .LVU763
 3130              	.LBB3066:
 3131              	.LBI3066:
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Base(__head) { }
 3132              		.loc 14 343 17 view .LVU764
 3133              	.LBB3067:
 3134              	.LBI3067:
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl(__h) { }
 3135              		.loc 14 125 17 view .LVU765
 3136              	.LBB3068:
 3137              	.LBB3069:
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 3138              		.loc 14 126 25 is_stmt 0 view .LVU766
 3139 0028 03AB     		add	r3, sp, #12
 3140              	.LVL282:
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 3141              		.loc 14 126 25 view .LVU767
 3142 002a 0F93     		str	r3, [sp, #60]
 3143              	.LVL283:
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 3144              		.loc 14 126 25 view .LVU768
 3145              	.LBE3069:
 3146              	.LBE3068:
 3147              	.LBE3067:
 3148              	.LBE3066:
 3149              	.LBE3065:
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 3150              		.loc 10 499 8 view .LVU769
 3151 002c 0EAB     		add	r3, sp, #56
ARM GAS  /tmp/ccEv8ptb.s 			page 344


 3152              	.LVL284:
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 3153              		.loc 10 499 8 view .LVU770
 3154 002e 0093     		str	r3, [sp]
 3155 0030 0FAB     		add	r3, sp, #60
 3156              	.LVL285:
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 3157              		.loc 10 499 8 view .LVU771
 3158 0032 264A     		ldr	r2, .L94+4
 3159 0034 2448     		ldr	r0, .L94
 3160              	.LVL286:
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 3161              		.loc 10 499 8 view .LVU772
 3162 0036 FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 3163              	.LVL287:
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 3164              		.loc 10 499 8 view .LVU773
 3165 003a 0300     		movs	r3, r0
 3166              	.L87:
 3167              	.LVL288:
 3168              	.LBB3070:
 3169              	.LBI3070:
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 3170              		.loc 7 277 7 is_stmt 1 view .LVU774
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 3171              		.loc 7 277 7 is_stmt 0 view .LVU775
 3172              	.LBE3070:
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 3173              		.loc 10 505 16 view .LVU776
 3174 003c 1433     		adds	r3, r3, #20
 3175              	.LVL289:
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 3176              		.loc 10 505 16 view .LVU777
 3177 003e 1900     		movs	r1, r3
 3178              	.LVL290:
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 3179              		.loc 10 505 16 view .LVU778
 3180              	.LBE3050:
 3181              	.LBE3049:
 3182              		.loc 16 18 48 view .LVU779
 3183 0040 2200     		movs	r2, r4
 3184 0042 05A8     		add	r0, sp, #20
 3185 0044 FFF7FEFF 		bl	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_
 3186              	.LVL291:
 3187              		.loc 16 18 113 view .LVU780
 3188 0048 0023     		movs	r3, #0
 3189 004a 0B93     		str	r3, [sp, #44]
 3190              	.LVL292:
 3191              	.LBB3071:
 3192              	.LBI3071:
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 3193              		.loc 10 510 7 is_stmt 1 view .LVU781
 3194              	.LBB3072:
 3195              	.LBB3073:
 3196              	.LBI3073:
 3197              		.loc 10 1257 7 view .LVU782
 3198              	.LBB3074:
ARM GAS  /tmp/ccEv8ptb.s 			page 345


 3199              	.LBI3074:
1281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 3200              		.loc 7 1281 7 view .LVU783
 3201              	.LBB3075:
 3202              	.LBB3076:
 3203              	.LBI3076:
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 3204              		.loc 7 744 7 view .LVU784
 3205              	.LBB3077:
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3206              		.loc 7 745 73 is_stmt 0 view .LVU785
 3207 004c 1E48     		ldr	r0, .L94
 3208              	.LVL293:
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3209              		.loc 7 745 73 view .LVU786
 3210              	.LBE3077:
 3211              	.LBE3076:
 3212              	.LBB3078:
 3213              	.LBI3078:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 3214              		.loc 7 755 7 is_stmt 1 view .LVU787
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 3215              		.loc 7 755 7 is_stmt 0 view .LVU788
 3216              	.LBE3078:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3217              		.loc 7 1282 56 view .LVU789
 3218 004e 041D     		adds	r4, r0, #4
 3219              	.LVL294:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3220              		.loc 7 1282 56 view .LVU790
 3221 0050 0BAB     		add	r3, sp, #44
 3222              	.LVL295:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3223              		.loc 7 1282 56 view .LVU791
 3224 0052 2200     		movs	r2, r4
 3225 0054 8168     		ldr	r1, [r0, #8]
 3226 0056 FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 3227              	.LVL296:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3228              		.loc 7 1282 56 view .LVU792
 3229              	.LBE3075:
 3230              	.LBE3074:
 3231              	.LBE3073:
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// __i->first is greater than or equivalent to __k.
 3232              		.loc 10 515 11 view .LVU793
 3233 005a 0300     		movs	r3, r0
 3234              	.LVL297:
 3235              	.LBB3079:
 3236              	.LBI3079:
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 3237              		.loc 10 372 7 is_stmt 1 view .LVU794
 3238              	.LBB3080:
 3239              	.LBI3080:
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 3240              		.loc 7 1014 7 view .LVU795
 3241              	.LBB3081:
 3242              	.LBI3081:
ARM GAS  /tmp/ccEv8ptb.s 			page 346


 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 3243              		.loc 7 273 7 view .LVU796
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 3244              		.loc 7 273 7 is_stmt 0 view .LVU797
 3245              	.LBE3081:
 3246              	.LBE3080:
 3247              	.LBE3079:
 3248              	.LBB3082:
 3249              	.LBI3082:
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 3250              		.loc 7 315 7 is_stmt 1 view .LVU798
 3251              	.LBB3083:
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3252              		.loc 7 316 20 is_stmt 0 view .LVU799
 3253 005c 0100     		movs	r1, r0
 3254              	.LVL298:
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 3255              		.loc 7 316 20 view .LVU800
 3256              	.LBE3083:
 3257              	.LBE3082:
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 3258              		.loc 10 517 19 view .LVU801
 3259 005e A042     		cmp	r0, r4
 3260 0060 03D0     		beq	.L88
 3261              	.LVL299:
 3262              	.LBB3084:
 3263              	.LBI3084:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 3264              		.loc 11 385 7 is_stmt 1 view .LVU802
 3265              	.LBB3085:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 3266              		.loc 11 386 20 is_stmt 0 view .LVU803
 3267 0062 0269     		ldr	r2, [r0, #16]
 3268              	.LVL300:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 3269              		.loc 11 386 20 view .LVU804
 3270              	.LBE3085:
 3271              	.LBE3084:
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 3272              		.loc 10 517 19 view .LVU805
 3273 0064 0B98     		ldr	r0, [sp, #44]
 3274 0066 9042     		cmp	r0, r2
 3275 0068 09DA     		bge	.L89
 3276              	.LVL301:
 3277              	.L88:
 3278              	.LBB3086:
 3279              	.LBI3086:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 3280              		.loc 7 348 7 is_stmt 1 view .LVU806
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 3281              		.loc 7 348 7 is_stmt 0 view .LVU807
 3282              	.LBE3086:
 3283              	.LBB3087:
 3284              	.LBI3087:
1482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 3285              		.loc 14 1482 5 is_stmt 1 view .LVU808
 3286              	.LBB3088:
ARM GAS  /tmp/ccEv8ptb.s 			page 347


 3287              	.LBI3088:
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(std::forward<_UElements>(__elements)...) { }
 3288              		.loc 14 626 19 view .LVU809
 3289              	.LBB3089:
 3290              	.LBI3089:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 3291              		.loc 6 74 5 view .LVU810
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 3292              		.loc 6 74 5 is_stmt 0 view .LVU811
 3293              	.LBE3089:
 3294              	.LBB3090:
 3295              	.LBI3090:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(std::forward<_UHead>(__head)) { }
 3296              		.loc 14 348 19 is_stmt 1 view .LVU812
 3297              	.LBB3091:
 3298              	.LBI3091:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 3299              		.loc 6 74 5 view .LVU813
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 3300              		.loc 6 74 5 is_stmt 0 view .LVU814
 3301              	.LBE3091:
 3302              	.LBB3092:
 3303              	.LBI3092:
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__h)) { }
 3304              		.loc 14 132 19 is_stmt 1 view .LVU815
 3305              	.LBB3093:
 3306              	.LBB3094:
 3307              	.LBI3094:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 3308              		.loc 6 74 5 view .LVU816
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 3309              		.loc 6 74 5 is_stmt 0 view .LVU817
 3310              	.LBE3094:
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 3311              		.loc 14 133 42 view .LVU818
 3312 006a 0BAB     		add	r3, sp, #44
 3313              	.LVL302:
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 3314              		.loc 14 133 42 view .LVU819
 3315 006c 0D93     		str	r3, [sp, #52]
 3316              	.LVL303:
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 3317              		.loc 14 133 42 view .LVU820
 3318              	.LBE3093:
 3319              	.LBE3092:
 3320              	.LBE3090:
 3321              	.LBE3088:
 3322              	.LBE3087:
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					std::forward_as_tuple(std::move(__k)),
 3323              		.loc 10 518 8 view .LVU821
 3324 006e 0CAB     		add	r3, sp, #48
 3325              	.LVL304:
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					std::forward_as_tuple(std::move(__k)),
 3326              		.loc 10 518 8 view .LVU822
 3327 0070 0093     		str	r3, [sp]
 3328 0072 0DAB     		add	r3, sp, #52
 3329              	.LVL305:
ARM GAS  /tmp/ccEv8ptb.s 			page 348


 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					std::forward_as_tuple(std::move(__k)),
 3330              		.loc 10 518 8 view .LVU823
 3331 0074 154A     		ldr	r2, .L94+4
 3332 0076 1448     		ldr	r0, .L94
 3333              	.LVL306:
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					std::forward_as_tuple(std::move(__k)),
 3334              		.loc 10 518 8 view .LVU824
 3335 0078 FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 3336              	.LVL307:
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					std::forward_as_tuple(std::move(__k)),
 3337              		.loc 10 518 8 view .LVU825
 3338 007c 0300     		movs	r3, r0
 3339              	.L89:
 3340              	.LVL308:
 3341              	.LBB3095:
 3342              	.LBI3095:
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 3343              		.loc 7 277 7 is_stmt 1 view .LVU826
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 3344              		.loc 7 277 7 is_stmt 0 view .LVU827
 3345              	.LBE3095:
 3346              	.LBE3072:
 3347              	.LBE3071:
 3348              	.LBB3096:
 3349              	.LBI3096:
6027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Concatenate C string and string.
6030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Last string.
6032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
6033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
6036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(const _CharT* __lhs,
6037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const basic_string<_CharT,_Traits,_Alloc>& __rhs);
6038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Concatenate character and string.
6041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Last string.
6043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
6044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
6047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);
6048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Concatenate string and C string.
6051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Last string.
6053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
6054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const _CharT* __rhs)
ARM GAS  /tmp/ccEv8ptb.s 			page 349


6059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     {
6060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
6061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       __str.append(__rhs);
6062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       return __str;
6063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     }
6064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Concatenate string and character.
6067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Last string.
6069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
6070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
6074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     {
6075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
6076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       typedef typename __string_type::size_type		__size_type;
6077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       __string_type __str(__lhs);
6078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       __str.append(__size_type(1), __rhs);
6079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       return __str;
6080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     }
6081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
6083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 3350              		.loc 3 6085 5 is_stmt 1 view .LVU828
 3351              	.LBB3097:
 3352              	.LBI3097:
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
 3353              		.loc 3 1221 7 view .LVU829
 3354              	.LBB3098:
 3355              	.LBB3099:
 3356              	.LBI3099:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3357              		.loc 3 186 7 view .LVU830
 3358              	.LBB3100:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3359              		.loc 3 187 28 is_stmt 0 view .LVU831
 3360 007e 5969     		ldr	r1, [r3, #20]
 3361              	.LVL309:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3362              		.loc 3 187 28 view .LVU832
 3363              	.LBE3100:
 3364              	.LBE3099:
 3365              	.LBB3101:
 3366              	.LBI3101:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 3367              		.loc 3 930 7 is_stmt 1 view .LVU833
 3368              	.LBB3102:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3369              		.loc 3 931 16 is_stmt 0 view .LVU834
 3370 0080 9A69     		ldr	r2, [r3, #24]
 3371              	.LVL310:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3372              		.loc 3 931 16 view .LVU835
ARM GAS  /tmp/ccEv8ptb.s 			page 350


 3373              	.LBE3102:
 3374              	.LBE3101:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3375              		.loc 3 1222 55 view .LVU836
 3376 0082 05A8     		add	r0, sp, #20
 3377              	.LVL311:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3378              		.loc 3 1222 55 view .LVU837
 3379 0084 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj
 3380              	.LVL312:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3381              		.loc 3 1222 55 view .LVU838
 3382 0088 0400     		movs	r4, r0
 3383              	.LVL313:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3384              		.loc 3 1222 55 view .LVU839
 3385              	.LBE3098:
 3386              	.LBE3097:
 3387              	.LBB3103:
 3388              	.LBI3103:
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 3389              		.loc 3 552 7 is_stmt 1 view .LVU840
 3390              	.LBB3104:
 3391              	.LBB3105:
 3392              	.LBI3105:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3393              		.loc 3 190 7 view .LVU841
 3394              	.LBB3106:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 3395              		.loc 3 193 51 is_stmt 0 view .LVU842
 3396 008a 2800     		movs	r0, r5
 3397              	.LVL314:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 3398              		.loc 3 193 51 view .LVU843
 3399 008c 0830     		adds	r0, r0, #8
 3400              	.LVL315:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 3401              		.loc 3 193 51 view .LVU844
 3402              	.LBE3106:
 3403              	.LBE3105:
 3404              	.LBB3107:
 3405              	.LBI3107:
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 3406              		.loc 3 286 7 is_stmt 1 view .LVU845
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 3407              		.loc 3 286 7 is_stmt 0 view .LVU846
 3408              	.LBE3107:
 3409              	.LBB3108:
 3410              	.LBI3108:
 3411              		.loc 6 99 5 is_stmt 1 view .LVU847
 3412              		.loc 6 99 5 is_stmt 0 view .LVU848
 3413              	.LBE3108:
 3414              	.LBB3109:
 3415              	.LBI3109:
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 3416              		.loc 3 159 2 is_stmt 1 view .LVU849
 3417              	.LBB3110:
ARM GAS  /tmp/ccEv8ptb.s 			page 351


 3418              	.LBB3111:
 3419              	.LBI3111:
 3420              		.loc 6 99 5 view .LVU850
 3421              		.loc 6 99 5 is_stmt 0 view .LVU851
 3422              	.LBE3111:
 3423              	.LBB3112:
 3424              	.LBI3112:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 3425              		.loc 4 141 7 is_stmt 1 view .LVU852
 3426              	.LBB3113:
 3427              	.LBI3113:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3428              		.loc 5 83 7 view .LVU853
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3429              		.loc 5 83 7 is_stmt 0 view .LVU854
 3430              	.LBE3113:
 3431              	.LBE3112:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 3432              		.loc 3 160 46 view .LVU855
 3433 008e 2860     		str	r0, [r5]
 3434              	.LVL316:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 3435              		.loc 3 160 46 view .LVU856
 3436              	.LBE3110:
 3437              	.LBE3109:
 3438              	.LBB3114:
 3439              	.LBI3114:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 3440              		.loc 3 221 7 is_stmt 1 view .LVU857
 3441              	.LBB3115:
 3442              	.LBI3115:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3443              		.loc 3 186 7 view .LVU858
 3444              	.LBB3116:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3445              		.loc 3 187 28 is_stmt 0 view .LVU859
 3446 0090 2368     		ldr	r3, [r4]
 3447              	.LVL317:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3448              		.loc 3 187 28 view .LVU860
 3449              	.LBE3116:
 3450              	.LBE3115:
 3451              	.LBB3117:
 3452              	.LBI3117:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3453              		.loc 3 200 7 is_stmt 1 view .LVU861
 3454              	.LBB3118:
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 3455              		.loc 3 203 57 is_stmt 0 view .LVU862
 3456 0092 2600     		movs	r6, r4
 3457 0094 0836     		adds	r6, r6, #8
 3458              	.LVL318:
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 3459              		.loc 3 203 57 view .LVU863
 3460              	.LBE3118:
 3461              	.LBE3117:
 3462              	.LBE3114:
ARM GAS  /tmp/ccEv8ptb.s 			page 352


 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 3463              		.loc 3 555 2 view .LVU864
 3464 0096 B342     		cmp	r3, r6
 3465 0098 11D0     		beq	.L93
 3466              	.LVL319:
 3467              	.LBB3119:
 3468              	.LBI3119:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3469              		.loc 3 186 7 is_stmt 1 view .LVU865
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3470              		.loc 3 186 7 is_stmt 0 view .LVU866
 3471              	.LBE3119:
 3472              	.LBB3120:
 3473              	.LBI3120:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 3474              		.loc 3 178 7 is_stmt 1 view .LVU867
 3475              	.LBB3121:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3476              		.loc 3 179 9 is_stmt 0 view .LVU868
 3477 009a 2B60     		str	r3, [r5]
 3478              	.LVL320:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3479              		.loc 3 179 9 view .LVU869
 3480              	.LBE3121:
 3481              	.LBE3120:
 3482              	.LBB3122:
 3483              	.LBI3122:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 3484              		.loc 3 210 7 is_stmt 1 view .LVU870
 3485              	.LBB3123:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3486              		.loc 3 211 9 is_stmt 0 view .LVU871
 3487 009c A368     		ldr	r3, [r4, #8]
 3488 009e AB60     		str	r3, [r5, #8]
 3489              	.LVL321:
 3490              	.L91:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3491              		.loc 3 211 9 view .LVU872
 3492              	.LBE3123:
 3493              	.LBE3122:
 3494              	.LBB3124:
 3495              	.LBI3124:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 3496              		.loc 3 936 7 is_stmt 1 view .LVU873
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 3497              		.loc 3 936 7 is_stmt 0 view .LVU874
 3498              	.LBE3124:
 3499              	.LBB3125:
 3500              	.LBI3125:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 3501              		.loc 3 182 7 is_stmt 1 view .LVU875
 3502              	.LBB3126:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3503              		.loc 3 183 9 is_stmt 0 view .LVU876
 3504 00a0 6368     		ldr	r3, [r4, #4]
 3505 00a2 6B60     		str	r3, [r5, #4]
 3506              	.LVL322:
ARM GAS  /tmp/ccEv8ptb.s 			page 353


 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3507              		.loc 3 183 9 view .LVU877
 3508              	.LBE3126:
 3509              	.LBE3125:
 3510              	.LBB3127:
 3511              	.LBI3127:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3512              		.loc 3 190 7 is_stmt 1 view .LVU878
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3513              		.loc 3 190 7 is_stmt 0 view .LVU879
 3514              	.LBE3127:
 3515              	.LBB3128:
 3516              	.LBI3128:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 3517              		.loc 3 178 7 is_stmt 1 view .LVU880
 3518              	.LBB3129:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3519              		.loc 3 179 9 is_stmt 0 view .LVU881
 3520 00a4 2660     		str	r6, [r4]
 3521              	.LVL323:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3522              		.loc 3 179 9 view .LVU882
 3523              	.LBE3129:
 3524              	.LBE3128:
 3525              	.LBB3130:
 3526              	.LBI3130:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3527              		.loc 3 214 7 is_stmt 1 view .LVU883
 3528              	.LBB3131:
 3529              	.LBI3131:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 3530              		.loc 3 182 7 view .LVU884
 3531              	.LBB3132:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3532              		.loc 3 183 9 is_stmt 0 view .LVU885
 3533 00a6 0023     		movs	r3, #0
 3534 00a8 6360     		str	r3, [r4, #4]
 3535              	.LVL324:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3536              		.loc 3 183 9 view .LVU886
 3537              	.LBE3132:
 3538              	.LBE3131:
 3539              	.LBB3133:
 3540              	.LBI3133:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 3541              		.loc 2 299 7 is_stmt 1 view .LVU887
 3542              	.LBB3134:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 3543              		.loc 2 300 9 view .LVU888
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 3544              		.loc 2 300 14 is_stmt 0 view .LVU889
 3545 00aa 2372     		strb	r3, [r4, #8]
 3546              	.LVL325:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 3547              		.loc 2 300 14 view .LVU890
 3548              	.LBE3134:
 3549              	.LBE3133:
ARM GAS  /tmp/ccEv8ptb.s 			page 354


 3550              	.LBE3130:
 3551              	.LBE3104:
 3552              	.LBE3103:
 3553              	.LBE3096:
 3554              	.LBB3139:
 3555              	.LBI3139:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 3556              		.loc 3 657 7 is_stmt 1 view .LVU891
 3557              	.LBB3140:
 3558              	.LBI3140:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3559              		.loc 3 229 7 view .LVU892
 3560              	.LBB3141:
 3561              	.LBB3142:
 3562              	.LBI3142:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 3563              		.loc 3 221 7 view .LVU893
 3564              	.LBB3143:
 3565              	.LBI3143:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3566              		.loc 3 186 7 view .LVU894
 3567              	.LBB3144:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3568              		.loc 3 187 28 is_stmt 0 view .LVU895
 3569 00ac 0598     		ldr	r0, [sp, #20]
 3570              	.LVL326:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3571              		.loc 3 187 28 view .LVU896
 3572              	.LBE3144:
 3573              	.LBE3143:
 3574              	.LBB3145:
 3575              	.LBI3145:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3576              		.loc 3 200 7 is_stmt 1 view .LVU897
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3577              		.loc 3 200 7 is_stmt 0 view .LVU898
 3578              	.LBE3145:
 3579              	.LBE3142:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 3580              		.loc 3 231 2 view .LVU899
 3581 00ae 07AB     		add	r3, sp, #28
 3582 00b0 9842     		cmp	r0, r3
 3583 00b2 01D0     		beq	.L85
 3584              	.LVL327:
 3585              	.LBB3146:
 3586              	.LBI3146:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 3587              		.loc 3 236 7 is_stmt 1 view .LVU900
 3588              	.LBB3147:
 3589              	.LBB3148:
 3590              	.LBI3148:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 3591              		.loc 8 469 7 view .LVU901
 3592              	.LBB3149:
 3593              	.LBI3149:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 3594              		.loc 5 119 7 view .LVU902
ARM GAS  /tmp/ccEv8ptb.s 			page 355


 3595              	.LBB3150:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 3596              		.loc 5 128 19 is_stmt 0 view .LVU903
 3597 00b4 FFF7FEFF 		bl	_ZdlPv
 3598              	.LVL328:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 3599              		.loc 5 128 19 view .LVU904
 3600              	.LBE3150:
 3601              	.LBE3149:
 3602              	.LBE3148:
 3603              	.LBE3147:
 3604              	.LBE3146:
 3605              	.LBE3141:
 3606              	.LBE3140:
 3607              	.LBB3151:
 3608              	.LBI3151:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3609              		.loc 3 150 14 is_stmt 1 view .LVU905
 3610              	.LBB3152:
 3611              	.LBI3152:
 3612              		.loc 4 153 7 view .LVU906
 3613              	.LBB3153:
 3614              	.LBI3153:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3615              		.loc 5 89 7 view .LVU907
 3616              	.L85:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3617              		.loc 5 89 7 is_stmt 0 view .LVU908
 3618              	.LBE3153:
 3619              	.LBE3152:
 3620              	.LBE3151:
 3621              	.LBE3139:
  19:alohal/misc/text_transform.cpp **** }
 3622              		.loc 16 19 1 view .LVU909
 3623 00b8 2800     		movs	r0, r5
 3624 00ba 10B0     		add	sp, sp, #64
 3625              		@ sp needed
 3626              	.LVL329:
 3627              		.loc 16 19 1 view .LVU910
 3628 00bc 70BD     		pop	{r4, r5, r6, pc}
 3629              	.LVL330:
 3630              	.L93:
 3631              	.LBB3154:
 3632              	.LBB3138:
 3633              	.LBB3137:
 3634              	.LBB3135:
 3635              	.LBI3135:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 3636              		.loc 2 361 7 is_stmt 1 view .LVU911
 3637              	.LBB3136:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 3638              		.loc 2 363 2 view .LVU912
 3639              		.loc 2 365 2 view .LVU913
 3640              		.loc 2 365 49 is_stmt 0 view .LVU914
 3641 00be 1022     		movs	r2, #16
 3642 00c0 3100     		movs	r1, r6
 3643 00c2 FFF7FEFF 		bl	memcpy
ARM GAS  /tmp/ccEv8ptb.s 			page 356


 3644              	.LVL331:
 3645              		.loc 2 365 49 view .LVU915
 3646 00c6 EBE7     		b	.L91
 3647              	.L95:
 3648              		.align	2
 3649              	.L94:
 3650 00c8 00000000 		.word	.LANCHOR0
 3651 00cc 00000000 		.word	_ZSt19piecewise_construct
 3652              	.LBE3136:
 3653              	.LBE3135:
 3654              	.LBE3137:
 3655              	.LBE3138:
 3656              	.LBE3154:
 3657              		.cfi_endproc
 3658              	.LFE2100:
 3660              		.section	.text._ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEE
 3661              		.align	1
 3662              		.weak	_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_
 3663              		.syntax unified
 3664              		.code	16
 3665              		.thumb_func
 3666              		.fpu softvfp
 3668              	_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_S
 3669              	.LVL332:
 3670              	.LFB2192:
 3671              		.file 17 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // String Conversions -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // Copyright (C) 2008-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** /** @file ext/string_conversions.h
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****  */
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #ifndef _STRING_CONVERSIONS_H
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #define _STRING_CONVERSIONS_H 1
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 357


  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #if __cplusplus < 201103L
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** # include <bits/c++0x_warning.h>
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #else
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #include <bits/c++config.h>
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #include <ext/numeric_traits.h>
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #include <bits/functexcept.h>
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #include <cstdlib>
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #include <cwchar>
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #include <cstdio>
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** #include <cerrno>
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** {
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****   // Helper for all the sto* functions.
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****   template<typename _TRet, typename _Ret = _TRet, typename _CharT,
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	   typename... _Base>
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****     _Ret
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****     __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	   const char* __name, const _CharT* __str, std::size_t* __idx,
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	   _Base... __base)
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****     {
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       _Ret __ret;
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       _CharT* __endptr;
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       struct _Save_errno {
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	_Save_errno() : _M_errno(errno) { errno = 0; }
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	~_Save_errno() { if (errno == 0) errno = _M_errno; }
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	int _M_errno;
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       } const __save_errno;
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       struct _Range_chk {
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	  static bool
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	  _S_chk(_TRet, std::false_type) { return false; }
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	  static bool
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	  {
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	    return __val < _TRet(__numeric_traits<int>::__min)
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	      || __val > _TRet(__numeric_traits<int>::__max);
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	  }
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       };
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       const _TRet __tmp = __convf(__str, &__endptr, __base...);
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       if (__endptr == __str)
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	std::__throw_invalid_argument(__name);
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       else if (errno == ERANGE
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	std::__throw_out_of_range(__name);
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       else
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	__ret = __tmp;
ARM GAS  /tmp/ccEv8ptb.s 			page 358


  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       if (__idx)
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 	*__idx = __endptr - __str;
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       return __ret;
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****     }
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****   // Helper for the to_string / to_wstring functions.
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****   template<typename _String, typename _CharT = typename _String::value_type>
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****     _String
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****     __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 3672              		.loc 17 99 5 is_stmt 1 view -0
 3673              		.cfi_startproc
 3674              		@ args = 4, pretend = 4, frame = 8
 3675              		@ frame_needed = 1, uses_anonymous_args = 1
 3676              		.loc 17 99 5 is_stmt 0 view .LVU917
 3677 0000 08B4     		push	{r3}
 3678              	.LCFI22:
 3679              		.cfi_def_cfa_offset 4
 3680              	.LVL333:
 3681              		.loc 17 99 5 view .LVU918
 3682 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 3683              	.LCFI23:
 3684              		.cfi_def_cfa_offset 24
 3685              		.cfi_offset 4, -24
 3686              		.cfi_offset 5, -20
 3687              		.cfi_offset 6, -16
 3688              		.cfi_offset 7, -12
 3689              		.cfi_offset 14, -8
 3690              	.LVL334:
 3691              		.loc 17 99 5 view .LVU919
 3692 0004 82B0     		sub	sp, sp, #8
 3693              	.LCFI24:
 3694              		.cfi_def_cfa_offset 32
 3695              	.LVL335:
 3696              		.loc 17 99 5 view .LVU920
 3697 0006 00AF     		add	r7, sp, #0
 3698              	.LCFI25:
 3699              		.cfi_def_cfa_register 7
 3700 0008 0400     		movs	r4, r0
 3701 000a 0D00     		movs	r5, r1
 3702 000c 1100     		movs	r1, r2
 3703              	.LVL336:
 3704              		.loc 17 99 5 view .LVU921
 3705 000e 1C23     		movs	r3, #28
 3706 0010 FB18     		adds	r3, r7, r3
 3707 0012 04CB     		ldmia	r3!, {r2}
 3708              	.LVL337:
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 				 __builtin_va_list), std::size_t __n,
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 		 const _CharT* __fmt, ...)
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****     {
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       // XXX Eventually the result should be constructed in-place in
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       // the __cxx11 string, likely with the help of internal hooks.
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 3709              		.loc 17 105 58 view .LVU922
 3710 0014 C81D     		adds	r0, r1, #7
 3711              	.LVL338:
ARM GAS  /tmp/ccEv8ptb.s 			page 359


 3712              		.loc 17 105 58 view .LVU923
 3713 0016 C008     		lsrs	r0, r0, #3
 3714 0018 C000     		lsls	r0, r0, #3
 3715 001a 6E46     		mov	r6, sp
 3716 001c 301A     		subs	r0, r6, r0
 3717 001e 8546     		mov	sp, r0
 3718              	.LVL339:
 3719              		.loc 17 105 58 view .LVU924
 3720 0020 6E46     		mov	r6, sp
 3721              	.LVL340:
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 							  * __n));
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       __builtin_va_list __args;
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       __builtin_va_start(__args, __fmt);
 3722              		.loc 17 109 25 view .LVU925
 3723 0022 7B60     		str	r3, [r7, #4]
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       const int __len = __convf(__s, __n, __fmt, __args);
 3724              		.loc 17 111 32 view .LVU926
 3725 0024 A847     		blx	r5
 3726              	.LVL341:
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       __builtin_va_end(__args);
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h **** 
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****       return _String(__s, __s + __len);
 3727              		.loc 17 115 38 view .LVU927
 3728 0026 3218     		adds	r2, r6, r0
 3729              	.LVL342:
 3730              	.LBB3155:
 3731              	.LBI3155:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 3732              		.loc 4 138 7 is_stmt 1 view .LVU928
 3733              	.LBB3156:
 3734              	.LBI3156:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3735              		.loc 5 80 7 view .LVU929
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3736              		.loc 5 80 7 is_stmt 0 view .LVU930
 3737              	.LBE3156:
 3738              	.LBE3155:
 3739              	.LBB3157:
 3740              	.LBI3157:
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 3741              		.loc 3 625 9 is_stmt 1 view .LVU931
 3742              	.LBB3158:
 3743              	.LBI3158:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3744              		.loc 3 190 7 view .LVU932
 3745              	.LBB3159:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 3746              		.loc 3 193 51 is_stmt 0 view .LVU933
 3747 0028 2300     		movs	r3, r4
 3748 002a 0833     		adds	r3, r3, #8
 3749              	.LVL343:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 3750              		.loc 3 193 51 view .LVU934
 3751              	.LBE3159:
ARM GAS  /tmp/ccEv8ptb.s 			page 360


 3752              	.LBE3158:
 3753              	.LBB3160:
 3754              	.LBI3160:
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 3755              		.loc 3 156 2 is_stmt 1 view .LVU935
 3756              	.LBB3161:
 3757              	.LBB3162:
 3758              	.LBI3162:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 3759              		.loc 4 141 7 view .LVU936
 3760              	.LBB3163:
 3761              	.LBI3163:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3762              		.loc 5 83 7 view .LVU937
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3763              		.loc 5 83 7 is_stmt 0 view .LVU938
 3764              	.LBE3163:
 3765              	.LBE3162:
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3766              		.loc 3 157 35 view .LVU939
 3767 002c 2360     		str	r3, [r4]
 3768              	.LVL344:
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3769              		.loc 3 157 35 view .LVU940
 3770              	.LBE3161:
 3771              	.LBE3160:
 3772              	.LBB3164:
 3773              	.LBI3164:
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
 3774              		.loc 3 263 9 is_stmt 1 view .LVU941
 3775              	.LBB3165:
 3776              	.LBB3166:
 3777              	.LBI3166:
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 std::__false_type)
 3778              		.loc 3 243 9 view .LVU942
 3779              	.LBB3167:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 3780              		.loc 3 247 11 is_stmt 0 view .LVU943
 3781 002e 0023     		movs	r3, #0
 3782 0030 3100     		movs	r1, r6
 3783 0032 2000     		movs	r0, r4
 3784              	.LVL345:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 3785              		.loc 3 247 11 view .LVU944
 3786 0034 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_itera
 3787              	.LVL346:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 3788              		.loc 3 247 11 view .LVU945
 3789              	.LBE3167:
 3790              	.LBE3166:
 3791              	.LBE3165:
 3792              	.LBE3164:
 3793              	.LBE3157:
 3794              	.LBB3168:
 3795              	.LBI3168:
 3796              		.loc 4 153 7 is_stmt 1 view .LVU946
 3797              	.LBB3169:
ARM GAS  /tmp/ccEv8ptb.s 			page 361


 3798              	.LBI3169:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3799              		.loc 5 89 7 view .LVU947
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3800              		.loc 5 89 7 is_stmt 0 view .LVU948
 3801              	.LBE3169:
 3802              	.LBE3168:
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/string_conversions.h ****     }
 3803              		.loc 17 116 5 view .LVU949
 3804 0038 2000     		movs	r0, r4
 3805 003a BD46     		mov	sp, r7
 3806              	.LVL347:
 3807              		.loc 17 116 5 view .LVU950
 3808 003c 02B0     		add	sp, sp, #8
 3809              	.LVL348:
 3810              		.loc 17 116 5 view .LVU951
 3811              		@ sp needed
 3812              	.LVL349:
 3813              	.LVL350:
 3814              	.LVL351:
 3815              		.loc 17 116 5 view .LVU952
 3816 003e F0BC     		pop	{r4, r5, r6, r7}
 3817 0040 08BC     		pop	{r3}
 3818 0042 01B0     		add	sp, sp, #4
 3819 0044 1847     		bx	r3
 3820              		.cfi_endproc
 3821              	.LFE2192:
 3823              		.section	.rodata._Z7dec2hexB5cxx11i.str1.4,"aMS",%progbits,1
 3824              		.align	2
 3825              	.LC8:
 3826 0000 3000     		.ascii	"0\000"
 3827 0002 0000     		.align	2
 3828              	.LC11:
 3829 0004 00       		.ascii	"\000"
 3830 0005 000000   		.align	2
 3831              	.LC14:
 3832 0008 6100     		.ascii	"a\000"
 3833 000a 0000     		.align	2
 3834              	.LC16:
 3835 000c 6200     		.ascii	"b\000"
 3836 000e 0000     		.align	2
 3837              	.LC18:
 3838 0010 6300     		.ascii	"c\000"
 3839 0012 0000     		.align	2
 3840              	.LC20:
 3841 0014 6400     		.ascii	"d\000"
 3842 0016 0000     		.align	2
 3843              	.LC22:
 3844 0018 6500     		.ascii	"e\000"
 3845 001a 0000     		.align	2
 3846              	.LC24:
 3847 001c 6600     		.ascii	"f\000"
 3848 001e 0000     		.align	2
 3849              	.LC26:
 3850 0020 256400   		.ascii	"%d\000"
 3851              		.section	.text._Z7dec2hexB5cxx11i,"ax",%progbits
 3852              		.align	1
ARM GAS  /tmp/ccEv8ptb.s 			page 362


 3853              		.global	_Z7dec2hexB5cxx11i
 3854              		.syntax unified
 3855              		.code	16
 3856              		.thumb_func
 3857              		.fpu softvfp
 3859              	_Z7dec2hexB5cxx11i:
 3860              	.LVL352:
 3861              	.LFB2101:
  20:alohal/misc/text_transform.cpp **** 
  21:alohal/misc/text_transform.cpp **** string dec2hex(int dec_number){
 3862              		.loc 16 21 31 is_stmt 1 view -0
 3863              		.cfi_startproc
 3864              		@ args = 0, pretend = 0, frame = 232
 3865              		@ frame_needed = 0, uses_anonymous_args = 0
 3866              		.loc 16 21 31 is_stmt 0 view .LVU954
 3867 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3868              	.LCFI26:
 3869              		.cfi_def_cfa_offset 20
 3870              		.cfi_offset 4, -20
 3871              		.cfi_offset 5, -16
 3872              		.cfi_offset 6, -12
 3873              		.cfi_offset 7, -8
 3874              		.cfi_offset 14, -4
 3875 0002 DE46     		mov	lr, fp
 3876 0004 5746     		mov	r7, r10
 3877 0006 4E46     		mov	r6, r9
 3878 0008 4546     		mov	r5, r8
 3879 000a E0B5     		push	{r5, r6, r7, lr}
 3880              	.LCFI27:
 3881              		.cfi_def_cfa_offset 36
 3882              		.cfi_offset 8, -36
 3883              		.cfi_offset 9, -32
 3884              		.cfi_offset 10, -28
 3885              		.cfi_offset 11, -24
 3886 000c BDB0     		sub	sp, sp, #244
 3887              	.LCFI28:
 3888              		.cfi_def_cfa_offset 280
 3889 000e 0600     		movs	r6, r0
 3890 0010 0C1E     		subs	r4, r1, #0
  22:alohal/misc/text_transform.cpp ****     if (dec_number == 0){
 3891              		.loc 16 22 5 is_stmt 1 view .LVU955
 3892 0012 08D1     		bne	.L98
  23:alohal/misc/text_transform.cpp ****         return "0";
 3893              		.loc 16 23 9 view .LVU956
 3894              	.LVL353:
 3895              	.LBB3808:
 3896              	.LBI3808:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 3897              		.loc 4 138 7 view .LVU957
 3898              	.LBB3809:
 3899              	.LBI3809:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3900              		.loc 5 80 7 view .LVU958
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3901              		.loc 5 80 7 is_stmt 0 view .LVU959
 3902              	.LBE3809:
 3903              	.LBE3808:
ARM GAS  /tmp/ccEv8ptb.s 			page 363


 3904              	.LBB3810:
 3905              	.LBI3810:
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 3906              		.loc 3 525 7 is_stmt 1 view .LVU960
 3907              	.LBB3811:
 3908              	.LBB3812:
 3909              	.LBI3812:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 3910              		.loc 3 190 7 view .LVU961
 3911              	.LBB3813:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 3912              		.loc 3 193 51 is_stmt 0 view .LVU962
 3913 0014 0300     		movs	r3, r0
 3914 0016 0833     		adds	r3, r3, #8
 3915              	.LVL354:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 3916              		.loc 3 193 51 view .LVU963
 3917              	.LBE3813:
 3918              	.LBE3812:
 3919              	.LBB3814:
 3920              	.LBI3814:
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 3921              		.loc 3 156 2 is_stmt 1 view .LVU964
 3922              	.LBB3815:
 3923              	.LBB3816:
 3924              	.LBI3816:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 3925              		.loc 4 141 7 view .LVU965
 3926              	.LBB3817:
 3927              	.LBI3817:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3928              		.loc 5 83 7 view .LVU966
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3929              		.loc 5 83 7 is_stmt 0 view .LVU967
 3930              	.LBE3817:
 3931              	.LBE3816:
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3932              		.loc 3 157 35 view .LVU968
 3933 0018 0360     		str	r3, [r0]
 3934              	.LVL355:
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 3935              		.loc 3 157 35 view .LVU969
 3936              	.LBE3815:
 3937              	.LBE3814:
 3938              	.LBB3818:
 3939              	.LBI3818:
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 3940              		.loc 2 329 7 is_stmt 1 view .LVU970
 3941              	.LBE3818:
 3942              	.LBE3811:
 3943              	.LBE3810:
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 3944              		.loc 2 332 2 view .LVU971
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 3945              		.loc 2 335 2 view .LVU972
 3946              	.LBB3824:
 3947              	.LBB3823:
ARM GAS  /tmp/ccEv8ptb.s 			page 364


 3948              	.LBB3819:
 3949              	.LBI3819:
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
 3950              		.loc 3 263 9 view .LVU973
 3951              	.LBB3820:
 3952              	.LBB3821:
 3953              	.LBI3821:
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 std::__false_type)
 3954              		.loc 3 243 9 view .LVU974
 3955              	.LBB3822:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 3956              		.loc 3 247 11 is_stmt 0 view .LVU975
 3957 001a BE4A     		ldr	r2, .L189
 3958              	.LVL356:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 3959              		.loc 3 247 11 view .LVU976
 3960 001c 511E     		subs	r1, r2, #1
 3961              	.LVL357:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 3962              		.loc 3 247 11 view .LVU977
 3963 001e 0023     		movs	r3, #0
 3964 0020 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iter
 3965              	.LVL358:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 3966              		.loc 3 247 11 view .LVU978
 3967              	.LBE3822:
 3968              	.LBE3821:
 3969              	.LBE3820:
 3970              	.LBE3819:
 3971              	.LBE3823:
 3972              	.LBE3824:
 3973              	.LBB3825:
 3974              	.LBI3825:
 3975              		.loc 4 153 7 is_stmt 1 view .LVU979
 3976              	.LBB3826:
 3977              	.LBI3826:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3978              		.loc 5 89 7 view .LVU980
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3979              		.loc 5 89 7 is_stmt 0 view .LVU981
 3980 0024 06E2     		b	.L97
 3981              	.LVL359:
 3982              	.L98:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3983              		.loc 5 89 7 view .LVU982
 3984              	.LBE3826:
 3985              	.LBE3825:
  24:alohal/misc/text_transform.cpp ****     }
  25:alohal/misc/text_transform.cpp **** 
  26:alohal/misc/text_transform.cpp ****     string output = "";
 3986              		.loc 16 26 5 is_stmt 1 view .LVU983
 3987              	.LBB3827:
 3988              	.LBI3827:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 3989              		.loc 4 138 7 view .LVU984
 3990              	.LBB3828:
 3991              	.LBI3828:
ARM GAS  /tmp/ccEv8ptb.s 			page 365


  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3992              		.loc 5 80 7 view .LVU985
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 3993              		.loc 5 80 7 is_stmt 0 view .LVU986
 3994              	.LBE3828:
 3995              	.LBE3827:
 3996              	.LBB3829:
 3997              	.LBI3829:
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 3998              		.loc 3 525 7 is_stmt 1 view .LVU987
 3999              	.LBB3830:
 4000              	.LBB3831:
 4001              	.LBI3831:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4002              		.loc 3 190 7 view .LVU988
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4003              		.loc 3 190 7 is_stmt 0 view .LVU989
 4004              	.LBE3831:
 4005              	.LBB3832:
 4006              	.LBI3832:
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 4007              		.loc 3 156 2 is_stmt 1 view .LVU990
 4008              	.LBB3833:
 4009              	.LBB3834:
 4010              	.LBB3835:
 4011              	.LBI3835:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 4012              		.loc 4 141 7 view .LVU991
 4013              	.LBB3836:
 4014              	.LBI3836:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 4015              		.loc 5 83 7 view .LVU992
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 4016              		.loc 5 83 7 is_stmt 0 view .LVU993
 4017              	.LBE3836:
 4018              	.LBE3835:
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4019              		.loc 3 157 35 view .LVU994
 4020 0026 08AB     		add	r3, sp, #32
 4021              	.LVL360:
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4022              		.loc 3 157 35 view .LVU995
 4023 0028 0693     		str	r3, [sp, #24]
 4024              	.LVL361:
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4025              		.loc 3 157 35 view .LVU996
 4026              	.LBE3834:
 4027              	.LBE3833:
 4028              	.LBE3832:
 4029              	.LBB3837:
 4030              	.LBI3837:
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 4031              		.loc 2 329 7 is_stmt 1 view .LVU997
 4032              	.LBE3837:
 4033              	.LBE3830:
 4034              	.LBE3829:
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
ARM GAS  /tmp/ccEv8ptb.s 			page 366


 4035              		.loc 2 332 2 view .LVU998
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       }
 4036              		.loc 2 335 2 view .LVU999
 4037              	.LBB3848:
 4038              	.LBB3846:
 4039              	.LBB3838:
 4040              	.LBI3838:
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
 4041              		.loc 3 263 9 view .LVU1000
 4042              	.LBB3839:
 4043              	.LBB3840:
 4044              	.LBI3840:
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 std::__false_type)
 4045              		.loc 3 243 9 view .LVU1001
 4046              	.LBB3841:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 4047              		.loc 3 247 11 is_stmt 0 view .LVU1002
 4048 002a BB49     		ldr	r1, .L189+4
 4049              	.LVL362:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 4050              		.loc 3 247 11 view .LVU1003
 4051 002c 0023     		movs	r3, #0
 4052 002e 0A00     		movs	r2, r1
 4053 0030 06A8     		add	r0, sp, #24
 4054              	.LVL363:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 4055              		.loc 3 247 11 view .LVU1004
 4056 0032 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iter
 4057              	.LVL364:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 4058              		.loc 3 247 11 view .LVU1005
 4059              	.LBE3841:
 4060              	.LBE3840:
 4061              	.LBE3839:
 4062              	.LBE3838:
 4063              	.LBE3846:
 4064              	.LBE3848:
 4065              	.LBB3849:
 4066              	.LBI3849:
 4067              		.loc 4 153 7 is_stmt 1 view .LVU1006
 4068              	.LBB3850:
 4069              	.LBI3850:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 4070              		.loc 5 89 7 view .LVU1007
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 4071              		.loc 5 89 7 is_stmt 0 view .LVU1008
 4072              	.LBE3850:
 4073              	.LBE3849:
  27:alohal/misc/text_transform.cpp ****     int remaining = 0;
 4074              		.loc 16 27 5 is_stmt 1 view .LVU1009
 4075              	.LBB3851:
 4076              	.LBB3847:
 4077              	.LBB3845:
 4078              	.LBB3844:
 4079              	.LBB3843:
 4080              	.LBB3842:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
ARM GAS  /tmp/ccEv8ptb.s 			page 367


 4081              		.loc 3 247 11 is_stmt 0 view .LVU1010
 4082 0036 B046     		mov	r8, r6
 4083 0038 C1E1     		b	.L162
 4084              	.LVL365:
 4085              	.L109:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 4086              		.loc 3 247 11 view .LVU1011
 4087              	.LBE3842:
 4088              	.LBE3843:
 4089              	.LBE3844:
 4090              	.LBE3845:
 4091              	.LBE3847:
 4092              	.LBE3851:
  28:alohal/misc/text_transform.cpp ****     while (dec_number > 0) {
  29:alohal/misc/text_transform.cpp ****         remaining = dec_number % 16;
  30:alohal/misc/text_transform.cpp ****         if (remaining > 9) {
  31:alohal/misc/text_transform.cpp ****             switch (remaining) {
  32:alohal/misc/text_transform.cpp ****                 case 10: output = "a" + output;
 4093              		.loc 16 32 17 is_stmt 1 view .LVU1012
 4094              		.loc 16 32 26 view .LVU1013
 4095              		.loc 16 32 39 is_stmt 0 view .LVU1014
 4096 003a 06AA     		add	r2, sp, #24
 4097 003c B749     		ldr	r1, .L189+8
 4098              	.LVL366:
 4099              		.loc 16 32 39 view .LVU1015
 4100 003e 0CA8     		add	r0, sp, #48
 4101 0040 FFF7FEFF 		bl	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_
 4102              	.LVL367:
 4103              	.LBB3852:
 4104              	.LBI3852:
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 4105              		.loc 3 732 7 is_stmt 1 view .LVU1016
 4106              	.LBB3853:
 4107              	.LBI3853:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4108              		.loc 3 221 7 view .LVU1017
 4109              	.LBB3854:
 4110              	.LBI3854:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4111              		.loc 3 186 7 view .LVU1018
 4112              	.LBB3855:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4113              		.loc 3 187 28 is_stmt 0 view .LVU1019
 4114 0044 0698     		ldr	r0, [sp, #24]
 4115              	.LVL368:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4116              		.loc 3 187 28 view .LVU1020
 4117              	.LBE3855:
 4118              	.LBE3854:
 4119              	.LBB3856:
 4120              	.LBI3856:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4121              		.loc 3 200 7 is_stmt 1 view .LVU1021
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4122              		.loc 3 200 7 is_stmt 0 view .LVU1022
 4123              	.LBE3856:
 4124              	.LBE3853:
ARM GAS  /tmp/ccEv8ptb.s 			page 368


 4125              	.LBB3857:
 4126              	.LBB3858:
 4127              	.LBI3858:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4128              		.loc 3 221 7 is_stmt 1 view .LVU1023
 4129              	.LBB3859:
 4130              	.LBI3859:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4131              		.loc 3 186 7 view .LVU1024
 4132              	.LBB3860:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4133              		.loc 3 187 28 is_stmt 0 view .LVU1025
 4134 0046 0C99     		ldr	r1, [sp, #48]
 4135              	.LVL369:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4136              		.loc 3 187 28 view .LVU1026
 4137              	.LBE3860:
 4138              	.LBE3859:
 4139              	.LBB3861:
 4140              	.LBI3861:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4141              		.loc 3 200 7 is_stmt 1 view .LVU1027
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4142              		.loc 3 200 7 is_stmt 0 view .LVU1028
 4143              	.LBE3861:
 4144              	.LBE3858:
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 4145              		.loc 3 747 2 view .LVU1029
 4146 0048 0EAB     		add	r3, sp, #56
 4147 004a 9942     		cmp	r1, r3
 4148 004c 1BD0     		beq	.L173
 4149              	.LVL370:
 4150              	.LBB3862:
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 4151              		.loc 3 761 6 view .LVU1030
 4152 004e 08AB     		add	r3, sp, #32
 4153 0050 9842     		cmp	r0, r3
 4154 0052 2AD0     		beq	.L166
 4155              	.LVL371:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 4156              		.loc 3 767 7 view .LVU1031
 4157 0054 089B     		ldr	r3, [sp, #32]
 4158 0056 0393     		str	r3, [sp, #12]
 4159              	.LVL372:
 4160              	.L114:
 4161              	.LBB3863:
 4162              	.LBI3863:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4163              		.loc 3 178 7 is_stmt 1 view .LVU1032
 4164              	.LBB3864:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4165              		.loc 3 179 9 is_stmt 0 view .LVU1033
 4166 0058 0691     		str	r1, [sp, #24]
 4167              	.LVL373:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4168              		.loc 3 179 9 view .LVU1034
 4169              	.LBE3864:
ARM GAS  /tmp/ccEv8ptb.s 			page 369


 4170              	.LBE3863:
 4171              	.LBB3865:
 4172              	.LBI3865:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 4173              		.loc 3 936 7 is_stmt 1 view .LVU1035
 4174              	.LBB3866:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4175              		.loc 3 937 16 is_stmt 0 view .LVU1036
 4176 005a 0D9B     		ldr	r3, [sp, #52]
 4177              	.LVL374:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4178              		.loc 3 937 16 view .LVU1037
 4179              	.LBE3866:
 4180              	.LBE3865:
 4181              	.LBB3867:
 4182              	.LBI3867:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4183              		.loc 3 182 7 is_stmt 1 view .LVU1038
 4184              	.LBB3868:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4185              		.loc 3 183 9 is_stmt 0 view .LVU1039
 4186 005c 0793     		str	r3, [sp, #28]
 4187              	.LVL375:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4188              		.loc 3 183 9 view .LVU1040
 4189              	.LBE3868:
 4190              	.LBE3867:
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (__data)
 4191              		.loc 3 775 6 view .LVU1041
 4192 005e 0E9B     		ldr	r3, [sp, #56]
 4193 0060 0293     		str	r3, [sp, #8]
 4194              	.LVL376:
 4195              	.LBB3869:
 4196              	.LBI3869:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 4197              		.loc 3 210 7 is_stmt 1 view .LVU1042
 4198              	.LBB3870:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4199              		.loc 3 211 9 is_stmt 0 view .LVU1043
 4200 0062 0893     		str	r3, [sp, #32]
 4201              	.LVL377:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4202              		.loc 3 211 9 view .LVU1044
 4203              	.LBE3870:
 4204              	.LBE3869:
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 4205              		.loc 3 776 6 view .LVU1045
 4206 0064 0028     		cmp	r0, #0
 4207 0066 22D0     		beq	.L115
 4208              	.LVL378:
 4209              	.LBB3871:
 4210              	.LBI3871:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4211              		.loc 3 178 7 is_stmt 1 view .LVU1046
 4212              	.LBB3872:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4213              		.loc 3 179 9 is_stmt 0 view .LVU1047
ARM GAS  /tmp/ccEv8ptb.s 			page 370


 4214 0068 0C90     		str	r0, [sp, #48]
 4215              	.LVL379:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4216              		.loc 3 179 9 view .LVU1048
 4217              	.LBE3872:
 4218              	.LBE3871:
 4219              	.LBB3873:
 4220              	.LBI3873:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 4221              		.loc 3 210 7 is_stmt 1 view .LVU1049
 4222              	.LBB3874:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4223              		.loc 3 211 9 is_stmt 0 view .LVU1050
 4224 006a 039B     		ldr	r3, [sp, #12]
 4225 006c 0E93     		str	r3, [sp, #56]
 4226              	.LVL380:
 4227              	.L113:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4228              		.loc 3 211 9 view .LVU1051
 4229              	.LBE3874:
 4230              	.LBE3873:
 4231              	.LBE3862:
 4232              	.LBE3857:
 4233              	.LBB3897:
 4234              	.LBI3897:
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 4235              		.loc 3 1023 7 is_stmt 1 view .LVU1052
 4236              	.LBB3898:
 4237              	.LBI3898:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4238              		.loc 3 214 7 view .LVU1053
 4239              	.LBB3899:
 4240              	.LBI3899:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4241              		.loc 3 182 7 view .LVU1054
 4242              	.LBB3900:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4243              		.loc 3 183 9 is_stmt 0 view .LVU1055
 4244 006e 0023     		movs	r3, #0
 4245 0070 0D93     		str	r3, [sp, #52]
 4246              	.LVL381:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4247              		.loc 3 183 9 view .LVU1056
 4248              	.LBE3900:
 4249              	.LBE3899:
 4250              	.LBB3901:
 4251              	.LBI3901:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4252              		.loc 3 186 7 is_stmt 1 view .LVU1057
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4253              		.loc 3 186 7 is_stmt 0 view .LVU1058
 4254              	.LBE3901:
 4255              	.LBB3902:
 4256              	.LBI3902:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 4257              		.loc 2 299 7 is_stmt 1 view .LVU1059
 4258              	.LBB3903:
ARM GAS  /tmp/ccEv8ptb.s 			page 371


 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4259              		.loc 2 300 9 view .LVU1060
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4260              		.loc 2 300 14 is_stmt 0 view .LVU1061
 4261 0072 0C9A     		ldr	r2, [sp, #48]
 4262 0074 1370     		strb	r3, [r2]
 4263              	.LVL382:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4264              		.loc 2 300 14 view .LVU1062
 4265              	.LBE3903:
 4266              	.LBE3902:
 4267              	.LBE3898:
 4268              	.LBE3897:
 4269              	.LBE3852:
 4270              	.LBB3905:
 4271              	.LBI3905:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 4272              		.loc 3 657 7 is_stmt 1 view .LVU1063
 4273              	.LBB3906:
 4274              	.LBI3906:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4275              		.loc 3 229 7 view .LVU1064
 4276              	.LBB3907:
 4277              	.LBB3908:
 4278              	.LBI3908:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4279              		.loc 3 221 7 view .LVU1065
 4280              	.LBB3909:
 4281              	.LBI3909:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4282              		.loc 3 186 7 view .LVU1066
 4283              	.LBB3910:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4284              		.loc 3 187 28 is_stmt 0 view .LVU1067
 4285 0076 0C98     		ldr	r0, [sp, #48]
 4286              	.LVL383:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4287              		.loc 3 187 28 view .LVU1068
 4288              	.LBE3910:
 4289              	.LBE3909:
 4290              	.LBB3911:
 4291              	.LBI3911:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4292              		.loc 3 200 7 is_stmt 1 view .LVU1069
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4293              		.loc 3 200 7 is_stmt 0 view .LVU1070
 4294              	.LBE3911:
 4295              	.LBE3908:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4296              		.loc 3 231 2 view .LVU1071
 4297 0078 0EAB     		add	r3, sp, #56
 4298 007a 9842     		cmp	r0, r3
 4299 007c 00D1     		bne	.LCB4731
 4300 007e 99E1     		b	.L102	@long jump
 4301              	.LCB4731:
 4302              	.LVL384:
 4303              	.LBB3912:
ARM GAS  /tmp/ccEv8ptb.s 			page 372


 4304              	.LBI3912:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 4305              		.loc 3 236 7 is_stmt 1 view .LVU1072
 4306              	.LBB3913:
 4307              	.LBB3914:
 4308              	.LBI3914:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 4309              		.loc 8 469 7 view .LVU1073
 4310              	.LBB3915:
 4311              	.LBI3915:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 4312              		.loc 5 119 7 view .LVU1074
 4313              	.LBB3916:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 4314              		.loc 5 128 19 is_stmt 0 view .LVU1075
 4315 0080 FFF7FEFF 		bl	_ZdlPv
 4316              	.LVL385:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 4317              		.loc 5 128 19 view .LVU1076
 4318              	.LBE3916:
 4319              	.LBE3915:
 4320              	.LBE3914:
 4321              	.LBE3913:
 4322              	.LBE3912:
 4323              	.LBE3907:
 4324              	.LBE3906:
 4325              	.LBB3917:
 4326              	.LBI3917:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4327              		.loc 3 150 14 is_stmt 1 view .LVU1077
 4328              	.LBB3918:
 4329              	.LBI3918:
 4330              		.loc 4 153 7 view .LVU1078
 4331              	.LBB3919:
 4332              	.LBI3919:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 4333              		.loc 5 89 7 view .LVU1079
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 4334              		.loc 5 89 7 is_stmt 0 view .LVU1080
 4335              	.LBE3919:
 4336              	.LBE3918:
 4337              	.LBE3917:
 4338              	.LBE3905:
  33:alohal/misc/text_transform.cpp ****                     break;
 4339              		.loc 16 33 21 is_stmt 1 view .LVU1081
 4340 0084 96E1     		b	.L102
 4341              	.LVL386:
 4342              	.L173:
 4343              	.LBB3920:
 4344              	.LBB3904:
 4345              	.LBB3877:
 4346              	.LBI3877:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 4347              		.loc 3 930 7 view .LVU1082
 4348              	.LBB3878:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4349              		.loc 3 931 16 is_stmt 0 view .LVU1083
ARM GAS  /tmp/ccEv8ptb.s 			page 373


 4350 0086 0D9A     		ldr	r2, [sp, #52]
 4351              	.LVL387:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4352              		.loc 3 931 16 view .LVU1084
 4353              	.LBE3878:
 4354              	.LBE3877:
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 4355              		.loc 3 750 6 view .LVU1085
 4356 0088 002A     		cmp	r2, #0
 4357 008a 03D0     		beq	.L111
 4358              	.LVL388:
 4359              	.LBB3879:
 4360              	.LBI3879:
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4361              		.loc 3 346 7 is_stmt 1 view .LVU1086
 4362              	.LBB3880:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 4363              		.loc 3 348 2 is_stmt 0 view .LVU1087
 4364 008c 012A     		cmp	r2, #1
 4365 008e 09D0     		beq	.L174
 4366              	.LVL389:
 4367              	.LBB3881:
 4368              	.LBI3881:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 4369              		.loc 2 361 7 is_stmt 1 view .LVU1088
 4370              	.LBB3882:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 4371              		.loc 2 363 2 view .LVU1089
 4372              		.loc 2 365 2 view .LVU1090
 4373              		.loc 2 365 49 is_stmt 0 view .LVU1091
 4374 0090 FFF7FEFF 		bl	memcpy
 4375              	.LVL390:
 4376              	.L111:
 4377              		.loc 2 365 49 view .LVU1092
 4378              	.LBE3882:
 4379              	.LBE3881:
 4380              	.LBE3880:
 4381              	.LBE3879:
 4382              	.LBB3886:
 4383              	.LBI3886:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 4384              		.loc 3 930 7 is_stmt 1 view .LVU1093
 4385              	.LBB3887:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4386              		.loc 3 931 16 is_stmt 0 view .LVU1094
 4387 0094 0D9B     		ldr	r3, [sp, #52]
 4388              	.LVL391:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4389              		.loc 3 931 16 view .LVU1095
 4390              	.LBE3887:
 4391              	.LBE3886:
 4392              	.LBB3888:
 4393              	.LBI3888:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4394              		.loc 3 214 7 is_stmt 1 view .LVU1096
 4395              	.LBB3889:
 4396              	.LBB3890:
ARM GAS  /tmp/ccEv8ptb.s 			page 374


 4397              	.LBI3890:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4398              		.loc 3 182 7 view .LVU1097
 4399              	.LBB3891:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4400              		.loc 3 183 9 is_stmt 0 view .LVU1098
 4401 0096 0793     		str	r3, [sp, #28]
 4402              	.LVL392:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4403              		.loc 3 183 9 view .LVU1099
 4404              	.LBE3891:
 4405              	.LBE3890:
 4406              	.LBB3892:
 4407              	.LBI3892:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4408              		.loc 3 186 7 is_stmt 1 view .LVU1100
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4409              		.loc 3 186 7 is_stmt 0 view .LVU1101
 4410              	.LBE3892:
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 4411              		.loc 3 217 31 view .LVU1102
 4412 0098 069A     		ldr	r2, [sp, #24]
 4413 009a 9446     		mov	ip, r2
 4414 009c 6344     		add	r3, r3, ip
 4415              	.LVL393:
 4416              	.LBB3893:
 4417              	.LBI3893:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 4418              		.loc 2 299 7 is_stmt 1 view .LVU1103
 4419              	.LBB3894:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4420              		.loc 2 300 9 view .LVU1104
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4421              		.loc 2 300 14 is_stmt 0 view .LVU1105
 4422 009e 0022     		movs	r2, #0
 4423 00a0 1A70     		strb	r2, [r3]
 4424              	.LVL394:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4425              		.loc 2 300 14 view .LVU1106
 4426              	.LBE3894:
 4427              	.LBE3893:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4428              		.loc 3 218 7 view .LVU1107
 4429 00a2 E4E7     		b	.L113
 4430              	.LVL395:
 4431              	.L174:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4432              		.loc 3 218 7 view .LVU1108
 4433              	.LBE3889:
 4434              	.LBE3888:
 4435              	.LBB3895:
 4436              	.LBB3885:
 4437              	.LBB3883:
 4438              	.LBI3883:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 4439              		.loc 2 299 7 is_stmt 1 view .LVU1109
 4440              	.LBB3884:
ARM GAS  /tmp/ccEv8ptb.s 			page 375


 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4441              		.loc 2 300 9 view .LVU1110
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4442              		.loc 2 300 16 is_stmt 0 view .LVU1111
 4443 00a4 0B78     		ldrb	r3, [r1]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4444              		.loc 2 300 14 view .LVU1112
 4445 00a6 0370     		strb	r3, [r0]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4446              		.loc 2 300 22 view .LVU1113
 4447 00a8 F4E7     		b	.L111
 4448              	.LVL396:
 4449              	.L166:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4450              		.loc 2 300 22 view .LVU1114
 4451              	.LBE3884:
 4452              	.LBE3883:
 4453              	.LBE3885:
 4454              	.LBE3895:
 4455              	.LBB3896:
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    size_type __capacity;
 4456              		.loc 3 759 14 view .LVU1115
 4457 00aa 0020     		movs	r0, #0
 4458 00ac D4E7     		b	.L114
 4459              	.LVL397:
 4460              	.L115:
 4461              	.LBB3875:
 4462              	.LBI3875:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4463              		.loc 3 178 7 is_stmt 1 view .LVU1116
 4464              	.LBB3876:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4465              		.loc 3 179 9 is_stmt 0 view .LVU1117
 4466 00ae 0EAB     		add	r3, sp, #56
 4467              	.LVL398:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4468              		.loc 3 179 9 view .LVU1118
 4469 00b0 0C93     		str	r3, [sp, #48]
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4470              		.loc 3 179 33 view .LVU1119
 4471 00b2 DCE7     		b	.L113
 4472              	.LVL399:
 4473              	.L108:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4474              		.loc 3 179 33 view .LVU1120
 4475              	.LBE3876:
 4476              	.LBE3875:
 4477              	.LBE3896:
 4478              	.LBE3904:
 4479              	.LBE3920:
  34:alohal/misc/text_transform.cpp ****                 case 11: output = "b" + output;
 4480              		.loc 16 34 17 is_stmt 1 view .LVU1121
 4481              		.loc 16 34 26 view .LVU1122
 4482              		.loc 16 34 39 is_stmt 0 view .LVU1123
 4483 00b4 06AA     		add	r2, sp, #24
 4484 00b6 9A49     		ldr	r1, .L189+12
 4485              	.LVL400:
ARM GAS  /tmp/ccEv8ptb.s 			page 376


 4486              		.loc 16 34 39 view .LVU1124
 4487 00b8 12A8     		add	r0, sp, #72
 4488 00ba FFF7FEFF 		bl	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_
 4489              	.LVL401:
 4490              	.LBB3921:
 4491              	.LBI3921:
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 4492              		.loc 3 732 7 is_stmt 1 view .LVU1125
 4493              	.LBB3922:
 4494              	.LBI3922:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4495              		.loc 3 221 7 view .LVU1126
 4496              	.LBB3923:
 4497              	.LBI3923:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4498              		.loc 3 186 7 view .LVU1127
 4499              	.LBB3924:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4500              		.loc 3 187 28 is_stmt 0 view .LVU1128
 4501 00be 0698     		ldr	r0, [sp, #24]
 4502              	.LVL402:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4503              		.loc 3 187 28 view .LVU1129
 4504              	.LBE3924:
 4505              	.LBE3923:
 4506              	.LBB3925:
 4507              	.LBI3925:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4508              		.loc 3 200 7 is_stmt 1 view .LVU1130
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4509              		.loc 3 200 7 is_stmt 0 view .LVU1131
 4510              	.LBE3925:
 4511              	.LBE3922:
 4512              	.LBB3926:
 4513              	.LBB3927:
 4514              	.LBI3927:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4515              		.loc 3 221 7 is_stmt 1 view .LVU1132
 4516              	.LBB3928:
 4517              	.LBI3928:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4518              		.loc 3 186 7 view .LVU1133
 4519              	.LBB3929:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4520              		.loc 3 187 28 is_stmt 0 view .LVU1134
 4521 00c0 1299     		ldr	r1, [sp, #72]
 4522              	.LVL403:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4523              		.loc 3 187 28 view .LVU1135
 4524              	.LBE3929:
 4525              	.LBE3928:
 4526              	.LBB3930:
 4527              	.LBI3930:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4528              		.loc 3 200 7 is_stmt 1 view .LVU1136
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4529              		.loc 3 200 7 is_stmt 0 view .LVU1137
ARM GAS  /tmp/ccEv8ptb.s 			page 377


 4530              	.LBE3930:
 4531              	.LBE3927:
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 4532              		.loc 3 747 2 view .LVU1138
 4533 00c2 14AB     		add	r3, sp, #80
 4534 00c4 9942     		cmp	r1, r3
 4535 00c6 1BD0     		beq	.L175
 4536              	.LVL404:
 4537              	.LBB3931:
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 4538              		.loc 3 761 6 view .LVU1139
 4539 00c8 08AB     		add	r3, sp, #32
 4540 00ca 9842     		cmp	r0, r3
 4541 00cc 2AD0     		beq	.L167
 4542              	.LVL405:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 4543              		.loc 3 767 7 view .LVU1140
 4544 00ce 089B     		ldr	r3, [sp, #32]
 4545 00d0 0493     		str	r3, [sp, #16]
 4546              	.LVL406:
 4547              	.L121:
 4548              	.LBB3932:
 4549              	.LBI3932:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4550              		.loc 3 178 7 is_stmt 1 view .LVU1141
 4551              	.LBB3933:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4552              		.loc 3 179 9 is_stmt 0 view .LVU1142
 4553 00d2 0691     		str	r1, [sp, #24]
 4554              	.LVL407:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4555              		.loc 3 179 9 view .LVU1143
 4556              	.LBE3933:
 4557              	.LBE3932:
 4558              	.LBB3934:
 4559              	.LBI3934:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 4560              		.loc 3 936 7 is_stmt 1 view .LVU1144
 4561              	.LBB3935:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4562              		.loc 3 937 16 is_stmt 0 view .LVU1145
 4563 00d4 139B     		ldr	r3, [sp, #76]
 4564              	.LVL408:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4565              		.loc 3 937 16 view .LVU1146
 4566              	.LBE3935:
 4567              	.LBE3934:
 4568              	.LBB3936:
 4569              	.LBI3936:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4570              		.loc 3 182 7 is_stmt 1 view .LVU1147
 4571              	.LBB3937:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4572              		.loc 3 183 9 is_stmt 0 view .LVU1148
 4573 00d6 0793     		str	r3, [sp, #28]
 4574              	.LVL409:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 378


 4575              		.loc 3 183 9 view .LVU1149
 4576              	.LBE3937:
 4577              	.LBE3936:
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (__data)
 4578              		.loc 3 775 6 view .LVU1150
 4579 00d8 149B     		ldr	r3, [sp, #80]
 4580 00da 0293     		str	r3, [sp, #8]
 4581              	.LVL410:
 4582              	.LBB3938:
 4583              	.LBI3938:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 4584              		.loc 3 210 7 is_stmt 1 view .LVU1151
 4585              	.LBB3939:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4586              		.loc 3 211 9 is_stmt 0 view .LVU1152
 4587 00dc 0893     		str	r3, [sp, #32]
 4588              	.LVL411:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4589              		.loc 3 211 9 view .LVU1153
 4590              	.LBE3939:
 4591              	.LBE3938:
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 4592              		.loc 3 776 6 view .LVU1154
 4593 00de 0028     		cmp	r0, #0
 4594 00e0 22D0     		beq	.L122
 4595              	.LVL412:
 4596              	.LBB3940:
 4597              	.LBI3940:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4598              		.loc 3 178 7 is_stmt 1 view .LVU1155
 4599              	.LBB3941:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4600              		.loc 3 179 9 is_stmt 0 view .LVU1156
 4601 00e2 1290     		str	r0, [sp, #72]
 4602              	.LVL413:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4603              		.loc 3 179 9 view .LVU1157
 4604              	.LBE3941:
 4605              	.LBE3940:
 4606              	.LBB3942:
 4607              	.LBI3942:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 4608              		.loc 3 210 7 is_stmt 1 view .LVU1158
 4609              	.LBB3943:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4610              		.loc 3 211 9 is_stmt 0 view .LVU1159
 4611 00e4 049B     		ldr	r3, [sp, #16]
 4612 00e6 1493     		str	r3, [sp, #80]
 4613              	.LVL414:
 4614              	.L120:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4615              		.loc 3 211 9 view .LVU1160
 4616              	.LBE3943:
 4617              	.LBE3942:
 4618              	.LBE3931:
 4619              	.LBE3926:
 4620              	.LBB3966:
ARM GAS  /tmp/ccEv8ptb.s 			page 379


 4621              	.LBI3966:
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 4622              		.loc 3 1023 7 is_stmt 1 view .LVU1161
 4623              	.LBB3967:
 4624              	.LBI3967:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4625              		.loc 3 214 7 view .LVU1162
 4626              	.LBB3968:
 4627              	.LBI3968:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4628              		.loc 3 182 7 view .LVU1163
 4629              	.LBB3969:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4630              		.loc 3 183 9 is_stmt 0 view .LVU1164
 4631 00e8 0023     		movs	r3, #0
 4632 00ea 1393     		str	r3, [sp, #76]
 4633              	.LVL415:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4634              		.loc 3 183 9 view .LVU1165
 4635              	.LBE3969:
 4636              	.LBE3968:
 4637              	.LBB3970:
 4638              	.LBI3970:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4639              		.loc 3 186 7 is_stmt 1 view .LVU1166
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4640              		.loc 3 186 7 is_stmt 0 view .LVU1167
 4641              	.LBE3970:
 4642              	.LBB3971:
 4643              	.LBI3971:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 4644              		.loc 2 299 7 is_stmt 1 view .LVU1168
 4645              	.LBB3972:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4646              		.loc 2 300 9 view .LVU1169
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4647              		.loc 2 300 14 is_stmt 0 view .LVU1170
 4648 00ec 129A     		ldr	r2, [sp, #72]
 4649 00ee 1370     		strb	r3, [r2]
 4650              	.LVL416:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4651              		.loc 2 300 14 view .LVU1171
 4652              	.LBE3972:
 4653              	.LBE3971:
 4654              	.LBE3967:
 4655              	.LBE3966:
 4656              	.LBE3921:
 4657              	.LBB3974:
 4658              	.LBI3974:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 4659              		.loc 3 657 7 is_stmt 1 view .LVU1172
 4660              	.LBB3975:
 4661              	.LBI3975:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4662              		.loc 3 229 7 view .LVU1173
 4663              	.LBB3976:
 4664              	.LBB3977:
ARM GAS  /tmp/ccEv8ptb.s 			page 380


 4665              	.LBI3977:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4666              		.loc 3 221 7 view .LVU1174
 4667              	.LBB3978:
 4668              	.LBI3978:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4669              		.loc 3 186 7 view .LVU1175
 4670              	.LBB3979:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4671              		.loc 3 187 28 is_stmt 0 view .LVU1176
 4672 00f0 1298     		ldr	r0, [sp, #72]
 4673              	.LVL417:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4674              		.loc 3 187 28 view .LVU1177
 4675              	.LBE3979:
 4676              	.LBE3978:
 4677              	.LBB3980:
 4678              	.LBI3980:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4679              		.loc 3 200 7 is_stmt 1 view .LVU1178
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4680              		.loc 3 200 7 is_stmt 0 view .LVU1179
 4681              	.LBE3980:
 4682              	.LBE3977:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 4683              		.loc 3 231 2 view .LVU1180
 4684 00f2 14AB     		add	r3, sp, #80
 4685 00f4 9842     		cmp	r0, r3
 4686 00f6 00D1     		bne	.LCB5165
 4687 00f8 5CE1     		b	.L102	@long jump
 4688              	.LCB5165:
 4689              	.LVL418:
 4690              	.LBB3981:
 4691              	.LBI3981:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 4692              		.loc 3 236 7 is_stmt 1 view .LVU1181
 4693              	.LBB3982:
 4694              	.LBB3983:
 4695              	.LBI3983:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 4696              		.loc 8 469 7 view .LVU1182
 4697              	.LBB3984:
 4698              	.LBI3984:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 4699              		.loc 5 119 7 view .LVU1183
 4700              	.LBB3985:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 4701              		.loc 5 128 19 is_stmt 0 view .LVU1184
 4702 00fa FFF7FEFF 		bl	_ZdlPv
 4703              	.LVL419:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 4704              		.loc 5 128 19 view .LVU1185
 4705              	.LBE3985:
 4706              	.LBE3984:
 4707              	.LBE3983:
 4708              	.LBE3982:
 4709              	.LBE3981:
ARM GAS  /tmp/ccEv8ptb.s 			page 381


 4710              	.LBE3976:
 4711              	.LBE3975:
 4712              	.LBB3986:
 4713              	.LBI3986:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4714              		.loc 3 150 14 is_stmt 1 view .LVU1186
 4715              	.LBB3987:
 4716              	.LBI3987:
 4717              		.loc 4 153 7 view .LVU1187
 4718              	.LBB3988:
 4719              	.LBI3988:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 4720              		.loc 5 89 7 view .LVU1188
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 4721              		.loc 5 89 7 is_stmt 0 view .LVU1189
 4722              	.LBE3988:
 4723              	.LBE3987:
 4724              	.LBE3986:
 4725              	.LBE3974:
  35:alohal/misc/text_transform.cpp ****                     break;
 4726              		.loc 16 35 21 is_stmt 1 view .LVU1190
 4727 00fe 59E1     		b	.L102
 4728              	.LVL420:
 4729              	.L175:
 4730              	.LBB3989:
 4731              	.LBB3973:
 4732              	.LBB3946:
 4733              	.LBI3946:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 4734              		.loc 3 930 7 view .LVU1191
 4735              	.LBB3947:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4736              		.loc 3 931 16 is_stmt 0 view .LVU1192
 4737 0100 139A     		ldr	r2, [sp, #76]
 4738              	.LVL421:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4739              		.loc 3 931 16 view .LVU1193
 4740              	.LBE3947:
 4741              	.LBE3946:
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 4742              		.loc 3 750 6 view .LVU1194
 4743 0102 002A     		cmp	r2, #0
 4744 0104 03D0     		beq	.L118
 4745              	.LVL422:
 4746              	.LBB3948:
 4747              	.LBI3948:
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4748              		.loc 3 346 7 is_stmt 1 view .LVU1195
 4749              	.LBB3949:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 4750              		.loc 3 348 2 is_stmt 0 view .LVU1196
 4751 0106 012A     		cmp	r2, #1
 4752 0108 09D0     		beq	.L176
 4753              	.LVL423:
 4754              	.LBB3950:
 4755              	.LBI3950:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 382


 4756              		.loc 2 361 7 is_stmt 1 view .LVU1197
 4757              	.LBB3951:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 4758              		.loc 2 363 2 view .LVU1198
 4759              		.loc 2 365 2 view .LVU1199
 4760              		.loc 2 365 49 is_stmt 0 view .LVU1200
 4761 010a FFF7FEFF 		bl	memcpy
 4762              	.LVL424:
 4763              	.L118:
 4764              		.loc 2 365 49 view .LVU1201
 4765              	.LBE3951:
 4766              	.LBE3950:
 4767              	.LBE3949:
 4768              	.LBE3948:
 4769              	.LBB3955:
 4770              	.LBI3955:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 4771              		.loc 3 930 7 is_stmt 1 view .LVU1202
 4772              	.LBB3956:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4773              		.loc 3 931 16 is_stmt 0 view .LVU1203
 4774 010e 139B     		ldr	r3, [sp, #76]
 4775              	.LVL425:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4776              		.loc 3 931 16 view .LVU1204
 4777              	.LBE3956:
 4778              	.LBE3955:
 4779              	.LBB3957:
 4780              	.LBI3957:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4781              		.loc 3 214 7 is_stmt 1 view .LVU1205
 4782              	.LBB3958:
 4783              	.LBB3959:
 4784              	.LBI3959:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4785              		.loc 3 182 7 view .LVU1206
 4786              	.LBB3960:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4787              		.loc 3 183 9 is_stmt 0 view .LVU1207
 4788 0110 0793     		str	r3, [sp, #28]
 4789              	.LVL426:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4790              		.loc 3 183 9 view .LVU1208
 4791              	.LBE3960:
 4792              	.LBE3959:
 4793              	.LBB3961:
 4794              	.LBI3961:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4795              		.loc 3 186 7 is_stmt 1 view .LVU1209
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4796              		.loc 3 186 7 is_stmt 0 view .LVU1210
 4797              	.LBE3961:
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 4798              		.loc 3 217 31 view .LVU1211
 4799 0112 069A     		ldr	r2, [sp, #24]
 4800 0114 9446     		mov	ip, r2
 4801 0116 6344     		add	r3, r3, ip
ARM GAS  /tmp/ccEv8ptb.s 			page 383


 4802              	.LVL427:
 4803              	.LBB3962:
 4804              	.LBI3962:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 4805              		.loc 2 299 7 is_stmt 1 view .LVU1212
 4806              	.LBB3963:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4807              		.loc 2 300 9 view .LVU1213
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4808              		.loc 2 300 14 is_stmt 0 view .LVU1214
 4809 0118 0022     		movs	r2, #0
 4810 011a 1A70     		strb	r2, [r3]
 4811              	.LVL428:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4812              		.loc 2 300 14 view .LVU1215
 4813              	.LBE3963:
 4814              	.LBE3962:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4815              		.loc 3 218 7 view .LVU1216
 4816 011c E4E7     		b	.L120
 4817              	.LVL429:
 4818              	.L176:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4819              		.loc 3 218 7 view .LVU1217
 4820              	.LBE3958:
 4821              	.LBE3957:
 4822              	.LBB3964:
 4823              	.LBB3954:
 4824              	.LBB3952:
 4825              	.LBI3952:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 4826              		.loc 2 299 7 is_stmt 1 view .LVU1218
 4827              	.LBB3953:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4828              		.loc 2 300 9 view .LVU1219
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4829              		.loc 2 300 16 is_stmt 0 view .LVU1220
 4830 011e 0B78     		ldrb	r3, [r1]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4831              		.loc 2 300 14 view .LVU1221
 4832 0120 0370     		strb	r3, [r0]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4833              		.loc 2 300 22 view .LVU1222
 4834 0122 F4E7     		b	.L118
 4835              	.LVL430:
 4836              	.L167:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 4837              		.loc 2 300 22 view .LVU1223
 4838              	.LBE3953:
 4839              	.LBE3952:
 4840              	.LBE3954:
 4841              	.LBE3964:
 4842              	.LBB3965:
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    size_type __capacity;
 4843              		.loc 3 759 14 view .LVU1224
 4844 0124 0020     		movs	r0, #0
 4845 0126 D4E7     		b	.L121
ARM GAS  /tmp/ccEv8ptb.s 			page 384


 4846              	.LVL431:
 4847              	.L122:
 4848              	.LBB3944:
 4849              	.LBI3944:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4850              		.loc 3 178 7 is_stmt 1 view .LVU1225
 4851              	.LBB3945:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4852              		.loc 3 179 9 is_stmt 0 view .LVU1226
 4853 0128 14AB     		add	r3, sp, #80
 4854              	.LVL432:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4855              		.loc 3 179 9 view .LVU1227
 4856 012a 1293     		str	r3, [sp, #72]
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4857              		.loc 3 179 33 view .LVU1228
 4858 012c DCE7     		b	.L120
 4859              	.LVL433:
 4860              	.L107:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4861              		.loc 3 179 33 view .LVU1229
 4862              	.LBE3945:
 4863              	.LBE3944:
 4864              	.LBE3965:
 4865              	.LBE3973:
 4866              	.LBE3989:
  36:alohal/misc/text_transform.cpp ****                 case 12: output = "c" + output;
 4867              		.loc 16 36 17 is_stmt 1 view .LVU1230
 4868              		.loc 16 36 26 view .LVU1231
 4869              		.loc 16 36 39 is_stmt 0 view .LVU1232
 4870 012e 06AA     		add	r2, sp, #24
 4871 0130 7C49     		ldr	r1, .L189+16
 4872              	.LVL434:
 4873              		.loc 16 36 39 view .LVU1233
 4874 0132 18A8     		add	r0, sp, #96
 4875 0134 FFF7FEFF 		bl	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_
 4876              	.LVL435:
 4877              	.LBB3990:
 4878              	.LBI3990:
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 4879              		.loc 3 732 7 is_stmt 1 view .LVU1234
 4880              	.LBB3991:
 4881              	.LBI3991:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4882              		.loc 3 221 7 view .LVU1235
 4883              	.LBB3992:
 4884              	.LBI3992:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4885              		.loc 3 186 7 view .LVU1236
 4886              	.LBB3993:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4887              		.loc 3 187 28 is_stmt 0 view .LVU1237
 4888 0138 0698     		ldr	r0, [sp, #24]
 4889              	.LVL436:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4890              		.loc 3 187 28 view .LVU1238
 4891              	.LBE3993:
ARM GAS  /tmp/ccEv8ptb.s 			page 385


 4892              	.LBE3992:
 4893              	.LBB3994:
 4894              	.LBI3994:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4895              		.loc 3 200 7 is_stmt 1 view .LVU1239
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4896              		.loc 3 200 7 is_stmt 0 view .LVU1240
 4897              	.LBE3994:
 4898              	.LBE3991:
 4899              	.LBB3995:
 4900              	.LBB3996:
 4901              	.LBI3996:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4902              		.loc 3 221 7 is_stmt 1 view .LVU1241
 4903              	.LBB3997:
 4904              	.LBI3997:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4905              		.loc 3 186 7 view .LVU1242
 4906              	.LBB3998:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4907              		.loc 3 187 28 is_stmt 0 view .LVU1243
 4908 013a 1899     		ldr	r1, [sp, #96]
 4909              	.LVL437:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4910              		.loc 3 187 28 view .LVU1244
 4911              	.LBE3998:
 4912              	.LBE3997:
 4913              	.LBB3999:
 4914              	.LBI3999:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4915              		.loc 3 200 7 is_stmt 1 view .LVU1245
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 4916              		.loc 3 200 7 is_stmt 0 view .LVU1246
 4917              	.LBE3999:
 4918              	.LBE3996:
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 4919              		.loc 3 747 2 view .LVU1247
 4920 013c 1AAB     		add	r3, sp, #104
 4921 013e 9942     		cmp	r1, r3
 4922 0140 1BD0     		beq	.L177
 4923              	.LVL438:
 4924              	.LBB4000:
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 4925              		.loc 3 761 6 view .LVU1248
 4926 0142 08AB     		add	r3, sp, #32
 4927 0144 9842     		cmp	r0, r3
 4928 0146 2AD0     		beq	.L168
 4929              	.LVL439:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 4930              		.loc 3 767 7 view .LVU1249
 4931 0148 089B     		ldr	r3, [sp, #32]
 4932 014a 0593     		str	r3, [sp, #20]
 4933              	.LVL440:
 4934              	.L128:
 4935              	.LBB4001:
 4936              	.LBI4001:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
ARM GAS  /tmp/ccEv8ptb.s 			page 386


 4937              		.loc 3 178 7 is_stmt 1 view .LVU1250
 4938              	.LBB4002:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4939              		.loc 3 179 9 is_stmt 0 view .LVU1251
 4940 014c 0691     		str	r1, [sp, #24]
 4941              	.LVL441:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4942              		.loc 3 179 9 view .LVU1252
 4943              	.LBE4002:
 4944              	.LBE4001:
 4945              	.LBB4003:
 4946              	.LBI4003:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 4947              		.loc 3 936 7 is_stmt 1 view .LVU1253
 4948              	.LBB4004:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4949              		.loc 3 937 16 is_stmt 0 view .LVU1254
 4950 014e 199B     		ldr	r3, [sp, #100]
 4951              	.LVL442:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4952              		.loc 3 937 16 view .LVU1255
 4953              	.LBE4004:
 4954              	.LBE4003:
 4955              	.LBB4005:
 4956              	.LBI4005:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4957              		.loc 3 182 7 is_stmt 1 view .LVU1256
 4958              	.LBB4006:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4959              		.loc 3 183 9 is_stmt 0 view .LVU1257
 4960 0150 0793     		str	r3, [sp, #28]
 4961              	.LVL443:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4962              		.loc 3 183 9 view .LVU1258
 4963              	.LBE4006:
 4964              	.LBE4005:
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (__data)
 4965              		.loc 3 775 6 view .LVU1259
 4966 0152 1A9B     		ldr	r3, [sp, #104]
 4967 0154 0293     		str	r3, [sp, #8]
 4968              	.LVL444:
 4969              	.LBB4007:
 4970              	.LBI4007:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 4971              		.loc 3 210 7 is_stmt 1 view .LVU1260
 4972              	.LBB4008:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4973              		.loc 3 211 9 is_stmt 0 view .LVU1261
 4974 0156 0893     		str	r3, [sp, #32]
 4975              	.LVL445:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4976              		.loc 3 211 9 view .LVU1262
 4977              	.LBE4008:
 4978              	.LBE4007:
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 4979              		.loc 3 776 6 view .LVU1263
 4980 0158 0028     		cmp	r0, #0
ARM GAS  /tmp/ccEv8ptb.s 			page 387


 4981 015a 22D0     		beq	.L129
 4982              	.LVL446:
 4983              	.LBB4009:
 4984              	.LBI4009:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4985              		.loc 3 178 7 is_stmt 1 view .LVU1264
 4986              	.LBB4010:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4987              		.loc 3 179 9 is_stmt 0 view .LVU1265
 4988 015c 1890     		str	r0, [sp, #96]
 4989              	.LVL447:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4990              		.loc 3 179 9 view .LVU1266
 4991              	.LBE4010:
 4992              	.LBE4009:
 4993              	.LBB4011:
 4994              	.LBI4011:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 4995              		.loc 3 210 7 is_stmt 1 view .LVU1267
 4996              	.LBB4012:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 4997              		.loc 3 211 9 is_stmt 0 view .LVU1268
 4998 015e 059B     		ldr	r3, [sp, #20]
 4999 0160 1A93     		str	r3, [sp, #104]
 5000              	.LVL448:
 5001              	.L127:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5002              		.loc 3 211 9 view .LVU1269
 5003              	.LBE4012:
 5004              	.LBE4011:
 5005              	.LBE4000:
 5006              	.LBE3995:
 5007              	.LBB4035:
 5008              	.LBI4035:
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 5009              		.loc 3 1023 7 is_stmt 1 view .LVU1270
 5010              	.LBB4036:
 5011              	.LBI4036:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5012              		.loc 3 214 7 view .LVU1271
 5013              	.LBB4037:
 5014              	.LBI4037:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 5015              		.loc 3 182 7 view .LVU1272
 5016              	.LBB4038:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5017              		.loc 3 183 9 is_stmt 0 view .LVU1273
 5018 0162 0023     		movs	r3, #0
 5019 0164 1993     		str	r3, [sp, #100]
 5020              	.LVL449:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5021              		.loc 3 183 9 view .LVU1274
 5022              	.LBE4038:
 5023              	.LBE4037:
 5024              	.LBB4039:
 5025              	.LBI4039:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
ARM GAS  /tmp/ccEv8ptb.s 			page 388


 5026              		.loc 3 186 7 is_stmt 1 view .LVU1275
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5027              		.loc 3 186 7 is_stmt 0 view .LVU1276
 5028              	.LBE4039:
 5029              	.LBB4040:
 5030              	.LBI4040:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 5031              		.loc 2 299 7 is_stmt 1 view .LVU1277
 5032              	.LBB4041:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5033              		.loc 2 300 9 view .LVU1278
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5034              		.loc 2 300 14 is_stmt 0 view .LVU1279
 5035 0166 189A     		ldr	r2, [sp, #96]
 5036 0168 1370     		strb	r3, [r2]
 5037              	.LVL450:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5038              		.loc 2 300 14 view .LVU1280
 5039              	.LBE4041:
 5040              	.LBE4040:
 5041              	.LBE4036:
 5042              	.LBE4035:
 5043              	.LBE3990:
 5044              	.LBB4043:
 5045              	.LBI4043:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 5046              		.loc 3 657 7 is_stmt 1 view .LVU1281
 5047              	.LBB4044:
 5048              	.LBI4044:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5049              		.loc 3 229 7 view .LVU1282
 5050              	.LBB4045:
 5051              	.LBB4046:
 5052              	.LBI4046:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5053              		.loc 3 221 7 view .LVU1283
 5054              	.LBB4047:
 5055              	.LBI4047:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5056              		.loc 3 186 7 view .LVU1284
 5057              	.LBB4048:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5058              		.loc 3 187 28 is_stmt 0 view .LVU1285
 5059 016a 1898     		ldr	r0, [sp, #96]
 5060              	.LVL451:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5061              		.loc 3 187 28 view .LVU1286
 5062              	.LBE4048:
 5063              	.LBE4047:
 5064              	.LBB4049:
 5065              	.LBI4049:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5066              		.loc 3 200 7 is_stmt 1 view .LVU1287
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5067              		.loc 3 200 7 is_stmt 0 view .LVU1288
 5068              	.LBE4049:
 5069              	.LBE4046:
ARM GAS  /tmp/ccEv8ptb.s 			page 389


 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 5070              		.loc 3 231 2 view .LVU1289
 5071 016c 1AAB     		add	r3, sp, #104
 5072 016e 9842     		cmp	r0, r3
 5073 0170 00D1     		bne	.LCB5599
 5074 0172 1FE1     		b	.L102	@long jump
 5075              	.LCB5599:
 5076              	.LVL452:
 5077              	.LBB4050:
 5078              	.LBI4050:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 5079              		.loc 3 236 7 is_stmt 1 view .LVU1290
 5080              	.LBB4051:
 5081              	.LBB4052:
 5082              	.LBI4052:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 5083              		.loc 8 469 7 view .LVU1291
 5084              	.LBB4053:
 5085              	.LBI4053:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 5086              		.loc 5 119 7 view .LVU1292
 5087              	.LBB4054:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 5088              		.loc 5 128 19 is_stmt 0 view .LVU1293
 5089 0174 FFF7FEFF 		bl	_ZdlPv
 5090              	.LVL453:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 5091              		.loc 5 128 19 view .LVU1294
 5092              	.LBE4054:
 5093              	.LBE4053:
 5094              	.LBE4052:
 5095              	.LBE4051:
 5096              	.LBE4050:
 5097              	.LBE4045:
 5098              	.LBE4044:
 5099              	.LBB4055:
 5100              	.LBI4055:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5101              		.loc 3 150 14 is_stmt 1 view .LVU1295
 5102              	.LBB4056:
 5103              	.LBI4056:
 5104              		.loc 4 153 7 view .LVU1296
 5105              	.LBB4057:
 5106              	.LBI4057:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 5107              		.loc 5 89 7 view .LVU1297
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 5108              		.loc 5 89 7 is_stmt 0 view .LVU1298
 5109              	.LBE4057:
 5110              	.LBE4056:
 5111              	.LBE4055:
 5112              	.LBE4043:
  37:alohal/misc/text_transform.cpp ****                     break;
 5113              		.loc 16 37 21 is_stmt 1 view .LVU1299
 5114 0178 1CE1     		b	.L102
 5115              	.LVL454:
 5116              	.L177:
ARM GAS  /tmp/ccEv8ptb.s 			page 390


 5117              	.LBB4058:
 5118              	.LBB4042:
 5119              	.LBB4015:
 5120              	.LBI4015:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 5121              		.loc 3 930 7 view .LVU1300
 5122              	.LBB4016:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5123              		.loc 3 931 16 is_stmt 0 view .LVU1301
 5124 017a 199A     		ldr	r2, [sp, #100]
 5125              	.LVL455:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5126              		.loc 3 931 16 view .LVU1302
 5127              	.LBE4016:
 5128              	.LBE4015:
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 5129              		.loc 3 750 6 view .LVU1303
 5130 017c 002A     		cmp	r2, #0
 5131 017e 03D0     		beq	.L125
 5132              	.LVL456:
 5133              	.LBB4017:
 5134              	.LBI4017:
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5135              		.loc 3 346 7 is_stmt 1 view .LVU1304
 5136              	.LBB4018:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 5137              		.loc 3 348 2 is_stmt 0 view .LVU1305
 5138 0180 012A     		cmp	r2, #1
 5139 0182 09D0     		beq	.L178
 5140              	.LVL457:
 5141              	.LBB4019:
 5142              	.LBI4019:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 5143              		.loc 2 361 7 is_stmt 1 view .LVU1306
 5144              	.LBB4020:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 5145              		.loc 2 363 2 view .LVU1307
 5146              		.loc 2 365 2 view .LVU1308
 5147              		.loc 2 365 49 is_stmt 0 view .LVU1309
 5148 0184 FFF7FEFF 		bl	memcpy
 5149              	.LVL458:
 5150              	.L125:
 5151              		.loc 2 365 49 view .LVU1310
 5152              	.LBE4020:
 5153              	.LBE4019:
 5154              	.LBE4018:
 5155              	.LBE4017:
 5156              	.LBB4024:
 5157              	.LBI4024:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 5158              		.loc 3 930 7 is_stmt 1 view .LVU1311
 5159              	.LBB4025:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5160              		.loc 3 931 16 is_stmt 0 view .LVU1312
 5161 0188 199B     		ldr	r3, [sp, #100]
 5162              	.LVL459:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 391


 5163              		.loc 3 931 16 view .LVU1313
 5164              	.LBE4025:
 5165              	.LBE4024:
 5166              	.LBB4026:
 5167              	.LBI4026:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5168              		.loc 3 214 7 is_stmt 1 view .LVU1314
 5169              	.LBB4027:
 5170              	.LBB4028:
 5171              	.LBI4028:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 5172              		.loc 3 182 7 view .LVU1315
 5173              	.LBB4029:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5174              		.loc 3 183 9 is_stmt 0 view .LVU1316
 5175 018a 0793     		str	r3, [sp, #28]
 5176              	.LVL460:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5177              		.loc 3 183 9 view .LVU1317
 5178              	.LBE4029:
 5179              	.LBE4028:
 5180              	.LBB4030:
 5181              	.LBI4030:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5182              		.loc 3 186 7 is_stmt 1 view .LVU1318
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5183              		.loc 3 186 7 is_stmt 0 view .LVU1319
 5184              	.LBE4030:
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 5185              		.loc 3 217 31 view .LVU1320
 5186 018c 069A     		ldr	r2, [sp, #24]
 5187 018e 9446     		mov	ip, r2
 5188 0190 6344     		add	r3, r3, ip
 5189              	.LVL461:
 5190              	.LBB4031:
 5191              	.LBI4031:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 5192              		.loc 2 299 7 is_stmt 1 view .LVU1321
 5193              	.LBB4032:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5194              		.loc 2 300 9 view .LVU1322
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5195              		.loc 2 300 14 is_stmt 0 view .LVU1323
 5196 0192 0022     		movs	r2, #0
 5197 0194 1A70     		strb	r2, [r3]
 5198              	.LVL462:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5199              		.loc 2 300 14 view .LVU1324
 5200              	.LBE4032:
 5201              	.LBE4031:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5202              		.loc 3 218 7 view .LVU1325
 5203 0196 E4E7     		b	.L127
 5204              	.LVL463:
 5205              	.L178:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5206              		.loc 3 218 7 view .LVU1326
ARM GAS  /tmp/ccEv8ptb.s 			page 392


 5207              	.LBE4027:
 5208              	.LBE4026:
 5209              	.LBB4033:
 5210              	.LBB4023:
 5211              	.LBB4021:
 5212              	.LBI4021:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 5213              		.loc 2 299 7 is_stmt 1 view .LVU1327
 5214              	.LBB4022:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5215              		.loc 2 300 9 view .LVU1328
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5216              		.loc 2 300 16 is_stmt 0 view .LVU1329
 5217 0198 0B78     		ldrb	r3, [r1]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5218              		.loc 2 300 14 view .LVU1330
 5219 019a 0370     		strb	r3, [r0]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5220              		.loc 2 300 22 view .LVU1331
 5221 019c F4E7     		b	.L125
 5222              	.LVL464:
 5223              	.L168:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5224              		.loc 2 300 22 view .LVU1332
 5225              	.LBE4022:
 5226              	.LBE4021:
 5227              	.LBE4023:
 5228              	.LBE4033:
 5229              	.LBB4034:
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    size_type __capacity;
 5230              		.loc 3 759 14 view .LVU1333
 5231 019e 0020     		movs	r0, #0
 5232 01a0 D4E7     		b	.L128
 5233              	.LVL465:
 5234              	.L129:
 5235              	.LBB4013:
 5236              	.LBI4013:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 5237              		.loc 3 178 7 is_stmt 1 view .LVU1334
 5238              	.LBB4014:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5239              		.loc 3 179 9 is_stmt 0 view .LVU1335
 5240 01a2 1AAB     		add	r3, sp, #104
 5241              	.LVL466:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5242              		.loc 3 179 9 view .LVU1336
 5243 01a4 1893     		str	r3, [sp, #96]
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5244              		.loc 3 179 33 view .LVU1337
 5245 01a6 DCE7     		b	.L127
 5246              	.LVL467:
 5247              	.L106:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5248              		.loc 3 179 33 view .LVU1338
 5249              	.LBE4014:
 5250              	.LBE4013:
 5251              	.LBE4034:
ARM GAS  /tmp/ccEv8ptb.s 			page 393


 5252              	.LBE4042:
 5253              	.LBE4058:
  38:alohal/misc/text_transform.cpp ****                 case 13: output = "d" + output;
 5254              		.loc 16 38 17 is_stmt 1 view .LVU1339
 5255              		.loc 16 38 26 view .LVU1340
 5256              		.loc 16 38 39 is_stmt 0 view .LVU1341
 5257 01a8 06AA     		add	r2, sp, #24
 5258 01aa 5F49     		ldr	r1, .L189+20
 5259              	.LVL468:
 5260              		.loc 16 38 39 view .LVU1342
 5261 01ac 1EA8     		add	r0, sp, #120
 5262 01ae FFF7FEFF 		bl	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_
 5263              	.LVL469:
 5264              	.LBB4059:
 5265              	.LBI4059:
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 5266              		.loc 3 732 7 is_stmt 1 view .LVU1343
 5267              	.LBB4060:
 5268              	.LBI4060:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5269              		.loc 3 221 7 view .LVU1344
 5270              	.LBB4061:
 5271              	.LBI4061:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5272              		.loc 3 186 7 view .LVU1345
 5273              	.LBB4062:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5274              		.loc 3 187 28 is_stmt 0 view .LVU1346
 5275 01b2 0698     		ldr	r0, [sp, #24]
 5276              	.LVL470:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5277              		.loc 3 187 28 view .LVU1347
 5278              	.LBE4062:
 5279              	.LBE4061:
 5280              	.LBB4063:
 5281              	.LBI4063:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5282              		.loc 3 200 7 is_stmt 1 view .LVU1348
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5283              		.loc 3 200 7 is_stmt 0 view .LVU1349
 5284              	.LBE4063:
 5285              	.LBE4060:
 5286              	.LBB4064:
 5287              	.LBB4065:
 5288              	.LBI4065:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5289              		.loc 3 221 7 is_stmt 1 view .LVU1350
 5290              	.LBB4066:
 5291              	.LBI4066:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5292              		.loc 3 186 7 view .LVU1351
 5293              	.LBB4067:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5294              		.loc 3 187 28 is_stmt 0 view .LVU1352
 5295 01b4 1E99     		ldr	r1, [sp, #120]
 5296              	.LVL471:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 394


 5297              		.loc 3 187 28 view .LVU1353
 5298              	.LBE4067:
 5299              	.LBE4066:
 5300              	.LBB4068:
 5301              	.LBI4068:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5302              		.loc 3 200 7 is_stmt 1 view .LVU1354
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5303              		.loc 3 200 7 is_stmt 0 view .LVU1355
 5304              	.LBE4068:
 5305              	.LBE4065:
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 5306              		.loc 3 747 2 view .LVU1356
 5307 01b6 20AB     		add	r3, sp, #128
 5308 01b8 9942     		cmp	r1, r3
 5309 01ba 1BD0     		beq	.L179
 5310              	.LVL472:
 5311              	.LBB4069:
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 5312              		.loc 3 761 6 view .LVU1357
 5313 01bc 08AB     		add	r3, sp, #32
 5314 01be 9842     		cmp	r0, r3
 5315 01c0 2AD0     		beq	.L169
 5316              	.LVL473:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 5317              		.loc 3 767 7 view .LVU1358
 5318 01c2 089B     		ldr	r3, [sp, #32]
 5319 01c4 9946     		mov	r9, r3
 5320              	.LVL474:
 5321              	.L135:
 5322              	.LBB4070:
 5323              	.LBI4070:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 5324              		.loc 3 178 7 is_stmt 1 view .LVU1359
 5325              	.LBB4071:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5326              		.loc 3 179 9 is_stmt 0 view .LVU1360
 5327 01c6 0691     		str	r1, [sp, #24]
 5328              	.LVL475:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5329              		.loc 3 179 9 view .LVU1361
 5330              	.LBE4071:
 5331              	.LBE4070:
 5332              	.LBB4072:
 5333              	.LBI4072:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 5334              		.loc 3 936 7 is_stmt 1 view .LVU1362
 5335              	.LBB4073:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5336              		.loc 3 937 16 is_stmt 0 view .LVU1363
 5337 01c8 1F9B     		ldr	r3, [sp, #124]
 5338              	.LVL476:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5339              		.loc 3 937 16 view .LVU1364
 5340              	.LBE4073:
 5341              	.LBE4072:
 5342              	.LBB4074:
ARM GAS  /tmp/ccEv8ptb.s 			page 395


 5343              	.LBI4074:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 5344              		.loc 3 182 7 is_stmt 1 view .LVU1365
 5345              	.LBB4075:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5346              		.loc 3 183 9 is_stmt 0 view .LVU1366
 5347 01ca 0793     		str	r3, [sp, #28]
 5348              	.LVL477:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5349              		.loc 3 183 9 view .LVU1367
 5350              	.LBE4075:
 5351              	.LBE4074:
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (__data)
 5352              		.loc 3 775 6 view .LVU1368
 5353 01cc 209B     		ldr	r3, [sp, #128]
 5354 01ce 0293     		str	r3, [sp, #8]
 5355              	.LVL478:
 5356              	.LBB4076:
 5357              	.LBI4076:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 5358              		.loc 3 210 7 is_stmt 1 view .LVU1369
 5359              	.LBB4077:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5360              		.loc 3 211 9 is_stmt 0 view .LVU1370
 5361 01d0 0893     		str	r3, [sp, #32]
 5362              	.LVL479:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5363              		.loc 3 211 9 view .LVU1371
 5364              	.LBE4077:
 5365              	.LBE4076:
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 5366              		.loc 3 776 6 view .LVU1372
 5367 01d2 0028     		cmp	r0, #0
 5368 01d4 22D0     		beq	.L136
 5369              	.LVL480:
 5370              	.LBB4078:
 5371              	.LBI4078:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 5372              		.loc 3 178 7 is_stmt 1 view .LVU1373
 5373              	.LBB4079:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5374              		.loc 3 179 9 is_stmt 0 view .LVU1374
 5375 01d6 1E90     		str	r0, [sp, #120]
 5376              	.LVL481:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5377              		.loc 3 179 9 view .LVU1375
 5378              	.LBE4079:
 5379              	.LBE4078:
 5380              	.LBB4080:
 5381              	.LBI4080:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 5382              		.loc 3 210 7 is_stmt 1 view .LVU1376
 5383              	.LBB4081:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5384              		.loc 3 211 9 is_stmt 0 view .LVU1377
 5385 01d8 4B46     		mov	r3, r9
 5386 01da 2093     		str	r3, [sp, #128]
ARM GAS  /tmp/ccEv8ptb.s 			page 396


 5387              	.LVL482:
 5388              	.L134:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5389              		.loc 3 211 9 view .LVU1378
 5390              	.LBE4081:
 5391              	.LBE4080:
 5392              	.LBE4069:
 5393              	.LBE4064:
 5394              	.LBB4104:
 5395              	.LBI4104:
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 5396              		.loc 3 1023 7 is_stmt 1 view .LVU1379
 5397              	.LBB4105:
 5398              	.LBI4105:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5399              		.loc 3 214 7 view .LVU1380
 5400              	.LBB4106:
 5401              	.LBI4106:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 5402              		.loc 3 182 7 view .LVU1381
 5403              	.LBB4107:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5404              		.loc 3 183 9 is_stmt 0 view .LVU1382
 5405 01dc 0023     		movs	r3, #0
 5406 01de 1F93     		str	r3, [sp, #124]
 5407              	.LVL483:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5408              		.loc 3 183 9 view .LVU1383
 5409              	.LBE4107:
 5410              	.LBE4106:
 5411              	.LBB4108:
 5412              	.LBI4108:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5413              		.loc 3 186 7 is_stmt 1 view .LVU1384
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5414              		.loc 3 186 7 is_stmt 0 view .LVU1385
 5415              	.LBE4108:
 5416              	.LBB4109:
 5417              	.LBI4109:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 5418              		.loc 2 299 7 is_stmt 1 view .LVU1386
 5419              	.LBB4110:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5420              		.loc 2 300 9 view .LVU1387
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5421              		.loc 2 300 14 is_stmt 0 view .LVU1388
 5422 01e0 1E9A     		ldr	r2, [sp, #120]
 5423 01e2 1370     		strb	r3, [r2]
 5424              	.LVL484:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5425              		.loc 2 300 14 view .LVU1389
 5426              	.LBE4110:
 5427              	.LBE4109:
 5428              	.LBE4105:
 5429              	.LBE4104:
 5430              	.LBE4059:
 5431              	.LBB4112:
ARM GAS  /tmp/ccEv8ptb.s 			page 397


 5432              	.LBI4112:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 5433              		.loc 3 657 7 is_stmt 1 view .LVU1390
 5434              	.LBB4113:
 5435              	.LBI4113:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5436              		.loc 3 229 7 view .LVU1391
 5437              	.LBB4114:
 5438              	.LBB4115:
 5439              	.LBI4115:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5440              		.loc 3 221 7 view .LVU1392
 5441              	.LBB4116:
 5442              	.LBI4116:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5443              		.loc 3 186 7 view .LVU1393
 5444              	.LBB4117:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5445              		.loc 3 187 28 is_stmt 0 view .LVU1394
 5446 01e4 1E98     		ldr	r0, [sp, #120]
 5447              	.LVL485:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5448              		.loc 3 187 28 view .LVU1395
 5449              	.LBE4117:
 5450              	.LBE4116:
 5451              	.LBB4118:
 5452              	.LBI4118:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5453              		.loc 3 200 7 is_stmt 1 view .LVU1396
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5454              		.loc 3 200 7 is_stmt 0 view .LVU1397
 5455              	.LBE4118:
 5456              	.LBE4115:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 5457              		.loc 3 231 2 view .LVU1398
 5458 01e6 20AB     		add	r3, sp, #128
 5459 01e8 9842     		cmp	r0, r3
 5460 01ea 00D1     		bne	.LCB6033
 5461 01ec E2E0     		b	.L102	@long jump
 5462              	.LCB6033:
 5463              	.LVL486:
 5464              	.LBB4119:
 5465              	.LBI4119:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 5466              		.loc 3 236 7 is_stmt 1 view .LVU1399
 5467              	.LBB4120:
 5468              	.LBB4121:
 5469              	.LBI4121:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 5470              		.loc 8 469 7 view .LVU1400
 5471              	.LBB4122:
 5472              	.LBI4122:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 5473              		.loc 5 119 7 view .LVU1401
 5474              	.LBB4123:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 5475              		.loc 5 128 19 is_stmt 0 view .LVU1402
ARM GAS  /tmp/ccEv8ptb.s 			page 398


 5476 01ee FFF7FEFF 		bl	_ZdlPv
 5477              	.LVL487:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 5478              		.loc 5 128 19 view .LVU1403
 5479              	.LBE4123:
 5480              	.LBE4122:
 5481              	.LBE4121:
 5482              	.LBE4120:
 5483              	.LBE4119:
 5484              	.LBE4114:
 5485              	.LBE4113:
 5486              	.LBB4124:
 5487              	.LBI4124:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5488              		.loc 3 150 14 is_stmt 1 view .LVU1404
 5489              	.LBB4125:
 5490              	.LBI4125:
 5491              		.loc 4 153 7 view .LVU1405
 5492              	.LBB4126:
 5493              	.LBI4126:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 5494              		.loc 5 89 7 view .LVU1406
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 5495              		.loc 5 89 7 is_stmt 0 view .LVU1407
 5496              	.LBE4126:
 5497              	.LBE4125:
 5498              	.LBE4124:
 5499              	.LBE4112:
  39:alohal/misc/text_transform.cpp ****                     break;
 5500              		.loc 16 39 21 is_stmt 1 view .LVU1408
 5501 01f2 DFE0     		b	.L102
 5502              	.LVL488:
 5503              	.L179:
 5504              	.LBB4127:
 5505              	.LBB4111:
 5506              	.LBB4084:
 5507              	.LBI4084:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 5508              		.loc 3 930 7 view .LVU1409
 5509              	.LBB4085:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5510              		.loc 3 931 16 is_stmt 0 view .LVU1410
 5511 01f4 1F9A     		ldr	r2, [sp, #124]
 5512              	.LVL489:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5513              		.loc 3 931 16 view .LVU1411
 5514              	.LBE4085:
 5515              	.LBE4084:
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 5516              		.loc 3 750 6 view .LVU1412
 5517 01f6 002A     		cmp	r2, #0
 5518 01f8 03D0     		beq	.L132
 5519              	.LVL490:
 5520              	.LBB4086:
 5521              	.LBI4086:
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5522              		.loc 3 346 7 is_stmt 1 view .LVU1413
ARM GAS  /tmp/ccEv8ptb.s 			page 399


 5523              	.LBB4087:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 5524              		.loc 3 348 2 is_stmt 0 view .LVU1414
 5525 01fa 012A     		cmp	r2, #1
 5526 01fc 09D0     		beq	.L180
 5527              	.LVL491:
 5528              	.LBB4088:
 5529              	.LBI4088:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 5530              		.loc 2 361 7 is_stmt 1 view .LVU1415
 5531              	.LBB4089:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 5532              		.loc 2 363 2 view .LVU1416
 5533              		.loc 2 365 2 view .LVU1417
 5534              		.loc 2 365 49 is_stmt 0 view .LVU1418
 5535 01fe FFF7FEFF 		bl	memcpy
 5536              	.LVL492:
 5537              	.L132:
 5538              		.loc 2 365 49 view .LVU1419
 5539              	.LBE4089:
 5540              	.LBE4088:
 5541              	.LBE4087:
 5542              	.LBE4086:
 5543              	.LBB4093:
 5544              	.LBI4093:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 5545              		.loc 3 930 7 is_stmt 1 view .LVU1420
 5546              	.LBB4094:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5547              		.loc 3 931 16 is_stmt 0 view .LVU1421
 5548 0202 1F9B     		ldr	r3, [sp, #124]
 5549              	.LVL493:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5550              		.loc 3 931 16 view .LVU1422
 5551              	.LBE4094:
 5552              	.LBE4093:
 5553              	.LBB4095:
 5554              	.LBI4095:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5555              		.loc 3 214 7 is_stmt 1 view .LVU1423
 5556              	.LBB4096:
 5557              	.LBB4097:
 5558              	.LBI4097:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 5559              		.loc 3 182 7 view .LVU1424
 5560              	.LBB4098:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5561              		.loc 3 183 9 is_stmt 0 view .LVU1425
 5562 0204 0793     		str	r3, [sp, #28]
 5563              	.LVL494:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5564              		.loc 3 183 9 view .LVU1426
 5565              	.LBE4098:
 5566              	.LBE4097:
 5567              	.LBB4099:
 5568              	.LBI4099:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
ARM GAS  /tmp/ccEv8ptb.s 			page 400


 5569              		.loc 3 186 7 is_stmt 1 view .LVU1427
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5570              		.loc 3 186 7 is_stmt 0 view .LVU1428
 5571              	.LBE4099:
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 5572              		.loc 3 217 31 view .LVU1429
 5573 0206 069A     		ldr	r2, [sp, #24]
 5574 0208 9446     		mov	ip, r2
 5575 020a 6344     		add	r3, r3, ip
 5576              	.LVL495:
 5577              	.LBB4100:
 5578              	.LBI4100:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 5579              		.loc 2 299 7 is_stmt 1 view .LVU1430
 5580              	.LBB4101:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5581              		.loc 2 300 9 view .LVU1431
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5582              		.loc 2 300 14 is_stmt 0 view .LVU1432
 5583 020c 0022     		movs	r2, #0
 5584 020e 1A70     		strb	r2, [r3]
 5585              	.LVL496:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5586              		.loc 2 300 14 view .LVU1433
 5587              	.LBE4101:
 5588              	.LBE4100:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5589              		.loc 3 218 7 view .LVU1434
 5590 0210 E4E7     		b	.L134
 5591              	.LVL497:
 5592              	.L180:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5593              		.loc 3 218 7 view .LVU1435
 5594              	.LBE4096:
 5595              	.LBE4095:
 5596              	.LBB4102:
 5597              	.LBB4092:
 5598              	.LBB4090:
 5599              	.LBI4090:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 5600              		.loc 2 299 7 is_stmt 1 view .LVU1436
 5601              	.LBB4091:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5602              		.loc 2 300 9 view .LVU1437
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5603              		.loc 2 300 16 is_stmt 0 view .LVU1438
 5604 0212 0B78     		ldrb	r3, [r1]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5605              		.loc 2 300 14 view .LVU1439
 5606 0214 0370     		strb	r3, [r0]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5607              		.loc 2 300 22 view .LVU1440
 5608 0216 F4E7     		b	.L132
 5609              	.LVL498:
 5610              	.L169:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5611              		.loc 2 300 22 view .LVU1441
ARM GAS  /tmp/ccEv8ptb.s 			page 401


 5612              	.LBE4091:
 5613              	.LBE4090:
 5614              	.LBE4092:
 5615              	.LBE4102:
 5616              	.LBB4103:
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    size_type __capacity;
 5617              		.loc 3 759 14 view .LVU1442
 5618 0218 0020     		movs	r0, #0
 5619 021a D4E7     		b	.L135
 5620              	.LVL499:
 5621              	.L136:
 5622              	.LBB4082:
 5623              	.LBI4082:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 5624              		.loc 3 178 7 is_stmt 1 view .LVU1443
 5625              	.LBB4083:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5626              		.loc 3 179 9 is_stmt 0 view .LVU1444
 5627 021c 20AB     		add	r3, sp, #128
 5628              	.LVL500:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5629              		.loc 3 179 9 view .LVU1445
 5630 021e 1E93     		str	r3, [sp, #120]
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5631              		.loc 3 179 33 view .LVU1446
 5632 0220 DCE7     		b	.L134
 5633              	.LVL501:
 5634              	.L105:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5635              		.loc 3 179 33 view .LVU1447
 5636              	.LBE4083:
 5637              	.LBE4082:
 5638              	.LBE4103:
 5639              	.LBE4111:
 5640              	.LBE4127:
  40:alohal/misc/text_transform.cpp ****                 case 14: output = "e" + output;
 5641              		.loc 16 40 17 is_stmt 1 view .LVU1448
 5642              		.loc 16 40 26 view .LVU1449
 5643              		.loc 16 40 39 is_stmt 0 view .LVU1450
 5644 0222 06AA     		add	r2, sp, #24
 5645 0224 4149     		ldr	r1, .L189+24
 5646              	.LVL502:
 5647              		.loc 16 40 39 view .LVU1451
 5648 0226 24A8     		add	r0, sp, #144
 5649 0228 FFF7FEFF 		bl	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_
 5650              	.LVL503:
 5651              	.LBB4128:
 5652              	.LBI4128:
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 5653              		.loc 3 732 7 is_stmt 1 view .LVU1452
 5654              	.LBB4129:
 5655              	.LBI4129:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5656              		.loc 3 221 7 view .LVU1453
 5657              	.LBB4130:
 5658              	.LBI4130:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
ARM GAS  /tmp/ccEv8ptb.s 			page 402


 5659              		.loc 3 186 7 view .LVU1454
 5660              	.LBB4131:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5661              		.loc 3 187 28 is_stmt 0 view .LVU1455
 5662 022c 0698     		ldr	r0, [sp, #24]
 5663              	.LVL504:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5664              		.loc 3 187 28 view .LVU1456
 5665              	.LBE4131:
 5666              	.LBE4130:
 5667              	.LBB4132:
 5668              	.LBI4132:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5669              		.loc 3 200 7 is_stmt 1 view .LVU1457
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5670              		.loc 3 200 7 is_stmt 0 view .LVU1458
 5671              	.LBE4132:
 5672              	.LBE4129:
 5673              	.LBB4133:
 5674              	.LBB4134:
 5675              	.LBI4134:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5676              		.loc 3 221 7 is_stmt 1 view .LVU1459
 5677              	.LBB4135:
 5678              	.LBI4135:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5679              		.loc 3 186 7 view .LVU1460
 5680              	.LBB4136:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5681              		.loc 3 187 28 is_stmt 0 view .LVU1461
 5682 022e 2499     		ldr	r1, [sp, #144]
 5683              	.LVL505:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5684              		.loc 3 187 28 view .LVU1462
 5685              	.LBE4136:
 5686              	.LBE4135:
 5687              	.LBB4137:
 5688              	.LBI4137:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5689              		.loc 3 200 7 is_stmt 1 view .LVU1463
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5690              		.loc 3 200 7 is_stmt 0 view .LVU1464
 5691              	.LBE4137:
 5692              	.LBE4134:
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 5693              		.loc 3 747 2 view .LVU1465
 5694 0230 26AB     		add	r3, sp, #152
 5695 0232 9942     		cmp	r1, r3
 5696 0234 1BD0     		beq	.L181
 5697              	.LVL506:
 5698              	.LBB4138:
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 5699              		.loc 3 761 6 view .LVU1466
 5700 0236 08AB     		add	r3, sp, #32
 5701 0238 9842     		cmp	r0, r3
 5702 023a 2AD0     		beq	.L170
 5703              	.LVL507:
ARM GAS  /tmp/ccEv8ptb.s 			page 403


 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 5704              		.loc 3 767 7 view .LVU1467
 5705 023c 089B     		ldr	r3, [sp, #32]
 5706 023e 9A46     		mov	r10, r3
 5707              	.LVL508:
 5708              	.L142:
 5709              	.LBB4139:
 5710              	.LBI4139:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 5711              		.loc 3 178 7 is_stmt 1 view .LVU1468
 5712              	.LBB4140:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5713              		.loc 3 179 9 is_stmt 0 view .LVU1469
 5714 0240 0691     		str	r1, [sp, #24]
 5715              	.LVL509:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5716              		.loc 3 179 9 view .LVU1470
 5717              	.LBE4140:
 5718              	.LBE4139:
 5719              	.LBB4141:
 5720              	.LBI4141:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 5721              		.loc 3 936 7 is_stmt 1 view .LVU1471
 5722              	.LBB4142:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5723              		.loc 3 937 16 is_stmt 0 view .LVU1472
 5724 0242 259B     		ldr	r3, [sp, #148]
 5725              	.LVL510:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5726              		.loc 3 937 16 view .LVU1473
 5727              	.LBE4142:
 5728              	.LBE4141:
 5729              	.LBB4143:
 5730              	.LBI4143:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 5731              		.loc 3 182 7 is_stmt 1 view .LVU1474
 5732              	.LBB4144:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5733              		.loc 3 183 9 is_stmt 0 view .LVU1475
 5734 0244 0793     		str	r3, [sp, #28]
 5735              	.LVL511:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5736              		.loc 3 183 9 view .LVU1476
 5737              	.LBE4144:
 5738              	.LBE4143:
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (__data)
 5739              		.loc 3 775 6 view .LVU1477
 5740 0246 269B     		ldr	r3, [sp, #152]
 5741 0248 0293     		str	r3, [sp, #8]
 5742              	.LVL512:
 5743              	.LBB4145:
 5744              	.LBI4145:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 5745              		.loc 3 210 7 is_stmt 1 view .LVU1478
 5746              	.LBB4146:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5747              		.loc 3 211 9 is_stmt 0 view .LVU1479
ARM GAS  /tmp/ccEv8ptb.s 			page 404


 5748 024a 0893     		str	r3, [sp, #32]
 5749              	.LVL513:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5750              		.loc 3 211 9 view .LVU1480
 5751              	.LBE4146:
 5752              	.LBE4145:
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 5753              		.loc 3 776 6 view .LVU1481
 5754 024c 0028     		cmp	r0, #0
 5755 024e 22D0     		beq	.L143
 5756              	.LVL514:
 5757              	.LBB4147:
 5758              	.LBI4147:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 5759              		.loc 3 178 7 is_stmt 1 view .LVU1482
 5760              	.LBB4148:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5761              		.loc 3 179 9 is_stmt 0 view .LVU1483
 5762 0250 2490     		str	r0, [sp, #144]
 5763              	.LVL515:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5764              		.loc 3 179 9 view .LVU1484
 5765              	.LBE4148:
 5766              	.LBE4147:
 5767              	.LBB4149:
 5768              	.LBI4149:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 5769              		.loc 3 210 7 is_stmt 1 view .LVU1485
 5770              	.LBB4150:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5771              		.loc 3 211 9 is_stmt 0 view .LVU1486
 5772 0252 5346     		mov	r3, r10
 5773 0254 2693     		str	r3, [sp, #152]
 5774              	.LVL516:
 5775              	.L141:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5776              		.loc 3 211 9 view .LVU1487
 5777              	.LBE4150:
 5778              	.LBE4149:
 5779              	.LBE4138:
 5780              	.LBE4133:
 5781              	.LBB4173:
 5782              	.LBI4173:
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 5783              		.loc 3 1023 7 is_stmt 1 view .LVU1488
 5784              	.LBB4174:
 5785              	.LBI4174:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5786              		.loc 3 214 7 view .LVU1489
 5787              	.LBB4175:
 5788              	.LBI4175:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 5789              		.loc 3 182 7 view .LVU1490
 5790              	.LBB4176:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5791              		.loc 3 183 9 is_stmt 0 view .LVU1491
 5792 0256 0023     		movs	r3, #0
ARM GAS  /tmp/ccEv8ptb.s 			page 405


 5793 0258 2593     		str	r3, [sp, #148]
 5794              	.LVL517:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5795              		.loc 3 183 9 view .LVU1492
 5796              	.LBE4176:
 5797              	.LBE4175:
 5798              	.LBB4177:
 5799              	.LBI4177:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5800              		.loc 3 186 7 is_stmt 1 view .LVU1493
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5801              		.loc 3 186 7 is_stmt 0 view .LVU1494
 5802              	.LBE4177:
 5803              	.LBB4178:
 5804              	.LBI4178:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 5805              		.loc 2 299 7 is_stmt 1 view .LVU1495
 5806              	.LBB4179:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5807              		.loc 2 300 9 view .LVU1496
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5808              		.loc 2 300 14 is_stmt 0 view .LVU1497
 5809 025a 249A     		ldr	r2, [sp, #144]
 5810 025c 1370     		strb	r3, [r2]
 5811              	.LVL518:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5812              		.loc 2 300 14 view .LVU1498
 5813              	.LBE4179:
 5814              	.LBE4178:
 5815              	.LBE4174:
 5816              	.LBE4173:
 5817              	.LBE4128:
 5818              	.LBB4181:
 5819              	.LBI4181:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 5820              		.loc 3 657 7 is_stmt 1 view .LVU1499
 5821              	.LBB4182:
 5822              	.LBI4182:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5823              		.loc 3 229 7 view .LVU1500
 5824              	.LBB4183:
 5825              	.LBB4184:
 5826              	.LBI4184:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5827              		.loc 3 221 7 view .LVU1501
 5828              	.LBB4185:
 5829              	.LBI4185:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5830              		.loc 3 186 7 view .LVU1502
 5831              	.LBB4186:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5832              		.loc 3 187 28 is_stmt 0 view .LVU1503
 5833 025e 2498     		ldr	r0, [sp, #144]
 5834              	.LVL519:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5835              		.loc 3 187 28 view .LVU1504
 5836              	.LBE4186:
ARM GAS  /tmp/ccEv8ptb.s 			page 406


 5837              	.LBE4185:
 5838              	.LBB4187:
 5839              	.LBI4187:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5840              		.loc 3 200 7 is_stmt 1 view .LVU1505
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5841              		.loc 3 200 7 is_stmt 0 view .LVU1506
 5842              	.LBE4187:
 5843              	.LBE4184:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 5844              		.loc 3 231 2 view .LVU1507
 5845 0260 26AB     		add	r3, sp, #152
 5846 0262 9842     		cmp	r0, r3
 5847 0264 00D1     		bne	.LCB6467
 5848 0266 A5E0     		b	.L102	@long jump
 5849              	.LCB6467:
 5850              	.LVL520:
 5851              	.LBB4188:
 5852              	.LBI4188:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 5853              		.loc 3 236 7 is_stmt 1 view .LVU1508
 5854              	.LBB4189:
 5855              	.LBB4190:
 5856              	.LBI4190:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 5857              		.loc 8 469 7 view .LVU1509
 5858              	.LBB4191:
 5859              	.LBI4191:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 5860              		.loc 5 119 7 view .LVU1510
 5861              	.LBB4192:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 5862              		.loc 5 128 19 is_stmt 0 view .LVU1511
 5863 0268 FFF7FEFF 		bl	_ZdlPv
 5864              	.LVL521:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 5865              		.loc 5 128 19 view .LVU1512
 5866              	.LBE4192:
 5867              	.LBE4191:
 5868              	.LBE4190:
 5869              	.LBE4189:
 5870              	.LBE4188:
 5871              	.LBE4183:
 5872              	.LBE4182:
 5873              	.LBB4193:
 5874              	.LBI4193:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5875              		.loc 3 150 14 is_stmt 1 view .LVU1513
 5876              	.LBB4194:
 5877              	.LBI4194:
 5878              		.loc 4 153 7 view .LVU1514
 5879              	.LBB4195:
 5880              	.LBI4195:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 5881              		.loc 5 89 7 view .LVU1515
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 5882              		.loc 5 89 7 is_stmt 0 view .LVU1516
ARM GAS  /tmp/ccEv8ptb.s 			page 407


 5883              	.LBE4195:
 5884              	.LBE4194:
 5885              	.LBE4193:
 5886              	.LBE4181:
  41:alohal/misc/text_transform.cpp ****                     break;
 5887              		.loc 16 41 21 is_stmt 1 view .LVU1517
 5888 026c A2E0     		b	.L102
 5889              	.LVL522:
 5890              	.L181:
 5891              	.LBB4196:
 5892              	.LBB4180:
 5893              	.LBB4153:
 5894              	.LBI4153:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 5895              		.loc 3 930 7 view .LVU1518
 5896              	.LBB4154:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5897              		.loc 3 931 16 is_stmt 0 view .LVU1519
 5898 026e 259A     		ldr	r2, [sp, #148]
 5899              	.LVL523:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5900              		.loc 3 931 16 view .LVU1520
 5901              	.LBE4154:
 5902              	.LBE4153:
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 5903              		.loc 3 750 6 view .LVU1521
 5904 0270 002A     		cmp	r2, #0
 5905 0272 03D0     		beq	.L139
 5906              	.LVL524:
 5907              	.LBB4155:
 5908              	.LBI4155:
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5909              		.loc 3 346 7 is_stmt 1 view .LVU1522
 5910              	.LBB4156:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 5911              		.loc 3 348 2 is_stmt 0 view .LVU1523
 5912 0274 012A     		cmp	r2, #1
 5913 0276 09D0     		beq	.L182
 5914              	.LVL525:
 5915              	.LBB4157:
 5916              	.LBI4157:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 5917              		.loc 2 361 7 is_stmt 1 view .LVU1524
 5918              	.LBB4158:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 5919              		.loc 2 363 2 view .LVU1525
 5920              		.loc 2 365 2 view .LVU1526
 5921              		.loc 2 365 49 is_stmt 0 view .LVU1527
 5922 0278 FFF7FEFF 		bl	memcpy
 5923              	.LVL526:
 5924              	.L139:
 5925              		.loc 2 365 49 view .LVU1528
 5926              	.LBE4158:
 5927              	.LBE4157:
 5928              	.LBE4156:
 5929              	.LBE4155:
 5930              	.LBB4162:
ARM GAS  /tmp/ccEv8ptb.s 			page 408


 5931              	.LBI4162:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 5932              		.loc 3 930 7 is_stmt 1 view .LVU1529
 5933              	.LBB4163:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5934              		.loc 3 931 16 is_stmt 0 view .LVU1530
 5935 027c 259B     		ldr	r3, [sp, #148]
 5936              	.LVL527:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5937              		.loc 3 931 16 view .LVU1531
 5938              	.LBE4163:
 5939              	.LBE4162:
 5940              	.LBB4164:
 5941              	.LBI4164:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 5942              		.loc 3 214 7 is_stmt 1 view .LVU1532
 5943              	.LBB4165:
 5944              	.LBB4166:
 5945              	.LBI4166:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 5946              		.loc 3 182 7 view .LVU1533
 5947              	.LBB4167:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5948              		.loc 3 183 9 is_stmt 0 view .LVU1534
 5949 027e 0793     		str	r3, [sp, #28]
 5950              	.LVL528:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5951              		.loc 3 183 9 view .LVU1535
 5952              	.LBE4167:
 5953              	.LBE4166:
 5954              	.LBB4168:
 5955              	.LBI4168:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5956              		.loc 3 186 7 is_stmt 1 view .LVU1536
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5957              		.loc 3 186 7 is_stmt 0 view .LVU1537
 5958              	.LBE4168:
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 5959              		.loc 3 217 31 view .LVU1538
 5960 0280 069A     		ldr	r2, [sp, #24]
 5961 0282 9446     		mov	ip, r2
 5962 0284 6344     		add	r3, r3, ip
 5963              	.LVL529:
 5964              	.LBB4169:
 5965              	.LBI4169:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 5966              		.loc 2 299 7 is_stmt 1 view .LVU1539
 5967              	.LBB4170:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5968              		.loc 2 300 9 view .LVU1540
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5969              		.loc 2 300 14 is_stmt 0 view .LVU1541
 5970 0286 0022     		movs	r2, #0
 5971 0288 1A70     		strb	r2, [r3]
 5972              	.LVL530:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5973              		.loc 2 300 14 view .LVU1542
ARM GAS  /tmp/ccEv8ptb.s 			page 409


 5974              	.LBE4170:
 5975              	.LBE4169:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5976              		.loc 3 218 7 view .LVU1543
 5977 028a E4E7     		b	.L141
 5978              	.LVL531:
 5979              	.L182:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 5980              		.loc 3 218 7 view .LVU1544
 5981              	.LBE4165:
 5982              	.LBE4164:
 5983              	.LBB4171:
 5984              	.LBB4161:
 5985              	.LBB4159:
 5986              	.LBI4159:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 5987              		.loc 2 299 7 is_stmt 1 view .LVU1545
 5988              	.LBB4160:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5989              		.loc 2 300 9 view .LVU1546
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5990              		.loc 2 300 16 is_stmt 0 view .LVU1547
 5991 028c 0B78     		ldrb	r3, [r1]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5992              		.loc 2 300 14 view .LVU1548
 5993 028e 0370     		strb	r3, [r0]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5994              		.loc 2 300 22 view .LVU1549
 5995 0290 F4E7     		b	.L139
 5996              	.LVL532:
 5997              	.L170:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 5998              		.loc 2 300 22 view .LVU1550
 5999              	.LBE4160:
 6000              	.LBE4159:
 6001              	.LBE4161:
 6002              	.LBE4171:
 6003              	.LBB4172:
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    size_type __capacity;
 6004              		.loc 3 759 14 view .LVU1551
 6005 0292 0020     		movs	r0, #0
 6006 0294 D4E7     		b	.L142
 6007              	.LVL533:
 6008              	.L143:
 6009              	.LBB4151:
 6010              	.LBI4151:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 6011              		.loc 3 178 7 is_stmt 1 view .LVU1552
 6012              	.LBB4152:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6013              		.loc 3 179 9 is_stmt 0 view .LVU1553
 6014 0296 26AB     		add	r3, sp, #152
 6015              	.LVL534:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6016              		.loc 3 179 9 view .LVU1554
 6017 0298 2493     		str	r3, [sp, #144]
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 410


 6018              		.loc 3 179 33 view .LVU1555
 6019 029a DCE7     		b	.L141
 6020              	.LVL535:
 6021              	.L103:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6022              		.loc 3 179 33 view .LVU1556
 6023              	.LBE4152:
 6024              	.LBE4151:
 6025              	.LBE4172:
 6026              	.LBE4180:
 6027              	.LBE4196:
  42:alohal/misc/text_transform.cpp ****                 case 15: output = "f" + output;
 6028              		.loc 16 42 17 is_stmt 1 view .LVU1557
 6029              		.loc 16 42 26 view .LVU1558
 6030              		.loc 16 42 39 is_stmt 0 view .LVU1559
 6031 029c 06AA     		add	r2, sp, #24
 6032 029e 2449     		ldr	r1, .L189+28
 6033              	.LVL536:
 6034              		.loc 16 42 39 view .LVU1560
 6035 02a0 2AA8     		add	r0, sp, #168
 6036 02a2 FFF7FEFF 		bl	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_
 6037              	.LVL537:
 6038              	.LBB4197:
 6039              	.LBI4197:
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 6040              		.loc 3 732 7 is_stmt 1 view .LVU1561
 6041              	.LBB4198:
 6042              	.LBI4198:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 6043              		.loc 3 221 7 view .LVU1562
 6044              	.LBB4199:
 6045              	.LBI4199:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6046              		.loc 3 186 7 view .LVU1563
 6047              	.LBB4200:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6048              		.loc 3 187 28 is_stmt 0 view .LVU1564
 6049 02a6 0698     		ldr	r0, [sp, #24]
 6050              	.LVL538:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6051              		.loc 3 187 28 view .LVU1565
 6052              	.LBE4200:
 6053              	.LBE4199:
 6054              	.LBB4201:
 6055              	.LBI4201:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6056              		.loc 3 200 7 is_stmt 1 view .LVU1566
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6057              		.loc 3 200 7 is_stmt 0 view .LVU1567
 6058              	.LBE4201:
 6059              	.LBE4198:
 6060              	.LBB4202:
 6061              	.LBB4203:
 6062              	.LBI4203:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 6063              		.loc 3 221 7 is_stmt 1 view .LVU1568
 6064              	.LBB4204:
ARM GAS  /tmp/ccEv8ptb.s 			page 411


 6065              	.LBI4204:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6066              		.loc 3 186 7 view .LVU1569
 6067              	.LBB4205:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6068              		.loc 3 187 28 is_stmt 0 view .LVU1570
 6069 02a8 2A99     		ldr	r1, [sp, #168]
 6070              	.LVL539:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6071              		.loc 3 187 28 view .LVU1571
 6072              	.LBE4205:
 6073              	.LBE4204:
 6074              	.LBB4206:
 6075              	.LBI4206:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6076              		.loc 3 200 7 is_stmt 1 view .LVU1572
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6077              		.loc 3 200 7 is_stmt 0 view .LVU1573
 6078              	.LBE4206:
 6079              	.LBE4203:
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 6080              		.loc 3 747 2 view .LVU1574
 6081 02aa 2CAB     		add	r3, sp, #176
 6082 02ac 9942     		cmp	r1, r3
 6083 02ae 1AD0     		beq	.L183
 6084              	.LVL540:
 6085              	.LBB4207:
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 6086              		.loc 3 761 6 view .LVU1575
 6087 02b0 08AB     		add	r3, sp, #32
 6088 02b2 9842     		cmp	r0, r3
 6089 02b4 29D0     		beq	.L171
 6090              	.LVL541:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 6091              		.loc 3 767 7 view .LVU1576
 6092 02b6 089B     		ldr	r3, [sp, #32]
 6093 02b8 9B46     		mov	fp, r3
 6094              	.LVL542:
 6095              	.L149:
 6096              	.LBB4208:
 6097              	.LBI4208:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 6098              		.loc 3 178 7 is_stmt 1 view .LVU1577
 6099              	.LBB4209:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6100              		.loc 3 179 9 is_stmt 0 view .LVU1578
 6101 02ba 0691     		str	r1, [sp, #24]
 6102              	.LVL543:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6103              		.loc 3 179 9 view .LVU1579
 6104              	.LBE4209:
 6105              	.LBE4208:
 6106              	.LBB4210:
 6107              	.LBI4210:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 6108              		.loc 3 936 7 is_stmt 1 view .LVU1580
 6109              	.LBB4211:
ARM GAS  /tmp/ccEv8ptb.s 			page 412


 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6110              		.loc 3 937 16 is_stmt 0 view .LVU1581
 6111 02bc 2B9B     		ldr	r3, [sp, #172]
 6112              	.LVL544:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6113              		.loc 3 937 16 view .LVU1582
 6114              	.LBE4211:
 6115              	.LBE4210:
 6116              	.LBB4212:
 6117              	.LBI4212:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 6118              		.loc 3 182 7 is_stmt 1 view .LVU1583
 6119              	.LBB4213:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6120              		.loc 3 183 9 is_stmt 0 view .LVU1584
 6121 02be 0793     		str	r3, [sp, #28]
 6122              	.LVL545:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6123              		.loc 3 183 9 view .LVU1585
 6124              	.LBE4213:
 6125              	.LBE4212:
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (__data)
 6126              		.loc 3 775 6 view .LVU1586
 6127 02c0 2C9B     		ldr	r3, [sp, #176]
 6128 02c2 0293     		str	r3, [sp, #8]
 6129              	.LVL546:
 6130              	.LBB4214:
 6131              	.LBI4214:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 6132              		.loc 3 210 7 is_stmt 1 view .LVU1587
 6133              	.LBB4215:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6134              		.loc 3 211 9 is_stmt 0 view .LVU1588
 6135 02c4 0893     		str	r3, [sp, #32]
 6136              	.LVL547:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6137              		.loc 3 211 9 view .LVU1589
 6138              	.LBE4215:
 6139              	.LBE4214:
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 6140              		.loc 3 776 6 view .LVU1590
 6141 02c6 0028     		cmp	r0, #0
 6142 02c8 21D0     		beq	.L150
 6143              	.LVL548:
 6144              	.LBB4216:
 6145              	.LBI4216:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 6146              		.loc 3 178 7 is_stmt 1 view .LVU1591
 6147              	.LBB4217:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6148              		.loc 3 179 9 is_stmt 0 view .LVU1592
 6149 02ca 2A90     		str	r0, [sp, #168]
 6150              	.LVL549:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6151              		.loc 3 179 9 view .LVU1593
 6152              	.LBE4217:
 6153              	.LBE4216:
ARM GAS  /tmp/ccEv8ptb.s 			page 413


 6154              	.LBB4218:
 6155              	.LBI4218:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 6156              		.loc 3 210 7 is_stmt 1 view .LVU1594
 6157              	.LBB4219:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6158              		.loc 3 211 9 is_stmt 0 view .LVU1595
 6159 02cc 5B46     		mov	r3, fp
 6160 02ce 2C93     		str	r3, [sp, #176]
 6161              	.LVL550:
 6162              	.L148:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6163              		.loc 3 211 9 view .LVU1596
 6164              	.LBE4219:
 6165              	.LBE4218:
 6166              	.LBE4207:
 6167              	.LBE4202:
 6168              	.LBB4242:
 6169              	.LBI4242:
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 6170              		.loc 3 1023 7 is_stmt 1 view .LVU1597
 6171              	.LBB4243:
 6172              	.LBI4243:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6173              		.loc 3 214 7 view .LVU1598
 6174              	.LBB4244:
 6175              	.LBI4244:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 6176              		.loc 3 182 7 view .LVU1599
 6177              	.LBB4245:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6178              		.loc 3 183 9 is_stmt 0 view .LVU1600
 6179 02d0 0023     		movs	r3, #0
 6180 02d2 2B93     		str	r3, [sp, #172]
 6181              	.LVL551:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6182              		.loc 3 183 9 view .LVU1601
 6183              	.LBE4245:
 6184              	.LBE4244:
 6185              	.LBB4246:
 6186              	.LBI4246:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6187              		.loc 3 186 7 is_stmt 1 view .LVU1602
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6188              		.loc 3 186 7 is_stmt 0 view .LVU1603
 6189              	.LBE4246:
 6190              	.LBB4247:
 6191              	.LBI4247:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 6192              		.loc 2 299 7 is_stmt 1 view .LVU1604
 6193              	.LBB4248:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6194              		.loc 2 300 9 view .LVU1605
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6195              		.loc 2 300 14 is_stmt 0 view .LVU1606
 6196 02d4 2A9A     		ldr	r2, [sp, #168]
 6197 02d6 1370     		strb	r3, [r2]
ARM GAS  /tmp/ccEv8ptb.s 			page 414


 6198              	.LVL552:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6199              		.loc 2 300 14 view .LVU1607
 6200              	.LBE4248:
 6201              	.LBE4247:
 6202              	.LBE4243:
 6203              	.LBE4242:
 6204              	.LBE4197:
 6205              	.LBB4250:
 6206              	.LBI4250:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 6207              		.loc 3 657 7 is_stmt 1 view .LVU1608
 6208              	.LBB4251:
 6209              	.LBI4251:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6210              		.loc 3 229 7 view .LVU1609
 6211              	.LBB4252:
 6212              	.LBB4253:
 6213              	.LBI4253:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 6214              		.loc 3 221 7 view .LVU1610
 6215              	.LBB4254:
 6216              	.LBI4254:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6217              		.loc 3 186 7 view .LVU1611
 6218              	.LBB4255:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6219              		.loc 3 187 28 is_stmt 0 view .LVU1612
 6220 02d8 2A98     		ldr	r0, [sp, #168]
 6221              	.LVL553:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6222              		.loc 3 187 28 view .LVU1613
 6223              	.LBE4255:
 6224              	.LBE4254:
 6225              	.LBB4256:
 6226              	.LBI4256:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6227              		.loc 3 200 7 is_stmt 1 view .LVU1614
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6228              		.loc 3 200 7 is_stmt 0 view .LVU1615
 6229              	.LBE4256:
 6230              	.LBE4253:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 6231              		.loc 3 231 2 view .LVU1616
 6232 02da 2CAB     		add	r3, sp, #176
 6233 02dc 9842     		cmp	r0, r3
 6234 02de 69D0     		beq	.L102
 6235              	.LVL554:
 6236              	.LBB4257:
 6237              	.LBI4257:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 6238              		.loc 3 236 7 is_stmt 1 view .LVU1617
 6239              	.LBB4258:
 6240              	.LBB4259:
 6241              	.LBI4259:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 6242              		.loc 8 469 7 view .LVU1618
ARM GAS  /tmp/ccEv8ptb.s 			page 415


 6243              	.LBB4260:
 6244              	.LBI4260:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 6245              		.loc 5 119 7 view .LVU1619
 6246              	.LBB4261:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 6247              		.loc 5 128 19 is_stmt 0 view .LVU1620
 6248 02e0 FFF7FEFF 		bl	_ZdlPv
 6249              	.LVL555:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 6250              		.loc 5 128 19 view .LVU1621
 6251              	.LBE4261:
 6252              	.LBE4260:
 6253              	.LBE4259:
 6254              	.LBE4258:
 6255              	.LBE4257:
 6256              	.LBE4252:
 6257              	.LBE4251:
 6258              	.LBB4262:
 6259              	.LBI4262:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6260              		.loc 3 150 14 is_stmt 1 view .LVU1622
 6261              	.LBB4263:
 6262              	.LBI4263:
 6263              		.loc 4 153 7 view .LVU1623
 6264              	.LBB4264:
 6265              	.LBI4264:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 6266              		.loc 5 89 7 view .LVU1624
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 6267              		.loc 5 89 7 is_stmt 0 view .LVU1625
 6268              	.LBE4264:
 6269              	.LBE4263:
 6270              	.LBE4262:
 6271              	.LBE4250:
  43:alohal/misc/text_transform.cpp ****                     break;
 6272              		.loc 16 43 21 is_stmt 1 view .LVU1626
 6273 02e4 66E0     		b	.L102
 6274              	.LVL556:
 6275              	.L183:
 6276              	.LBB4265:
 6277              	.LBB4249:
 6278              	.LBB4222:
 6279              	.LBI4222:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 6280              		.loc 3 930 7 view .LVU1627
 6281              	.LBB4223:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6282              		.loc 3 931 16 is_stmt 0 view .LVU1628
 6283 02e6 2B9A     		ldr	r2, [sp, #172]
 6284              	.LVL557:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6285              		.loc 3 931 16 view .LVU1629
 6286              	.LBE4223:
 6287              	.LBE4222:
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 6288              		.loc 3 750 6 view .LVU1630
ARM GAS  /tmp/ccEv8ptb.s 			page 416


 6289 02e8 002A     		cmp	r2, #0
 6290 02ea 03D0     		beq	.L146
 6291              	.LVL558:
 6292              	.LBB4224:
 6293              	.LBI4224:
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6294              		.loc 3 346 7 is_stmt 1 view .LVU1631
 6295              	.LBB4225:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 6296              		.loc 3 348 2 is_stmt 0 view .LVU1632
 6297 02ec 012A     		cmp	r2, #1
 6298 02ee 09D0     		beq	.L184
 6299              	.LVL559:
 6300              	.LBB4226:
 6301              	.LBI4226:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 6302              		.loc 2 361 7 is_stmt 1 view .LVU1633
 6303              	.LBB4227:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 6304              		.loc 2 363 2 view .LVU1634
 6305              		.loc 2 365 2 view .LVU1635
 6306              		.loc 2 365 49 is_stmt 0 view .LVU1636
 6307 02f0 FFF7FEFF 		bl	memcpy
 6308              	.LVL560:
 6309              	.L146:
 6310              		.loc 2 365 49 view .LVU1637
 6311              	.LBE4227:
 6312              	.LBE4226:
 6313              	.LBE4225:
 6314              	.LBE4224:
 6315              	.LBB4231:
 6316              	.LBI4231:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 6317              		.loc 3 930 7 is_stmt 1 view .LVU1638
 6318              	.LBB4232:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6319              		.loc 3 931 16 is_stmt 0 view .LVU1639
 6320 02f4 2B9B     		ldr	r3, [sp, #172]
 6321              	.LVL561:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6322              		.loc 3 931 16 view .LVU1640
 6323              	.LBE4232:
 6324              	.LBE4231:
 6325              	.LBB4233:
 6326              	.LBI4233:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6327              		.loc 3 214 7 is_stmt 1 view .LVU1641
 6328              	.LBB4234:
 6329              	.LBB4235:
 6330              	.LBI4235:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 6331              		.loc 3 182 7 view .LVU1642
 6332              	.LBB4236:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6333              		.loc 3 183 9 is_stmt 0 view .LVU1643
 6334 02f6 0793     		str	r3, [sp, #28]
 6335              	.LVL562:
ARM GAS  /tmp/ccEv8ptb.s 			page 417


 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6336              		.loc 3 183 9 view .LVU1644
 6337              	.LBE4236:
 6338              	.LBE4235:
 6339              	.LBB4237:
 6340              	.LBI4237:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6341              		.loc 3 186 7 is_stmt 1 view .LVU1645
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6342              		.loc 3 186 7 is_stmt 0 view .LVU1646
 6343              	.LBE4237:
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 6344              		.loc 3 217 31 view .LVU1647
 6345 02f8 069A     		ldr	r2, [sp, #24]
 6346 02fa 9446     		mov	ip, r2
 6347 02fc 6344     		add	r3, r3, ip
 6348              	.LVL563:
 6349              	.LBB4238:
 6350              	.LBI4238:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 6351              		.loc 2 299 7 is_stmt 1 view .LVU1648
 6352              	.LBB4239:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6353              		.loc 2 300 9 view .LVU1649
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6354              		.loc 2 300 14 is_stmt 0 view .LVU1650
 6355 02fe 0022     		movs	r2, #0
 6356 0300 1A70     		strb	r2, [r3]
 6357              	.LVL564:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6358              		.loc 2 300 14 view .LVU1651
 6359              	.LBE4239:
 6360              	.LBE4238:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6361              		.loc 3 218 7 view .LVU1652
 6362 0302 E5E7     		b	.L148
 6363              	.LVL565:
 6364              	.L184:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6365              		.loc 3 218 7 view .LVU1653
 6366              	.LBE4234:
 6367              	.LBE4233:
 6368              	.LBB4240:
 6369              	.LBB4230:
 6370              	.LBB4228:
 6371              	.LBI4228:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 6372              		.loc 2 299 7 is_stmt 1 view .LVU1654
 6373              	.LBB4229:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6374              		.loc 2 300 9 view .LVU1655
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6375              		.loc 2 300 16 is_stmt 0 view .LVU1656
 6376 0304 0B78     		ldrb	r3, [r1]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6377              		.loc 2 300 14 view .LVU1657
 6378 0306 0370     		strb	r3, [r0]
ARM GAS  /tmp/ccEv8ptb.s 			page 418


 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6379              		.loc 2 300 22 view .LVU1658
 6380 0308 F4E7     		b	.L146
 6381              	.LVL566:
 6382              	.L171:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6383              		.loc 2 300 22 view .LVU1659
 6384              	.LBE4229:
 6385              	.LBE4228:
 6386              	.LBE4230:
 6387              	.LBE4240:
 6388              	.LBB4241:
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    size_type __capacity;
 6389              		.loc 3 759 14 view .LVU1660
 6390 030a 0020     		movs	r0, #0
 6391 030c D5E7     		b	.L149
 6392              	.LVL567:
 6393              	.L150:
 6394              	.LBB4220:
 6395              	.LBI4220:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 6396              		.loc 3 178 7 is_stmt 1 view .LVU1661
 6397              	.LBB4221:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6398              		.loc 3 179 9 is_stmt 0 view .LVU1662
 6399 030e 2CAB     		add	r3, sp, #176
 6400              	.LVL568:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6401              		.loc 3 179 9 view .LVU1663
 6402 0310 2A93     		str	r3, [sp, #168]
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6403              		.loc 3 179 33 view .LVU1664
 6404 0312 DDE7     		b	.L148
 6405              	.L190:
 6406              		.align	2
 6407              	.L189:
 6408 0314 01000000 		.word	.LC8+1
 6409 0318 04000000 		.word	.LC11
 6410 031c 08000000 		.word	.LC14
 6411 0320 0C000000 		.word	.LC16
 6412 0324 10000000 		.word	.LC18
 6413 0328 14000000 		.word	.LC20
 6414 032c 18000000 		.word	.LC22
 6415 0330 1C000000 		.word	.LC24
 6416              	.LVL569:
 6417              	.L101:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6418              		.loc 3 179 33 view .LVU1665
 6419              	.LBE4221:
 6420              	.LBE4220:
 6421              	.LBE4241:
 6422              	.LBE4249:
 6423              	.LBE4265:
  44:alohal/misc/text_transform.cpp ****             }
  45:alohal/misc/text_transform.cpp ****         } else {
  46:alohal/misc/text_transform.cpp ****             output = to_string(remaining) + output;
 6424              		.loc 16 46 13 is_stmt 1 view .LVU1666
ARM GAS  /tmp/ccEv8ptb.s 			page 419


 6425              	.LBB4266:
 6426              	.LBI4266:
6086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
6088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
6094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     {
6100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const auto __size = __lhs.size() + __rhs.size();
6101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       const bool __cond = (__size > __lhs.capacity()
6102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			   && __size <= __rhs.capacity());
6103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       return __cond ? std::move(__rhs.insert(0, __lhs))
6104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	            : std::move(__lhs.append(__rhs));
6105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     }
6106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(const _CharT* __lhs,
6110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
6112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(_CharT __lhs,
6116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
6117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return std::move(__rhs.insert(0, 1, __lhs)); }
6118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const _CharT* __rhs)
6123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
6124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
6127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
6128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      _CharT __rhs)
6129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return std::move(__lhs.append(1, __rhs)); }
6130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
6131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // operator ==
6133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test equivalence of two strings.
6135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Second string.
6137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
6138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
ARM GAS  /tmp/ccEv8ptb.s 			page 420


6141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
6145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT>
6147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline
6148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
6149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator==(const basic_string<_CharT>& __lhs,
6150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
6151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return (__lhs.size() == __rhs.size()
6152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
6153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 						    __lhs.size())); }
6154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test equivalence of C string and string.
6157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  C string.
6158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  String.
6159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
6160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator==(const _CharT* __lhs,
6164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __rhs.compare(__lhs) == 0; }
6166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test equivalence of string and C string.
6169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  String.
6170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  C string.
6171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
6172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const _CharT* __rhs)
6177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
6178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // operator !=
6180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test difference of two strings.
6182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Second string.
6184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
6185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return !(__lhs == __rhs); }
6192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test difference of C string and string.
6195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  C string.
6196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  String.
6197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) != 0.  False otherwise.
ARM GAS  /tmp/ccEv8ptb.s 			page 421


6198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator!=(const _CharT* __lhs,
6202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return !(__lhs == __rhs); }
6204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test difference of string and C string.
6207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  String.
6208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  C string.
6209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
6210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const _CharT* __rhs)
6215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return !(__lhs == __rhs); }
6216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // operator <
6218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if string precedes string.
6220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Second string.
6222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
6223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
6230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if string precedes C string.
6233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  String.
6234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  C string.
6235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
6236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const _CharT* __rhs)
6241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
6242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if C string precedes string.
6245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  C string.
6246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  String.
6247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
6248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator<(const _CharT* __lhs,
6252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __rhs.compare(__lhs) > 0; }
6254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 422


6255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // operator >
6256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if string follows string.
6258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Second string.
6260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
6261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
6268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if string follows C string.
6271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  String.
6272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  C string.
6273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
6274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const _CharT* __rhs)
6279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
6280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if C string follows string.
6283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  C string.
6284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  String.
6285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
6286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator>(const _CharT* __lhs,
6290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __rhs.compare(__lhs) < 0; }
6292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // operator <=
6294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if string doesn't follow string.
6296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Second string.
6298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
6299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
6306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if string doesn't follow C string.
6309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  String.
6310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  C string.
6311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
ARM GAS  /tmp/ccEv8ptb.s 			page 423


6312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const _CharT* __rhs)
6317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
6318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if C string doesn't follow string.
6321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  C string.
6322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  String.
6323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
6324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator<=(const _CharT* __lhs,
6328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __rhs.compare(__lhs) >= 0; }
6330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // operator >=
6332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if string doesn't precede string.
6334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Second string.
6336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
6337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
6344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if string doesn't precede C string.
6347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  String.
6348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  C string.
6349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
6350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const _CharT* __rhs)
6355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
6356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Test if C string doesn't precede string.
6359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  C string.
6360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  String.
6361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
6362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline bool
6365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator>=(const _CharT* __lhs,
6366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	     const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return __rhs.compare(__lhs) <= 0; }
6368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 424


6369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Swap contents of two strings.
6371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __lhs  First string.
6372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __rhs  Second string.
6373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
6374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Exchanges the contents of @a __lhs and @a __rhs in constant time.
6375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline void
6378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
6379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	 basic_string<_CharT, _Traits, _Alloc>& __rhs)
6380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))
6381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { __lhs.swap(__rhs); }
6382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Read stream into a string.
6386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __is  Input stream.
6387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __str  Buffer to store into.
6388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  Reference to the input stream.
6389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
6390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Stores characters from @a __is into @a __str until whitespace is
6391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  found, the end of the stream is encountered, or str.max_size()
6392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  is reached.  If is.width() is non-zero, that is the limit on the
6393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  number of characters stored into @a __str.  Any previous
6394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  contents of @a __str are erased.
6395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_istream<_CharT, _Traits>&
6398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator>>(basic_istream<_CharT, _Traits>& __is,
6399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       basic_string<_CharT, _Traits, _Alloc>& __str);
6400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<>
6402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_istream<char>&
6403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator>>(basic_istream<char>& __is, basic_string<char>& __str);
6404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Write string to a stream.
6407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __os  Output stream.
6408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __str  String to write out.
6409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  Reference to the output stream.
6410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
6411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Output characters of @a __str into os following the same rules as for
6412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  writing a C string.
6413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_ostream<_CharT, _Traits>&
6416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     operator<<(basic_ostream<_CharT, _Traits>& __os,
6417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __str)
6418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     {
6419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
6420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       // 586. string inserter not a formatted function
6421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       return __ostream_insert(__os, __str.data(), __str.size());
6422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     }
6423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Read a line from stream into a string.
ARM GAS  /tmp/ccEv8ptb.s 			page 425


6426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __is  Input stream.
6427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __str  Buffer to store into.
6428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __delim  Character marking end of line.
6429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  Reference to the input stream.
6430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
6431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Stores characters from @a __is into @a __str until @a __delim is
6432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  found, the end of the stream is encountered, or str.max_size()
6433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  is reached.  Any previous contents of @a __str are erased.  If
6434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @a __delim is encountered, it is extracted but not stored into
6435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @a __str.
6436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_istream<_CharT, _Traits>&
6439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     getline(basic_istream<_CharT, _Traits>& __is,
6440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
6441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /**
6443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @brief  Read a line from stream into a string.
6444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __is  Input stream.
6445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @param __str  Buffer to store into.
6446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @return  Reference to the input stream.
6447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *
6448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  Stores characters from is into @a __str until &apos;\n&apos; is
6449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  found, the end of the stream is encountered, or str.max_size()
6450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  is reached.  Any previous contents of @a __str are erased.  If
6451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  end of line is encountered, it is extracted but not stored into
6452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    *  @a __str.
6453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****    */
6454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_istream<_CharT, _Traits>&
6456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     getline(basic_istream<_CharT, _Traits>& __is,
6457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    basic_string<_CharT, _Traits, _Alloc>& __str)
6458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return std::getline(__is, __str, __is.widen('\n')); }
6459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
6461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /// Read a line from an rvalue stream into a string.
6462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_istream<_CharT, _Traits>&
6464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     getline(basic_istream<_CharT, _Traits>&& __is,
6465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
6466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return std::getline(__is, __str, __delim); }
6467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   /// Read a line from an rvalue stream into a string.
6469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     inline basic_istream<_CharT, _Traits>&
6471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     getline(basic_istream<_CharT, _Traits>&& __is,
6472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    basic_string<_CharT, _Traits, _Alloc>& __str)
6473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     { return std::getline(__is, __str); }
6474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
6475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<>
6477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_istream<char>&
6478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     getline(basic_istream<char>& __in, basic_string<char>& __str,
6479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    char __delim);
6480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_USE_WCHAR_T
6482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   template<>
ARM GAS  /tmp/ccEv8ptb.s 			page 426


6483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     basic_istream<wchar_t>&
6484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****     getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
6485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    wchar_t __delim);
6486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif  
6487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_VERSION
6489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** } // namespace
6490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
6492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #include <ext/string_conversions.h>
6494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
6496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** {
6497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
6498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
6499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_USE_C99_STDLIB
6501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // 21.4 Numeric Conversions [string.conversions].
6502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   inline int
6503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   stoi(const string& __str, size_t* __idx = 0, int __base = 10)
6504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
6505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 					__idx, __base); }
6506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   inline long
6508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   stol(const string& __str, size_t* __idx = 0, int __base = 10)
6509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
6510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __idx, __base); }
6511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   inline unsigned long
6513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   stoul(const string& __str, size_t* __idx = 0, int __base = 10)
6514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
6515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __idx, __base); }
6516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   inline long long
6518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   stoll(const string& __str, size_t* __idx = 0, int __base = 10)
6519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
6520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __idx, __base); }
6521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   inline unsigned long long
6523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   stoull(const string& __str, size_t* __idx = 0, int __base = 10)
6524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
6525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			     __idx, __base); }
6526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // NB: strtof vs strtod.
6528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   inline float
6529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   stof(const string& __str, size_t* __idx = 0)
6530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
6531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   inline double
6533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   stod(const string& __str, size_t* __idx = 0)
6534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }
6535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   inline long double
6537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   stold(const string& __str, size_t* __idx = 0)
6538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }
6539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif // _GLIBCXX_USE_C99_STDLIB
ARM GAS  /tmp/ccEv8ptb.s 			page 427


6540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #if _GLIBCXX_USE_C99_STDIO
6542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // NB: (v)snprintf vs sprintf.
6543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
6544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   // DR 1261.
6545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   inline string
6546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   to_string(int __val)
 6427              		.loc 3 6546 3 view .LVU1667
 6428              	.LBB4267:
6547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****   { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 6429              		.loc 3 6547 5 view .LVU1668
6548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 					   "%d", __val); }
 6430              		.loc 3 6548 20 is_stmt 0 view .LVU1669
 6431 0334 0093     		str	r3, [sp]
 6432 0336 464B     		ldr	r3, .L191
 6433              	.LVL570:
 6434              		.loc 3 6548 20 view .LVU1670
 6435 0338 1022     		movs	r2, #16
 6436 033a 4649     		ldr	r1, .L191+4
 6437 033c 36A8     		add	r0, sp, #216
 6438 033e FFF7FEFF 		bl	_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPK
 6439              	.LVL571:
 6440              		.loc 3 6548 20 view .LVU1671
 6441              	.LBE4267:
 6442              	.LBE4266:
 6443              	.LBB4268:
 6444              	.LBI4268:
6085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
 6445              		.loc 3 6085 5 is_stmt 1 view .LVU1672
 6446              	.LBB4269:
 6447              	.LBI4269:
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
 6448              		.loc 3 1221 7 view .LVU1673
 6449              	.LBB4270:
 6450              	.LBB4271:
 6451              	.LBI4271:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6452              		.loc 3 186 7 view .LVU1674
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6453              		.loc 3 186 7 is_stmt 0 view .LVU1675
 6454              	.LBE4271:
 6455              	.LBB4272:
 6456              	.LBI4272:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 6457              		.loc 3 930 7 is_stmt 1 view .LVU1676
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 6458              		.loc 3 930 7 is_stmt 0 view .LVU1677
 6459              	.LBE4272:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6460              		.loc 3 1222 55 view .LVU1678
 6461 0342 079A     		ldr	r2, [sp, #28]
 6462 0344 0699     		ldr	r1, [sp, #24]
 6463 0346 36A8     		add	r0, sp, #216
 6464              	.LVL572:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6465              		.loc 3 1222 55 view .LVU1679
 6466 0348 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj
ARM GAS  /tmp/ccEv8ptb.s 			page 428


 6467              	.LVL573:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6468              		.loc 3 1222 55 view .LVU1680
 6469 034c 0700     		movs	r7, r0
 6470              	.LVL574:
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6471              		.loc 3 1222 55 view .LVU1681
 6472              	.LBE4270:
 6473              	.LBE4269:
 6474              	.LBB4273:
 6475              	.LBI4273:
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 6476              		.loc 3 552 7 is_stmt 1 view .LVU1682
 6477              	.LBB4274:
 6478              	.LBB4275:
 6479              	.LBB4276:
 6480              	.LBI4276:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6481              		.loc 3 190 7 view .LVU1683
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6482              		.loc 3 190 7 is_stmt 0 view .LVU1684
 6483              	.LBE4276:
 6484              	.LBB4277:
 6485              	.LBI4277:
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 6486              		.loc 3 286 7 is_stmt 1 view .LVU1685
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 6487              		.loc 3 286 7 is_stmt 0 view .LVU1686
 6488              	.LBE4277:
 6489              	.LBB4278:
 6490              	.LBI4278:
 6491              		.loc 6 99 5 is_stmt 1 view .LVU1687
 6492              		.loc 6 99 5 is_stmt 0 view .LVU1688
 6493              	.LBE4278:
 6494              	.LBB4279:
 6495              	.LBI4279:
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 6496              		.loc 3 159 2 is_stmt 1 view .LVU1689
 6497              	.LBB4280:
 6498              	.LBB4281:
 6499              	.LBB4282:
 6500              	.LBI4282:
 6501              		.loc 6 99 5 view .LVU1690
 6502              		.loc 6 99 5 is_stmt 0 view .LVU1691
 6503              	.LBE4282:
 6504              	.LBB4283:
 6505              	.LBI4283:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 6506              		.loc 4 141 7 is_stmt 1 view .LVU1692
 6507              	.LBB4284:
 6508              	.LBI4284:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 6509              		.loc 5 83 7 view .LVU1693
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 6510              		.loc 5 83 7 is_stmt 0 view .LVU1694
 6511              	.LBE4284:
 6512              	.LBE4283:
ARM GAS  /tmp/ccEv8ptb.s 			page 429


 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 6513              		.loc 3 160 46 view .LVU1695
 6514 034e 32AB     		add	r3, sp, #200
 6515              	.LVL575:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 6516              		.loc 3 160 46 view .LVU1696
 6517 0350 3093     		str	r3, [sp, #192]
 6518              	.LVL576:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 6519              		.loc 3 160 46 view .LVU1697
 6520              	.LBE4281:
 6521              	.LBE4280:
 6522              	.LBE4279:
 6523              	.LBB4285:
 6524              	.LBI4285:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 6525              		.loc 3 221 7 is_stmt 1 view .LVU1698
 6526              	.LBB4286:
 6527              	.LBI4286:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6528              		.loc 3 186 7 view .LVU1699
 6529              	.LBB4287:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6530              		.loc 3 187 28 is_stmt 0 view .LVU1700
 6531 0352 0368     		ldr	r3, [r0]
 6532              	.LVL577:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6533              		.loc 3 187 28 view .LVU1701
 6534              	.LBE4287:
 6535              	.LBE4286:
 6536              	.LBB4288:
 6537              	.LBI4288:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6538              		.loc 3 200 7 is_stmt 1 view .LVU1702
 6539              	.LBB4289:
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 6540              		.loc 3 203 57 is_stmt 0 view .LVU1703
 6541 0354 0600     		movs	r6, r0
 6542 0356 0836     		adds	r6, r6, #8
 6543              	.LVL578:
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 6544              		.loc 3 203 57 view .LVU1704
 6545              	.LBE4289:
 6546              	.LBE4288:
 6547              	.LBE4285:
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 6548              		.loc 3 555 2 view .LVU1705
 6549 0358 B342     		cmp	r3, r6
 6550 035a 41D0     		beq	.L185
 6551              	.LVL579:
 6552              	.LBB4290:
 6553              	.LBI4290:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6554              		.loc 3 186 7 is_stmt 1 view .LVU1706
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6555              		.loc 3 186 7 is_stmt 0 view .LVU1707
 6556              	.LBE4290:
ARM GAS  /tmp/ccEv8ptb.s 			page 430


 6557              	.LBB4291:
 6558              	.LBI4291:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 6559              		.loc 3 178 7 is_stmt 1 view .LVU1708
 6560              	.LBB4292:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6561              		.loc 3 179 9 is_stmt 0 view .LVU1709
 6562 035c 3093     		str	r3, [sp, #192]
 6563              	.LVL580:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6564              		.loc 3 179 9 view .LVU1710
 6565              	.LBE4292:
 6566              	.LBE4291:
 6567              	.LBB4293:
 6568              	.LBI4293:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 6569              		.loc 3 210 7 is_stmt 1 view .LVU1711
 6570              	.LBB4294:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6571              		.loc 3 211 9 is_stmt 0 view .LVU1712
 6572 035e 8368     		ldr	r3, [r0, #8]
 6573 0360 3293     		str	r3, [sp, #200]
 6574              	.LVL581:
 6575              	.L153:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6576              		.loc 3 211 9 view .LVU1713
 6577              	.LBE4294:
 6578              	.LBE4293:
 6579              	.LBB4295:
 6580              	.LBI4295:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 6581              		.loc 3 936 7 is_stmt 1 view .LVU1714
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 6582              		.loc 3 936 7 is_stmt 0 view .LVU1715
 6583              	.LBE4295:
 6584              	.LBB4296:
 6585              	.LBI4296:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 6586              		.loc 3 182 7 is_stmt 1 view .LVU1716
 6587              	.LBB4297:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6588              		.loc 3 183 9 is_stmt 0 view .LVU1717
 6589 0362 7B68     		ldr	r3, [r7, #4]
 6590 0364 3193     		str	r3, [sp, #196]
 6591              	.LVL582:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6592              		.loc 3 183 9 view .LVU1718
 6593              	.LBE4297:
 6594              	.LBE4296:
 6595              	.LBB4298:
 6596              	.LBI4298:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6597              		.loc 3 190 7 is_stmt 1 view .LVU1719
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6598              		.loc 3 190 7 is_stmt 0 view .LVU1720
 6599              	.LBE4298:
 6600              	.LBB4299:
ARM GAS  /tmp/ccEv8ptb.s 			page 431


 6601              	.LBI4299:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 6602              		.loc 3 178 7 is_stmt 1 view .LVU1721
 6603              	.LBB4300:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6604              		.loc 3 179 9 is_stmt 0 view .LVU1722
 6605 0366 3E60     		str	r6, [r7]
 6606              	.LVL583:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6607              		.loc 3 179 9 view .LVU1723
 6608              	.LBE4300:
 6609              	.LBE4299:
 6610              	.LBB4301:
 6611              	.LBI4301:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6612              		.loc 3 214 7 is_stmt 1 view .LVU1724
 6613              	.LBB4302:
 6614              	.LBI4302:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 6615              		.loc 3 182 7 view .LVU1725
 6616              	.LBB4303:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6617              		.loc 3 183 9 is_stmt 0 view .LVU1726
 6618 0368 0023     		movs	r3, #0
 6619 036a 7B60     		str	r3, [r7, #4]
 6620              	.LVL584:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6621              		.loc 3 183 9 view .LVU1727
 6622              	.LBE4303:
 6623              	.LBE4302:
 6624              	.LBB4304:
 6625              	.LBI4304:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 6626              		.loc 2 299 7 is_stmt 1 view .LVU1728
 6627              	.LBB4305:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6628              		.loc 2 300 9 view .LVU1729
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6629              		.loc 2 300 14 is_stmt 0 view .LVU1730
 6630 036c 3B72     		strb	r3, [r7, #8]
 6631              	.LVL585:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6632              		.loc 2 300 14 view .LVU1731
 6633              	.LBE4305:
 6634              	.LBE4304:
 6635              	.LBE4301:
 6636              	.LBE4275:
 6637              	.LBE4274:
 6638              	.LBE4273:
 6639              	.LBE4268:
 6640              	.LBB4311:
 6641              	.LBI4311:
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 6642              		.loc 3 732 7 is_stmt 1 view .LVU1732
 6643              	.LBB4312:
 6644              	.LBI4312:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
ARM GAS  /tmp/ccEv8ptb.s 			page 432


 6645              		.loc 3 221 7 view .LVU1733
 6646              	.LBB4313:
 6647              	.LBI4313:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6648              		.loc 3 186 7 view .LVU1734
 6649              	.LBB4314:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6650              		.loc 3 187 28 is_stmt 0 view .LVU1735
 6651 036e 0698     		ldr	r0, [sp, #24]
 6652              	.LVL586:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6653              		.loc 3 187 28 view .LVU1736
 6654              	.LBE4314:
 6655              	.LBE4313:
 6656              	.LBB4315:
 6657              	.LBI4315:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6658              		.loc 3 200 7 is_stmt 1 view .LVU1737
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6659              		.loc 3 200 7 is_stmt 0 view .LVU1738
 6660              	.LBE4315:
 6661              	.LBE4312:
 6662              	.LBB4316:
 6663              	.LBB4317:
 6664              	.LBI4317:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 6665              		.loc 3 221 7 is_stmt 1 view .LVU1739
 6666              	.LBB4318:
 6667              	.LBI4318:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6668              		.loc 3 186 7 view .LVU1740
 6669              	.LBB4319:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6670              		.loc 3 187 28 is_stmt 0 view .LVU1741
 6671 0370 3099     		ldr	r1, [sp, #192]
 6672              	.LVL587:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6673              		.loc 3 187 28 view .LVU1742
 6674              	.LBE4319:
 6675              	.LBE4318:
 6676              	.LBB4320:
 6677              	.LBI4320:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6678              		.loc 3 200 7 is_stmt 1 view .LVU1743
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6679              		.loc 3 200 7 is_stmt 0 view .LVU1744
 6680              	.LBE4320:
 6681              	.LBE4317:
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 6682              		.loc 3 747 2 view .LVU1745
 6683 0372 32AB     		add	r3, sp, #200
 6684 0374 9942     		cmp	r1, r3
 6685 0376 39D0     		beq	.L186
 6686              	.LVL588:
 6687              	.LBB4321:
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 6688              		.loc 3 761 6 view .LVU1746
ARM GAS  /tmp/ccEv8ptb.s 			page 433


 6689 0378 08AB     		add	r3, sp, #32
 6690 037a 9842     		cmp	r0, r3
 6691 037c 48D0     		beq	.L172
 6692              	.LVL589:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 		  }
 6693              		.loc 3 767 7 view .LVU1747
 6694 037e 089D     		ldr	r5, [sp, #32]
 6695              	.LVL590:
 6696              	.L158:
 6697              	.LBB4322:
 6698              	.LBI4322:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 6699              		.loc 3 178 7 is_stmt 1 view .LVU1748
 6700              	.LBB4323:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6701              		.loc 3 179 9 is_stmt 0 view .LVU1749
 6702 0380 0691     		str	r1, [sp, #24]
 6703              	.LVL591:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6704              		.loc 3 179 9 view .LVU1750
 6705              	.LBE4323:
 6706              	.LBE4322:
 6707              	.LBB4324:
 6708              	.LBI4324:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 6709              		.loc 3 936 7 is_stmt 1 view .LVU1751
 6710              	.LBB4325:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6711              		.loc 3 937 16 is_stmt 0 view .LVU1752
 6712 0382 319B     		ldr	r3, [sp, #196]
 6713              	.LVL592:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6714              		.loc 3 937 16 view .LVU1753
 6715              	.LBE4325:
 6716              	.LBE4324:
 6717              	.LBB4326:
 6718              	.LBI4326:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 6719              		.loc 3 182 7 is_stmt 1 view .LVU1754
 6720              	.LBB4327:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6721              		.loc 3 183 9 is_stmt 0 view .LVU1755
 6722 0384 0793     		str	r3, [sp, #28]
 6723              	.LVL593:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6724              		.loc 3 183 9 view .LVU1756
 6725              	.LBE4327:
 6726              	.LBE4326:
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    if (__data)
 6727              		.loc 3 775 6 view .LVU1757
 6728 0386 329B     		ldr	r3, [sp, #200]
 6729 0388 0293     		str	r3, [sp, #8]
 6730              	.LVL594:
 6731              	.LBB4328:
 6732              	.LBI4328:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 6733              		.loc 3 210 7 is_stmt 1 view .LVU1758
ARM GAS  /tmp/ccEv8ptb.s 			page 434


 6734              	.LBB4329:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6735              		.loc 3 211 9 is_stmt 0 view .LVU1759
 6736 038a 0893     		str	r3, [sp, #32]
 6737              	.LVL595:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6738              		.loc 3 211 9 view .LVU1760
 6739              	.LBE4329:
 6740              	.LBE4328:
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      {
 6741              		.loc 3 776 6 view .LVU1761
 6742 038c 0028     		cmp	r0, #0
 6743 038e 41D0     		beq	.L159
 6744              	.LVL596:
 6745              	.LBB4330:
 6746              	.LBI4330:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 6747              		.loc 3 178 7 is_stmt 1 view .LVU1762
 6748              	.LBB4331:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6749              		.loc 3 179 9 is_stmt 0 view .LVU1763
 6750 0390 3090     		str	r0, [sp, #192]
 6751              	.LVL597:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6752              		.loc 3 179 9 view .LVU1764
 6753              	.LBE4331:
 6754              	.LBE4330:
 6755              	.LBB4332:
 6756              	.LBI4332:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 6757              		.loc 3 210 7 is_stmt 1 view .LVU1765
 6758              	.LBB4333:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6759              		.loc 3 211 9 is_stmt 0 view .LVU1766
 6760 0392 3295     		str	r5, [sp, #200]
 6761              	.LVL598:
 6762              	.L157:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6763              		.loc 3 211 9 view .LVU1767
 6764              	.LBE4333:
 6765              	.LBE4332:
 6766              	.LBE4321:
 6767              	.LBE4316:
 6768              	.LBB4356:
 6769              	.LBI4356:
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 6770              		.loc 3 1023 7 is_stmt 1 view .LVU1768
 6771              	.LBB4357:
 6772              	.LBI4357:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6773              		.loc 3 214 7 view .LVU1769
 6774              	.LBB4358:
 6775              	.LBI4358:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 6776              		.loc 3 182 7 view .LVU1770
 6777              	.LBB4359:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 435


 6778              		.loc 3 183 9 is_stmt 0 view .LVU1771
 6779 0394 0023     		movs	r3, #0
 6780 0396 3193     		str	r3, [sp, #196]
 6781              	.LVL599:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6782              		.loc 3 183 9 view .LVU1772
 6783              	.LBE4359:
 6784              	.LBE4358:
 6785              	.LBB4360:
 6786              	.LBI4360:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6787              		.loc 3 186 7 is_stmt 1 view .LVU1773
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6788              		.loc 3 186 7 is_stmt 0 view .LVU1774
 6789              	.LBE4360:
 6790              	.LBB4361:
 6791              	.LBI4361:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 6792              		.loc 2 299 7 is_stmt 1 view .LVU1775
 6793              	.LBB4362:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6794              		.loc 2 300 9 view .LVU1776
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6795              		.loc 2 300 14 is_stmt 0 view .LVU1777
 6796 0398 309A     		ldr	r2, [sp, #192]
 6797 039a 1370     		strb	r3, [r2]
 6798              	.LVL600:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 6799              		.loc 2 300 14 view .LVU1778
 6800              	.LBE4362:
 6801              	.LBE4361:
 6802              	.LBE4357:
 6803              	.LBE4356:
 6804              	.LBE4311:
 6805              	.LBB4364:
 6806              	.LBI4364:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 6807              		.loc 3 657 7 is_stmt 1 view .LVU1779
 6808              	.LBB4365:
 6809              	.LBI4365:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6810              		.loc 3 229 7 view .LVU1780
 6811              	.LBB4366:
 6812              	.LBB4367:
 6813              	.LBI4367:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 6814              		.loc 3 221 7 view .LVU1781
 6815              	.LBB4368:
 6816              	.LBI4368:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6817              		.loc 3 186 7 view .LVU1782
 6818              	.LBB4369:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6819              		.loc 3 187 28 is_stmt 0 view .LVU1783
 6820 039c 3098     		ldr	r0, [sp, #192]
 6821              	.LVL601:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 436


 6822              		.loc 3 187 28 view .LVU1784
 6823              	.LBE4369:
 6824              	.LBE4368:
 6825              	.LBB4370:
 6826              	.LBI4370:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6827              		.loc 3 200 7 is_stmt 1 view .LVU1785
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6828              		.loc 3 200 7 is_stmt 0 view .LVU1786
 6829              	.LBE4370:
 6830              	.LBE4367:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 6831              		.loc 3 231 2 view .LVU1787
 6832 039e 32AB     		add	r3, sp, #200
 6833 03a0 9842     		cmp	r0, r3
 6834 03a2 01D0     		beq	.L160
 6835              	.LVL602:
 6836              	.LBB4371:
 6837              	.LBI4371:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 6838              		.loc 3 236 7 is_stmt 1 view .LVU1788
 6839              	.LBB4372:
 6840              	.LBB4373:
 6841              	.LBI4373:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 6842              		.loc 8 469 7 view .LVU1789
 6843              	.LBB4374:
 6844              	.LBI4374:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 6845              		.loc 5 119 7 view .LVU1790
 6846              	.LBB4375:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 6847              		.loc 5 128 19 is_stmt 0 view .LVU1791
 6848 03a4 FFF7FEFF 		bl	_ZdlPv
 6849              	.LVL603:
 6850              	.L160:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 6851              		.loc 5 128 19 view .LVU1792
 6852              	.LBE4375:
 6853              	.LBE4374:
 6854              	.LBE4373:
 6855              	.LBE4372:
 6856              	.LBE4371:
 6857              	.LBE4366:
 6858              	.LBE4365:
 6859              	.LBB4376:
 6860              	.LBI4376:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6861              		.loc 3 150 14 is_stmt 1 view .LVU1793
 6862              	.LBB4377:
 6863              	.LBI4377:
 6864              		.loc 4 153 7 view .LVU1794
 6865              	.LBB4378:
 6866              	.LBI4378:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 6867              		.loc 5 89 7 view .LVU1795
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 437


 6868              		.loc 5 89 7 is_stmt 0 view .LVU1796
 6869              	.LBE4378:
 6870              	.LBE4377:
 6871              	.LBE4376:
 6872              	.LBE4364:
 6873              	.LBB4379:
 6874              	.LBI4379:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 6875              		.loc 3 657 7 is_stmt 1 view .LVU1797
 6876              	.LBB4380:
 6877              	.LBI4380:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6878              		.loc 3 229 7 view .LVU1798
 6879              	.LBB4381:
 6880              	.LBB4382:
 6881              	.LBI4382:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 6882              		.loc 3 221 7 view .LVU1799
 6883              	.LBB4383:
 6884              	.LBI4383:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 6885              		.loc 3 186 7 view .LVU1800
 6886              	.LBB4384:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6887              		.loc 3 187 28 is_stmt 0 view .LVU1801
 6888 03a8 3698     		ldr	r0, [sp, #216]
 6889              	.LVL604:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 6890              		.loc 3 187 28 view .LVU1802
 6891              	.LBE4384:
 6892              	.LBE4383:
 6893              	.LBB4385:
 6894              	.LBI4385:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6895              		.loc 3 200 7 is_stmt 1 view .LVU1803
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6896              		.loc 3 200 7 is_stmt 0 view .LVU1804
 6897              	.LBE4385:
 6898              	.LBE4382:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 6899              		.loc 3 231 2 view .LVU1805
 6900 03aa 38AB     		add	r3, sp, #224
 6901 03ac 9842     		cmp	r0, r3
 6902 03ae 01D0     		beq	.L102
 6903              	.LVL605:
 6904              	.LBB4386:
 6905              	.LBI4386:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 6906              		.loc 3 236 7 is_stmt 1 view .LVU1806
 6907              	.LBB4387:
 6908              	.LBB4388:
 6909              	.LBI4388:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 6910              		.loc 8 469 7 view .LVU1807
 6911              	.LBB4389:
 6912              	.LBI4389:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 438


 6913              		.loc 5 119 7 view .LVU1808
 6914              	.LBB4390:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 6915              		.loc 5 128 19 is_stmt 0 view .LVU1809
 6916 03b0 FFF7FEFF 		bl	_ZdlPv
 6917              	.LVL606:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 6918              		.loc 5 128 19 view .LVU1810
 6919              	.LBE4390:
 6920              	.LBE4389:
 6921              	.LBE4388:
 6922              	.LBE4387:
 6923              	.LBE4386:
 6924              	.LBE4381:
 6925              	.LBE4380:
 6926              	.LBB4391:
 6927              	.LBI4391:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 6928              		.loc 3 150 14 is_stmt 1 view .LVU1811
 6929              	.LBB4392:
 6930              	.LBI4392:
 6931              		.loc 4 153 7 view .LVU1812
 6932              	.LBB4393:
 6933              	.LBI4393:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 6934              		.loc 5 89 7 view .LVU1813
 6935              	.L102:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 6936              		.loc 5 89 7 is_stmt 0 view .LVU1814
 6937              	.LBE4393:
 6938              	.LBE4392:
 6939              	.LBE4391:
 6940              	.LBE4379:
  47:alohal/misc/text_transform.cpp ****         }
  48:alohal/misc/text_transform.cpp ****         dec_number = dec_number / 16;
 6941              		.loc 16 48 9 is_stmt 1 view .LVU1815
 6942              		.loc 16 48 20 is_stmt 0 view .LVU1816
 6943 03b4 E217     		asrs	r2, r4, #31
 6944 03b6 0F23     		movs	r3, #15
 6945              	.LVL607:
 6946              		.loc 16 48 20 view .LVU1817
 6947 03b8 1340     		ands	r3, r2
 6948              	.LVL608:
 6949              		.loc 16 48 20 view .LVU1818
 6950 03ba 1C19     		adds	r4, r3, r4
 6951              	.LVL609:
 6952              		.loc 16 48 20 view .LVU1819
 6953 03bc 2411     		asrs	r4, r4, #4
 6954              	.LVL610:
 6955              	.L162:
  28:alohal/misc/text_transform.cpp ****         remaining = dec_number % 16;
 6956              		.loc 16 28 5 is_stmt 1 view .LVU1820
  28:alohal/misc/text_transform.cpp ****         remaining = dec_number % 16;
 6957              		.loc 16 28 23 view .LVU1821
 6958 03be 002C     		cmp	r4, #0
 6959 03c0 2BDD     		ble	.L100
  29:alohal/misc/text_transform.cpp ****         if (remaining > 9) {
ARM GAS  /tmp/ccEv8ptb.s 			page 439


 6960              		.loc 16 29 9 view .LVU1822
  29:alohal/misc/text_transform.cpp ****         if (remaining > 9) {
 6961              		.loc 16 29 19 is_stmt 0 view .LVU1823
 6962 03c2 E217     		asrs	r2, r4, #31
 6963 03c4 120F     		lsrs	r2, r2, #28
 6964 03c6 A118     		adds	r1, r4, r2
 6965 03c8 0F23     		movs	r3, #15
 6966 03ca 0B40     		ands	r3, r1
 6967 03cc 9B1A     		subs	r3, r3, r2
 6968              	.LVL611:
  30:alohal/misc/text_transform.cpp ****             switch (remaining) {
 6969              		.loc 16 30 9 is_stmt 1 view .LVU1824
 6970 03ce 092B     		cmp	r3, #9
 6971 03d0 B0DD     		ble	.L101
  31:alohal/misc/text_transform.cpp ****                 case 10: output = "a" + output;
 6972              		.loc 16 31 13 view .LVU1825
 6973 03d2 0A3B     		subs	r3, r3, #10
 6974              	.LVL612:
  31:alohal/misc/text_transform.cpp ****                 case 10: output = "a" + output;
 6975              		.loc 16 31 13 is_stmt 0 view .LVU1826
 6976 03d4 052B     		cmp	r3, #5
 6977 03d6 EDD8     		bhi	.L102
 6978 03d8 9B00     		lsls	r3, r3, #2
 6979              	.LVL613:
  31:alohal/misc/text_transform.cpp ****                 case 10: output = "a" + output;
 6980              		.loc 16 31 13 view .LVU1827
 6981 03da 1F4A     		ldr	r2, .L191+8
 6982              	.LVL614:
  31:alohal/misc/text_transform.cpp ****                 case 10: output = "a" + output;
 6983              		.loc 16 31 13 view .LVU1828
 6984 03dc D358     		ldr	r3, [r2, r3]
 6985 03de 9F46     		mov	pc, r3
 6986              		.section	.rodata._Z7dec2hexB5cxx11i,"a",%progbits
 6987              		.align	2
 6988              	.L104:
 6989 0000 3A000000 		.word	.L109
 6990 0004 B4000000 		.word	.L108
 6991 0008 2E010000 		.word	.L107
 6992 000c A8010000 		.word	.L106
 6993 0010 22020000 		.word	.L105
 6994 0014 9C020000 		.word	.L103
 6995              		.section	.text._Z7dec2hexB5cxx11i
 6996              	.LVL615:
 6997              	.L185:
 6998              	.LBB4394:
 6999              	.LBB4310:
 7000              	.LBB4309:
 7001              	.LBB4308:
 7002              	.LBB4306:
 7003              	.LBI4306:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 7004              		.loc 2 361 7 is_stmt 1 view .LVU1829
 7005              	.LBB4307:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 7006              		.loc 2 363 2 view .LVU1830
 7007              		.loc 2 365 2 view .LVU1831
 7008              		.loc 2 365 49 is_stmt 0 view .LVU1832
ARM GAS  /tmp/ccEv8ptb.s 			page 440


 7009 03e0 1022     		movs	r2, #16
 7010 03e2 3100     		movs	r1, r6
 7011 03e4 32A8     		add	r0, sp, #200
 7012              	.LVL616:
 7013              		.loc 2 365 49 view .LVU1833
 7014 03e6 FFF7FEFF 		bl	memcpy
 7015              	.LVL617:
 7016              		.loc 2 365 49 view .LVU1834
 7017 03ea BAE7     		b	.L153
 7018              	.LVL618:
 7019              	.L186:
 7020              		.loc 2 365 49 view .LVU1835
 7021              	.LBE4307:
 7022              	.LBE4306:
 7023              	.LBE4308:
 7024              	.LBE4309:
 7025              	.LBE4310:
 7026              	.LBE4394:
 7027              	.LBB4395:
 7028              	.LBB4363:
 7029              	.LBB4336:
 7030              	.LBI4336:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 7031              		.loc 3 930 7 is_stmt 1 view .LVU1836
 7032              	.LBB4337:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7033              		.loc 3 931 16 is_stmt 0 view .LVU1837
 7034 03ec 319A     		ldr	r2, [sp, #196]
 7035              	.LVL619:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7036              		.loc 3 931 16 view .LVU1838
 7037              	.LBE4337:
 7038              	.LBE4336:
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 7039              		.loc 3 750 6 view .LVU1839
 7040 03ee 002A     		cmp	r2, #0
 7041 03f0 03D0     		beq	.L155
 7042              	.LVL620:
 7043              	.LBB4338:
 7044              	.LBI4338:
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7045              		.loc 3 346 7 is_stmt 1 view .LVU1840
 7046              	.LBB4339:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 7047              		.loc 3 348 2 is_stmt 0 view .LVU1841
 7048 03f2 012A     		cmp	r2, #1
 7049 03f4 09D0     		beq	.L187
 7050              	.LVL621:
 7051              	.LBB4340:
 7052              	.LBI4340:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 7053              		.loc 2 361 7 is_stmt 1 view .LVU1842
 7054              	.LBB4341:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 7055              		.loc 2 363 2 view .LVU1843
 7056              		.loc 2 365 2 view .LVU1844
 7057              		.loc 2 365 49 is_stmt 0 view .LVU1845
ARM GAS  /tmp/ccEv8ptb.s 			page 441


 7058 03f6 FFF7FEFF 		bl	memcpy
 7059              	.LVL622:
 7060              	.L155:
 7061              		.loc 2 365 49 view .LVU1846
 7062              	.LBE4341:
 7063              	.LBE4340:
 7064              	.LBE4339:
 7065              	.LBE4338:
 7066              	.LBB4345:
 7067              	.LBI4345:
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 7068              		.loc 3 930 7 is_stmt 1 view .LVU1847
 7069              	.LBB4346:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7070              		.loc 3 931 16 is_stmt 0 view .LVU1848
 7071 03fa 319B     		ldr	r3, [sp, #196]
 7072              	.LVL623:
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7073              		.loc 3 931 16 view .LVU1849
 7074              	.LBE4346:
 7075              	.LBE4345:
 7076              	.LBB4347:
 7077              	.LBI4347:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7078              		.loc 3 214 7 is_stmt 1 view .LVU1850
 7079              	.LBB4348:
 7080              	.LBB4349:
 7081              	.LBI4349:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 7082              		.loc 3 182 7 view .LVU1851
 7083              	.LBB4350:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7084              		.loc 3 183 9 is_stmt 0 view .LVU1852
 7085 03fc 0793     		str	r3, [sp, #28]
 7086              	.LVL624:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7087              		.loc 3 183 9 view .LVU1853
 7088              	.LBE4350:
 7089              	.LBE4349:
 7090              	.LBB4351:
 7091              	.LBI4351:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7092              		.loc 3 186 7 is_stmt 1 view .LVU1854
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7093              		.loc 3 186 7 is_stmt 0 view .LVU1855
 7094              	.LBE4351:
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       }
 7095              		.loc 3 217 31 view .LVU1856
 7096 03fe 069A     		ldr	r2, [sp, #24]
 7097 0400 9446     		mov	ip, r2
 7098 0402 6344     		add	r3, r3, ip
 7099              	.LVL625:
 7100              	.LBB4352:
 7101              	.LBI4352:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 7102              		.loc 2 299 7 is_stmt 1 view .LVU1857
 7103              	.LBB4353:
ARM GAS  /tmp/ccEv8ptb.s 			page 442


 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7104              		.loc 2 300 9 view .LVU1858
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7105              		.loc 2 300 14 is_stmt 0 view .LVU1859
 7106 0404 0022     		movs	r2, #0
 7107 0406 1A70     		strb	r2, [r3]
 7108              	.LVL626:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7109              		.loc 2 300 14 view .LVU1860
 7110              	.LBE4353:
 7111              	.LBE4352:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7112              		.loc 3 218 7 view .LVU1861
 7113 0408 C4E7     		b	.L157
 7114              	.LVL627:
 7115              	.L187:
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7116              		.loc 3 218 7 view .LVU1862
 7117              	.LBE4348:
 7118              	.LBE4347:
 7119              	.LBB4354:
 7120              	.LBB4344:
 7121              	.LBB4342:
 7122              	.LBI4342:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 7123              		.loc 2 299 7 is_stmt 1 view .LVU1863
 7124              	.LBB4343:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7125              		.loc 2 300 9 view .LVU1864
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7126              		.loc 2 300 16 is_stmt 0 view .LVU1865
 7127 040a 0B78     		ldrb	r3, [r1]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7128              		.loc 2 300 14 view .LVU1866
 7129 040c 0370     		strb	r3, [r0]
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7130              		.loc 2 300 22 view .LVU1867
 7131 040e F4E7     		b	.L155
 7132              	.LVL628:
 7133              	.L172:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7134              		.loc 2 300 22 view .LVU1868
 7135              	.LBE4343:
 7136              	.LBE4342:
 7137              	.LBE4344:
 7138              	.LBE4354:
 7139              	.LBB4355:
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	    size_type __capacity;
 7140              		.loc 3 759 14 view .LVU1869
 7141 0410 0020     		movs	r0, #0
 7142 0412 B5E7     		b	.L158
 7143              	.LVL629:
 7144              	.L159:
 7145              	.LBB4334:
 7146              	.LBI4334:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 7147              		.loc 3 178 7 is_stmt 1 view .LVU1870
ARM GAS  /tmp/ccEv8ptb.s 			page 443


 7148              	.LBB4335:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7149              		.loc 3 179 9 is_stmt 0 view .LVU1871
 7150 0414 32AB     		add	r3, sp, #200
 7151              	.LVL630:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7152              		.loc 3 179 9 view .LVU1872
 7153 0416 3093     		str	r3, [sp, #192]
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7154              		.loc 3 179 33 view .LVU1873
 7155 0418 BCE7     		b	.L157
 7156              	.LVL631:
 7157              	.L100:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7158              		.loc 3 179 33 view .LVU1874
 7159 041a 4646     		mov	r6, r8
 7160              	.LBE4335:
 7161              	.LBE4334:
 7162              	.LBE4355:
 7163              	.LBE4363:
 7164              	.LBE4395:
  49:alohal/misc/text_transform.cpp ****     }
  50:alohal/misc/text_transform.cpp ****     return output;
 7165              		.loc 16 50 5 is_stmt 1 view .LVU1875
 7166              	.LVL632:
 7167              	.LBB4396:
 7168              	.LBI4396:
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 7169              		.loc 3 552 7 view .LVU1876
 7170              	.LBB4397:
 7171              	.LBB4398:
 7172              	.LBI4398:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7173              		.loc 3 190 7 view .LVU1877
 7174              	.LBB4399:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 7175              		.loc 3 193 51 is_stmt 0 view .LVU1878
 7176 041c 4046     		mov	r0, r8
 7177 041e 0830     		adds	r0, r0, #8
 7178              	.LVL633:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 7179              		.loc 3 193 51 view .LVU1879
 7180              	.LBE4399:
 7181              	.LBE4398:
 7182              	.LBB4400:
 7183              	.LBI4400:
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 7184              		.loc 3 286 7 is_stmt 1 view .LVU1880
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 7185              		.loc 3 286 7 is_stmt 0 view .LVU1881
 7186              	.LBE4400:
 7187              	.LBB4401:
 7188              	.LBI4401:
 7189              		.loc 6 99 5 is_stmt 1 view .LVU1882
 7190              		.loc 6 99 5 is_stmt 0 view .LVU1883
 7191              	.LBE4401:
 7192              	.LBB4402:
ARM GAS  /tmp/ccEv8ptb.s 			page 444


 7193              	.LBI4402:
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 7194              		.loc 3 159 2 is_stmt 1 view .LVU1884
 7195              	.LBB4403:
 7196              	.LBB4404:
 7197              	.LBI4404:
 7198              		.loc 6 99 5 view .LVU1885
 7199              		.loc 6 99 5 is_stmt 0 view .LVU1886
 7200              	.LBE4404:
 7201              	.LBB4405:
 7202              	.LBI4405:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 7203              		.loc 4 141 7 is_stmt 1 view .LVU1887
 7204              	.LBB4406:
 7205              	.LBI4406:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7206              		.loc 5 83 7 view .LVU1888
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7207              		.loc 5 83 7 is_stmt 0 view .LVU1889
 7208              	.LBE4406:
 7209              	.LBE4405:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 7210              		.loc 3 160 46 view .LVU1890
 7211 0420 3060     		str	r0, [r6]
 7212              	.LVL634:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 7213              		.loc 3 160 46 view .LVU1891
 7214              	.LBE4403:
 7215              	.LBE4402:
 7216              	.LBB4407:
 7217              	.LBI4407:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 7218              		.loc 3 221 7 is_stmt 1 view .LVU1892
 7219              	.LBB4408:
 7220              	.LBI4408:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7221              		.loc 3 186 7 view .LVU1893
 7222              	.LBB4409:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7223              		.loc 3 187 28 is_stmt 0 view .LVU1894
 7224 0422 069B     		ldr	r3, [sp, #24]
 7225              	.LVL635:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7226              		.loc 3 187 28 view .LVU1895
 7227              	.LBE4409:
 7228              	.LBE4408:
 7229              	.LBB4410:
 7230              	.LBI4410:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7231              		.loc 3 200 7 is_stmt 1 view .LVU1896
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7232              		.loc 3 200 7 is_stmt 0 view .LVU1897
 7233              	.LBE4410:
 7234              	.LBE4407:
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  {
 7235              		.loc 3 555 2 view .LVU1898
 7236 0424 08AA     		add	r2, sp, #32
ARM GAS  /tmp/ccEv8ptb.s 			page 445


 7237 0426 9342     		cmp	r3, r2
 7238 0428 0CD0     		beq	.L188
 7239              	.LVL636:
 7240              	.LBB4411:
 7241              	.LBI4411:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7242              		.loc 3 186 7 is_stmt 1 view .LVU1899
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7243              		.loc 3 186 7 is_stmt 0 view .LVU1900
 7244              	.LBE4411:
 7245              	.LBB4412:
 7246              	.LBI4412:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 7247              		.loc 3 178 7 is_stmt 1 view .LVU1901
 7248              	.LBB4413:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7249              		.loc 3 179 9 is_stmt 0 view .LVU1902
 7250 042a 3360     		str	r3, [r6]
 7251              	.LVL637:
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7252              		.loc 3 179 9 view .LVU1903
 7253              	.LBE4413:
 7254              	.LBE4412:
 7255              	.LBB4414:
 7256              	.LBI4414:
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 7257              		.loc 3 210 7 is_stmt 1 view .LVU1904
 7258              	.LBB4415:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7259              		.loc 3 211 9 is_stmt 0 view .LVU1905
 7260 042c 089B     		ldr	r3, [sp, #32]
 7261 042e B360     		str	r3, [r6, #8]
 7262              	.LVL638:
 7263              	.L164:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7264              		.loc 3 211 9 view .LVU1906
 7265              	.LBE4415:
 7266              	.LBE4414:
 7267              	.LBB4416:
 7268              	.LBI4416:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 7269              		.loc 3 936 7 is_stmt 1 view .LVU1907
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 7270              		.loc 3 936 7 is_stmt 0 view .LVU1908
 7271              	.LBE4416:
 7272              	.LBB4417:
 7273              	.LBI4417:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 7274              		.loc 3 182 7 is_stmt 1 view .LVU1909
 7275              	.LBB4418:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7276              		.loc 3 183 9 is_stmt 0 view .LVU1910
 7277 0430 079B     		ldr	r3, [sp, #28]
 7278 0432 7360     		str	r3, [r6, #4]
 7279              	.LVL639:
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7280              		.loc 3 183 9 view .LVU1911
ARM GAS  /tmp/ccEv8ptb.s 			page 446


 7281              	.LBE4418:
 7282              	.LBE4417:
 7283              	.LBB4419:
 7284              	.LBI4419:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7285              		.loc 3 190 7 is_stmt 1 view .LVU1912
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7286              		.loc 3 190 7 is_stmt 0 view .LVU1913
 7287              	.LBE4419:
 7288              	.LBB4420:
 7289              	.LBI4420:
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 7290              		.loc 3 178 7 is_stmt 1 view .LVU1914
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 7291              		.loc 3 178 7 is_stmt 0 view .LVU1915
 7292              	.LBE4420:
 7293              	.LBB4421:
 7294              	.LBI4421:
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7295              		.loc 3 214 7 is_stmt 1 view .LVU1916
 7296              	.LBB4422:
 7297              	.LBI4422:
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 7298              		.loc 3 182 7 view .LVU1917
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 7299              		.loc 3 182 7 is_stmt 0 view .LVU1918
 7300              	.LBE4422:
 7301              	.LBB4423:
 7302              	.LBI4423:
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 7303              		.loc 2 299 7 is_stmt 1 view .LVU1919
 7304              	.LBB4424:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7305              		.loc 2 300 9 view .LVU1920
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 
 7306              		.loc 2 300 9 is_stmt 0 view .LVU1921
 7307              	.LBE4424:
 7308              	.LBE4423:
 7309              	.LBE4421:
 7310              	.LBE4397:
 7311              	.LBE4396:
 7312              	.LBB4428:
 7313              	.LBI4428:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 7314              		.loc 3 657 7 is_stmt 1 view .LVU1922
 7315              	.LBB4429:
 7316              	.LBB4430:
 7317              	.LBI4430:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7318              		.loc 3 229 7 view .LVU1923
 7319              	.LBB4431:
 7320              	.LBB4432:
 7321              	.LBI4432:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 7322              		.loc 3 221 7 view .LVU1924
 7323              	.LBB4433:
 7324              	.LBI4433:
ARM GAS  /tmp/ccEv8ptb.s 			page 447


 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7325              		.loc 3 186 7 view .LVU1925
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7326              		.loc 3 186 7 is_stmt 0 view .LVU1926
 7327              	.LBE4433:
 7328              	.LBB4434:
 7329              	.LBI4434:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7330              		.loc 3 200 7 is_stmt 1 view .LVU1927
 7331              	.L97:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7332              		.loc 3 200 7 is_stmt 0 view .LVU1928
 7333              	.LBE4434:
 7334              	.LBE4432:
 7335              	.LBE4431:
 7336              	.LBE4430:
 7337              	.LBE4429:
 7338              	.LBE4428:
  51:alohal/misc/text_transform.cpp **** }
 7339              		.loc 16 51 1 view .LVU1929
 7340 0434 3000     		movs	r0, r6
 7341 0436 3DB0     		add	sp, sp, #244
 7342              		@ sp needed
 7343              	.LVL640:
 7344              	.LVL641:
 7345              		.loc 16 51 1 view .LVU1930
 7346 0438 F0BC     		pop	{r4, r5, r6, r7}
 7347 043a BB46     		mov	fp, r7
 7348 043c B246     		mov	r10, r6
 7349 043e A946     		mov	r9, r5
 7350 0440 A046     		mov	r8, r4
 7351 0442 F0BD     		pop	{r4, r5, r6, r7, pc}
 7352              	.LVL642:
 7353              	.L188:
 7354              	.LBB4435:
 7355              	.LBB4427:
 7356              	.LBB4425:
 7357              	.LBI4425:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h ****       {
 7358              		.loc 2 361 7 is_stmt 1 view .LVU1931
 7359              	.LBB4426:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h **** 	  return __s1;
 7360              		.loc 2 363 2 view .LVU1932
 7361              		.loc 2 365 2 view .LVU1933
 7362              		.loc 2 365 49 is_stmt 0 view .LVU1934
 7363 0444 1022     		movs	r2, #16
 7364              	.LVL643:
 7365              		.loc 2 365 49 view .LVU1935
 7366 0446 08A9     		add	r1, sp, #32
 7367              	.LVL644:
 7368              		.loc 2 365 49 view .LVU1936
 7369 0448 FFF7FEFF 		bl	memcpy
 7370              	.LVL645:
 7371              		.loc 2 365 49 view .LVU1937
 7372 044c F0E7     		b	.L164
 7373              	.L192:
 7374 044e C046     		.align	2
ARM GAS  /tmp/ccEv8ptb.s 			page 448


 7375              	.L191:
 7376 0450 20000000 		.word	.LC26
 7377 0454 00000000 		.word	vsnprintf
 7378 0458 00000000 		.word	.L104
 7379              	.LBE4426:
 7380              	.LBE4425:
 7381              	.LBE4427:
 7382              	.LBE4435:
 7383              		.cfi_endproc
 7384              	.LFE2101:
 7386              		.section	.text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIc
 7387              		.align	1
 7388              		.weak	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_
 7389              		.syntax unified
 7390              		.code	16
 7391              		.thumb_func
 7392              		.fpu softvfp
 7394              	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsI
 7395              	.LVL646:
 7396              	.LFB2660:
1797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_(_Base_ptr __x, _Base_ptr __p,
 7397              		.loc 7 1797 7 is_stmt 1 view -0
 7398              		.cfi_startproc
 7399              		@ args = 4, pretend = 0, frame = 0
 7400              		@ frame_needed = 0, uses_anonymous_args = 0
1797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_(_Base_ptr __x, _Base_ptr __p,
 7401              		.loc 7 1797 7 is_stmt 0 view .LVU1939
 7402 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7403              	.LCFI29:
 7404              		.cfi_def_cfa_offset 20
 7405              		.cfi_offset 4, -20
 7406              		.cfi_offset 5, -16
 7407              		.cfi_offset 6, -12
 7408              		.cfi_offset 7, -8
 7409              		.cfi_offset 14, -4
 7410 0002 C646     		mov	lr, r8
 7411 0004 00B5     		push	{lr}
 7412              	.LCFI30:
 7413              		.cfi_def_cfa_offset 24
 7414              		.cfi_offset 8, -24
 7415 0006 0500     		movs	r5, r0
 7416 0008 1700     		movs	r7, r2
 7417 000a 1E00     		movs	r6, r3
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 							_S_key(__p)));
 7418              		.loc 7 1807 10 view .LVU1940
 7419 000c 0029     		cmp	r1, #0
 7420 000e 1ED0     		beq	.L198
 7421 0010 0123     		movs	r3, #1
 7422              	.LVL647:
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 							_S_key(__p)));
 7423              		.loc 7 1807 10 view .LVU1941
 7424 0012 9846     		mov	r8, r3
 7425              	.LVL648:
 7426              	.L194:
 7427              	.LBB4484:
 7428              	.LBI4484:
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
ARM GAS  /tmp/ccEv8ptb.s 			page 449


 7429              		.loc 7 546 4 is_stmt 1 view .LVU1942
 7430              	.LBB4485:
 7431              	.LBI4485:
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 7432              		.loc 7 628 2 view .LVU1943
 7433              	.LBB4486:
 7434              	.LBB4487:
 7435              	.LBI4487:
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 7436              		.loc 7 579 7 view .LVU1944
 7437              	.LBB4488:
 7438              	.LBI4488:
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 7439              		.loc 8 443 7 view .LVU1945
 7440              	.LBB4489:
 7441              	.LBI4489:
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 7442              		.loc 5 102 7 view .LVU1946
 7443              	.LBB4490:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 7444              		.loc 5 114 41 is_stmt 0 view .LVU1947
 7445 0014 2C20     		movs	r0, #44
 7446              	.LVL649:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 7447              		.loc 5 114 41 view .LVU1948
 7448 0016 FFF7FEFF 		bl	_Znwj
 7449              	.LVL650:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 7450              		.loc 5 114 41 view .LVU1949
 7451 001a 0400     		movs	r4, r0
 7452              	.LVL651:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 7453              		.loc 5 114 41 view .LVU1950
 7454              	.LBE4490:
 7455              	.LBE4489:
 7456              	.LBE4488:
 7457              	.LBE4487:
 7458              	.LBB4491:
 7459              	.LBI4491:
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 7460              		.loc 7 609 2 is_stmt 1 view .LVU1951
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 7461              		.loc 7 609 2 is_stmt 0 view .LVU1952
 7462              	.LBE4491:
 7463              	.LBE4486:
 7464              	.LBE4485:
 7465              	.LBE4484:
 7466              		.loc 13 174 3 is_stmt 1 view .LVU1953
 7467              	.LBB4529:
 7468              	.LBB4527:
 7469              	.LBB4525:
 7470              	.LBB4523:
 7471              	.LBB4492:
 7472              	.LBI4492:
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 7473              		.loc 8 482 2 view .LVU1954
 7474              	.LBB4493:
ARM GAS  /tmp/ccEv8ptb.s 			page 450


 7475              	.LBI4493:
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	noexcept(noexcept(::new((void *)__p)
 7476              		.loc 5 144 2 view .LVU1955
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	noexcept(noexcept(::new((void *)__p)
 7477              		.loc 5 144 2 is_stmt 0 view .LVU1956
 7478              	.LBE4493:
 7479              	.LBE4492:
 7480              	.LBE4523:
 7481              	.LBE4525:
 7482              	.LBE4527:
 7483              	.LBE4529:
 7484              		.loc 13 174 3 is_stmt 1 view .LVU1957
 7485              	.LBB4530:
 7486              	.LBB4528:
 7487              	.LBB4526:
 7488              	.LBB4524:
 7489              	.LBB4522:
 7490              	.LBB4521:
 7491              	.LBB4494:
 7492              	.LBI4494:
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;
 7493              		.loc 9 303 17 view .LVU1958
 7494              	.LBB4495:
 7495 001c 3368     		ldr	r3, [r6]
 7496 001e 0361     		str	r3, [r0, #16]
 7497 0020 1430     		adds	r0, r0, #20
 7498              	.LVL652:
 7499              	.LBB4496:
 7500              	.LBI4496:
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 7501              		.loc 3 448 7 view .LVU1959
 7502              	.LBB4497:
 7503              	.LBB4498:
 7504              	.LBI4498:
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 7505              		.loc 3 190 7 view .LVU1960
 7506              	.LBB4499:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 7507              		.loc 3 193 51 is_stmt 0 view .LVU1961
 7508 0022 2300     		movs	r3, r4
 7509 0024 1C33     		adds	r3, r3, #28
 7510              	.LVL653:
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 7511              		.loc 3 193 51 view .LVU1962
 7512              	.LBE4499:
 7513              	.LBE4498:
 7514              	.LBB4500:
 7515              	.LBI4500:
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 7516              		.loc 3 290 7 is_stmt 1 view .LVU1963
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 7517              		.loc 3 290 7 is_stmt 0 view .LVU1964
 7518              	.LBE4500:
 7519              	.LBB4501:
 7520              	.LBI4501:
 7521              		.loc 15 97 19 is_stmt 1 view .LVU1965
 7522              	.LBB4502:
ARM GAS  /tmp/ccEv8ptb.s 			page 451


 7523              	.LBI4502:
 7524              		.loc 8 514 7 view .LVU1966
 7525              	.LBB4503:
 7526              	.LBI4503:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 7527              		.loc 4 141 7 view .LVU1967
 7528              	.LBB4504:
 7529              	.LBI4504:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7530              		.loc 5 83 7 view .LVU1968
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7531              		.loc 5 83 7 is_stmt 0 view .LVU1969
 7532              	.LBE4504:
 7533              	.LBE4503:
 7534              	.LBE4502:
 7535              	.LBE4501:
 7536              	.LBB4505:
 7537              	.LBI4505:
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 7538              		.loc 3 159 2 is_stmt 1 view .LVU1970
 7539              	.LBB4506:
 7540              	.LBB4507:
 7541              	.LBI4507:
 7542              		.loc 6 99 5 view .LVU1971
 7543              		.loc 6 99 5 is_stmt 0 view .LVU1972
 7544              	.LBE4507:
 7545              	.LBB4508:
 7546              	.LBI4508:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 7547              		.loc 4 141 7 is_stmt 1 view .LVU1973
 7548              	.LBB4509:
 7549              	.LBI4509:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7550              		.loc 5 83 7 view .LVU1974
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7551              		.loc 5 83 7 is_stmt 0 view .LVU1975
 7552              	.LBE4509:
 7553              	.LBE4508:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 7554              		.loc 3 160 46 view .LVU1976
 7555 0026 6361     		str	r3, [r4, #20]
 7556              	.LVL654:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #endif
 7557              		.loc 3 160 46 view .LVU1977
 7558              	.LBE4506:
 7559              	.LBE4505:
 7560              	.LBB4510:
 7561              	.LBI4510:
 7562              		.loc 4 153 7 is_stmt 1 view .LVU1978
 7563              	.LBB4511:
 7564              	.LBI4511:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7565              		.loc 5 89 7 view .LVU1979
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7566              		.loc 5 89 7 is_stmt 0 view .LVU1980
 7567              	.LBE4511:
 7568              	.LBE4510:
ARM GAS  /tmp/ccEv8ptb.s 			page 452


 7569              	.LBB4512:
 7570              	.LBI4512:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7571              		.loc 3 186 7 is_stmt 1 view .LVU1981
 7572              	.LBB4513:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7573              		.loc 3 187 28 is_stmt 0 view .LVU1982
 7574 0028 7168     		ldr	r1, [r6, #4]
 7575              	.LVL655:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7576              		.loc 3 187 28 view .LVU1983
 7577              	.LBE4513:
 7578              	.LBE4512:
 7579              	.LBB4514:
 7580              	.LBI4514:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7581              		.loc 3 186 7 is_stmt 1 view .LVU1984
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 7582              		.loc 3 186 7 is_stmt 0 view .LVU1985
 7583              	.LBE4514:
 7584              	.LBB4515:
 7585              	.LBI4515:
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_string_length; }
 7586              		.loc 3 936 7 is_stmt 1 view .LVU1986
 7587              	.LBB4516:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7588              		.loc 3 937 16 is_stmt 0 view .LVU1987
 7589 002a B268     		ldr	r2, [r6, #8]
 7590              	.LVL656:
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7591              		.loc 3 937 16 view .LVU1988
 7592              	.LBE4516:
 7593              	.LBE4515:
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 7594              		.loc 3 451 9 view .LVU1989
 7595 002c 8A18     		adds	r2, r1, r2
 7596              	.LVL657:
 7597              	.LBB4517:
 7598              	.LBI4517:
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	{
 7599              		.loc 3 263 9 is_stmt 1 view .LVU1990
 7600              	.LBB4518:
 7601              	.LBB4519:
 7602              	.LBI4519:
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 			 std::__false_type)
 7603              		.loc 3 243 9 view .LVU1991
 7604              	.LBB4520:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 7605              		.loc 3 247 11 is_stmt 0 view .LVU1992
 7606 002e 0023     		movs	r3, #0
 7607 0030 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_itera
 7608              	.LVL658:
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	}
 7609              		.loc 3 247 11 view .LVU1993
 7610              	.LBE4520:
 7611              	.LBE4519:
 7612              	.LBE4518:
ARM GAS  /tmp/ccEv8ptb.s 			page 453


 7613              	.LBE4517:
 7614              	.LBE4497:
 7615              	.LBE4496:
 7616              	.LBE4495:
 7617              	.LBE4494:
 7618              	.LBE4521:
 7619              	.LBE4522:
 7620              	.LBE4524:
 7621              	.LBE4526:
 7622              	.LBE4528:
 7623              	.LBE4530:
1813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	++_M_impl._M_node_count;
 7624              		.loc 7 1813 25 view .LVU1994
 7625 0034 2B1D     		adds	r3, r5, #4
1812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				      this->_M_impl._M_header);
 7626              		.loc 7 1812 31 view .LVU1995
 7627 0036 3A00     		movs	r2, r7
 7628 0038 2100     		movs	r1, r4
 7629 003a 4046     		mov	r0, r8
 7630 003c FFF7FEFF 		bl	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
 7631              	.LVL659:
1814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return iterator(__z);
 7632              		.loc 7 1814 2 view .LVU1996
 7633 0040 6B69     		ldr	r3, [r5, #20]
 7634 0042 0133     		adds	r3, r3, #1
 7635 0044 6B61     		str	r3, [r5, #20]
 7636              	.LVL660:
 7637              	.LBB4531:
 7638              	.LBI4531:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 7639              		.loc 7 273 7 is_stmt 1 view .LVU1997
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 7640              		.loc 7 273 7 is_stmt 0 view .LVU1998
 7641              	.LBE4531:
1816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 7642              		.loc 7 1816 7 view .LVU1999
 7643 0046 2000     		movs	r0, r4
 7644              		@ sp needed
 7645              	.LVL661:
 7646              	.LVL662:
 7647              	.LVL663:
 7648              	.LVL664:
 7649              	.LVL665:
1816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 7650              		.loc 7 1816 7 view .LVU2000
 7651 0048 80BC     		pop	{r7}
 7652 004a B846     		mov	r8, r7
 7653 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 7654              	.LVL666:
 7655              	.L198:
 7656              	.LBB4532:
 7657              	.LBI4532:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 7658              		.loc 7 755 7 is_stmt 1 view .LVU2001
 7659              	.LBB4533:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 7660              		.loc 7 756 31 is_stmt 0 view .LVU2002
ARM GAS  /tmp/ccEv8ptb.s 			page 454


 7661 004e 031D     		adds	r3, r0, #4
 7662              	.LVL667:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 7663              		.loc 7 756 31 view .LVU2003
 7664              	.LBE4533:
 7665              	.LBE4532:
1806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 7666              		.loc 7 1806 33 view .LVU2004
 7667 0050 9A42     		cmp	r2, r3
 7668 0052 06D0     		beq	.L196
 7669              	.LVL668:
 7670              	.LBB4534:
 7671              	.LBI4534:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 7672              		.loc 11 385 7 is_stmt 1 discriminator 2 view .LVU2005
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 7673              		.loc 11 385 7 is_stmt 0 discriminator 2 view .LVU2006
 7674              	.LBE4534:
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 							_S_key(__p)));
 7675              		.loc 7 1807 10 discriminator 2 view .LVU2007
 7676 0054 1369     		ldr	r3, [r2, #16]
 7677 0056 3268     		ldr	r2, [r6]
 7678              	.LVL669:
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 							_S_key(__p)));
 7679              		.loc 7 1807 10 discriminator 2 view .LVU2008
 7680 0058 9342     		cmp	r3, r2
 7681 005a 05DC     		bgt	.L197
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 							_S_key(__p)));
 7682              		.loc 7 1807 10 view .LVU2009
 7683 005c 0023     		movs	r3, #0
 7684 005e 9846     		mov	r8, r3
 7685 0060 D8E7     		b	.L194
 7686              	.LVL670:
 7687              	.L196:
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 							_S_key(__p)));
 7688              		.loc 7 1807 10 view .LVU2010
 7689 0062 0123     		movs	r3, #1
 7690 0064 9846     		mov	r8, r3
 7691 0066 D5E7     		b	.L194
 7692              	.LVL671:
 7693              	.L197:
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 							_S_key(__p)));
 7694              		.loc 7 1807 10 view .LVU2011
 7695 0068 0123     		movs	r3, #1
 7696 006a 9846     		mov	r8, r3
 7697 006c D2E7     		b	.L194
 7698              		.cfi_endproc
 7699              	.LFE2660:
 7701              		.section	.text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIc
 7702              		.align	1
 7703              		.weak	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_
 7704              		.syntax unified
 7705              		.code	16
 7706              		.thumb_func
 7707              		.fpu softvfp
 7709              	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsI
 7710              	.LVL672:
ARM GAS  /tmp/ccEv8ptb.s 			page 455


 7711              	.LFB2560:
2248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_unique_(const_iterator __position,
 7712              		.loc 7 2248 7 is_stmt 1 view -0
 7713              		.cfi_startproc
 7714              		@ args = 0, pretend = 0, frame = 8
 7715              		@ frame_needed = 0, uses_anonymous_args = 0
2248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_unique_(const_iterator __position,
 7716              		.loc 7 2248 7 is_stmt 0 view .LVU2013
 7717 0000 70B5     		push	{r4, r5, r6, lr}
 7718              	.LCFI31:
 7719              		.cfi_def_cfa_offset 16
 7720              		.cfi_offset 4, -16
 7721              		.cfi_offset 5, -12
 7722              		.cfi_offset 6, -8
 7723              		.cfi_offset 14, -4
 7724 0002 84B0     		sub	sp, sp, #16
 7725              	.LCFI32:
 7726              		.cfi_def_cfa_offset 32
 7727 0004 0400     		movs	r4, r0
 7728 0006 1500     		movs	r5, r2
 7729 0008 1E00     		movs	r6, r3
 7730              	.LVL673:
 7731              	.LBB4535:
 7732              	.LBI4535:
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x.first; }
 7733              		.loc 11 1155 7 is_stmt 1 view .LVU2014
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x.first; }
 7734              		.loc 11 1155 7 is_stmt 0 view .LVU2015
 7735              	.LBE4535:
2257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 7736              		.loc 7 2257 34 view .LVU2016
 7737 000a 1300     		movs	r3, r2
 7738              	.LVL674:
2257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 7739              		.loc 7 2257 34 view .LVU2017
 7740 000c 0A00     		movs	r2, r1
 7741              	.LVL675:
2257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 7742              		.loc 7 2257 34 view .LVU2018
 7743 000e 0100     		movs	r1, r0
 7744              	.LVL676:
2257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 7745              		.loc 7 2257 34 view .LVU2019
 7746 0010 02A8     		add	r0, sp, #8
 7747              	.LVL677:
2257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 7748              		.loc 7 2257 34 view .LVU2020
 7749 0012 FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 7750              	.LVL678:
2260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_(__res.first, __res.second,
 7751              		.loc 7 2260 17 view .LVU2021
 7752 0016 039A     		ldr	r2, [sp, #12]
2260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_(__res.first, __res.second,
 7753              		.loc 7 2260 7 view .LVU2022
 7754 0018 002A     		cmp	r2, #0
 7755 001a 07D0     		beq	.L200
2263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__res.first);
ARM GAS  /tmp/ccEv8ptb.s 			page 456


 7756              		.loc 7 2263 16 view .LVU2023
 7757 001c 0096     		str	r6, [sp]
 7758 001e 2B00     		movs	r3, r5
 7759 0020 0299     		ldr	r1, [sp, #8]
 7760 0022 2000     		movs	r0, r4
 7761 0024 FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 7762              	.LVL679:
 7763              	.L201:
2265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 7764              		.loc 7 2265 5 view .LVU2024
 7765 0028 04B0     		add	sp, sp, #16
 7766              		@ sp needed
 7767              	.LVL680:
 7768              	.LVL681:
 7769              	.LVL682:
2265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 7770              		.loc 7 2265 5 view .LVU2025
 7771 002a 70BD     		pop	{r4, r5, r6, pc}
 7772              	.LVL683:
 7773              	.L200:
 7774              	.LBB4536:
 7775              	.LBI4536:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 7776              		.loc 7 273 7 is_stmt 1 view .LVU2026
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 7777              		.loc 7 273 7 is_stmt 0 view .LVU2027
 7778              	.LBE4536:
2264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 7779              		.loc 7 2264 34 view .LVU2028
 7780 002c 0298     		ldr	r0, [sp, #8]
 7781 002e FBE7     		b	.L201
 7782              		.cfi_endproc
 7783              	.LFE2560:
 7785              		.section	.rodata._Z41__static_initialization_and_destruction_0ii.str1.4,"aMS",%progbits,1
 7786              		.align	2
 7787              	.LC29:
 7788 0000 1B5B306D 		.ascii	"\033[0m\000"
 7788      00
 7789 0005 000000   		.align	2
 7790              	.LC31:
 7791 0008 1B5B3330 		.ascii	"\033[30m\000"
 7791      6D00
 7792 000e 0000     		.align	2
 7793              	.LC33:
 7794 0010 1B5B3331 		.ascii	"\033[31m\000"
 7794      6D00
 7795 0016 0000     		.align	2
 7796              	.LC35:
 7797 0018 1B5B3332 		.ascii	"\033[32m\000"
 7797      6D00
 7798 001e 0000     		.align	2
 7799              	.LC37:
 7800 0020 1B5B3333 		.ascii	"\033[33m\000"
 7800      6D00
 7801 0026 0000     		.align	2
 7802              	.LC39:
 7803 0028 1B5B3334 		.ascii	"\033[34m\000"
ARM GAS  /tmp/ccEv8ptb.s 			page 457


 7803      6D00
 7804 002e 0000     		.align	2
 7805              	.LC41:
 7806 0030 1B5B3335 		.ascii	"\033[35m\000"
 7806      6D00
 7807 0036 0000     		.align	2
 7808              	.LC43:
 7809 0038 1B5B3336 		.ascii	"\033[36m\000"
 7809      6D00
 7810 003e 0000     		.align	2
 7811              	.LC45:
 7812 0040 1B5B3337 		.ascii	"\033[37m\000"
 7812      6D00
 7813              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 7814              		.align	1
 7815              		.syntax unified
 7816              		.code	16
 7817              		.thumb_func
 7818              		.fpu softvfp
 7820              	_Z41__static_initialization_and_destruction_0ii:
 7821              	.LVL684:
 7822              	.LFB2850:
 7823              		.loc 16 51 1 is_stmt 1 view -0
 7824              		.cfi_startproc
 7825              		@ args = 0, pretend = 0, frame = 312
 7826              		@ frame_needed = 0, uses_anonymous_args = 0
 7827              		.loc 16 51 1 is_stmt 0 view .LVU2030
 7828 0000 30B5     		push	{r4, r5, lr}
 7829              	.LCFI33:
 7830              		.cfi_def_cfa_offset 12
 7831              		.cfi_offset 4, -12
 7832              		.cfi_offset 5, -8
 7833              		.cfi_offset 14, -4
 7834 0002 CFB0     		sub	sp, sp, #316
 7835              	.LCFI34:
 7836              		.cfi_def_cfa_offset 328
 7837              		.loc 16 51 1 view .LVU2031
 7838 0004 0128     		cmp	r0, #1
 7839 0006 01D0     		beq	.L209
 7840              	.LVL685:
 7841              	.L202:
 7842              		.loc 16 51 1 view .LVU2032
 7843 0008 4FB0     		add	sp, sp, #316
 7844              		@ sp needed
 7845 000a 30BD     		pop	{r4, r5, pc}
 7846              	.LVL686:
 7847              	.L209:
 7848              		.loc 16 51 1 discriminator 1 view .LVU2033
 7849 000c 3F4B     		ldr	r3, .L211
 7850 000e 9942     		cmp	r1, r3
 7851 0010 FAD1     		bne	.L202
 7852              	.LVL687:
 7853              	.LBB4682:
 7854              	.LBI4682:
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
ARM GAS  /tmp/ccEv8ptb.s 			page 458


 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			  && !_PCCP::template
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 7855              		.loc 9 360 12 is_stmt 1 view .LVU2034
 7856              	.LBB4683:
 7857              	.LBB4684:
 7858              	.LBB4685:
 7859              	.LBI4685:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7860              		.loc 6 74 5 view .LVU2035
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7861              		.loc 6 74 5 is_stmt 0 view .LVU2036
 7862              	.LBE4685:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 7863              		.loc 9 362 40 view .LVU2037
 7864 0012 0024     		movs	r4, #0
 7865 0014 0494     		str	r4, [sp, #16]
 7866              	.LVL688:
 7867              	.LBB4686:
 7868              	.LBI4686:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7869              		.loc 6 74 5 is_stmt 1 view .LVU2038
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7870              		.loc 6 74 5 is_stmt 0 view .LVU2039
 7871              	.LBE4686:
 7872              	.LBB4687:
 7873              	.LBI4687:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 7874              		.loc 4 138 7 is_stmt 1 view .LVU2040
 7875              	.LBB4688:
 7876              	.LBI4688:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7877              		.loc 5 80 7 view .LVU2041
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7878              		.loc 5 80 7 is_stmt 0 view .LVU2042
 7879              	.LBE4688:
 7880              	.LBE4687:
 7881              		.loc 9 362 40 view .LVU2043
 7882 0016 4DAA     		add	r2, sp, #308
 7883 0018 3D49     		ldr	r1, .L211+4
 7884              	.LVL689:
 7885              		.loc 9 362 40 view .LVU2044
 7886 001a 05A8     		add	r0, sp, #20
 7887              	.LVL690:
ARM GAS  /tmp/ccEv8ptb.s 			page 459


 7888              		.loc 9 362 40 view .LVU2045
 7889 001c FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 7890              	.LVL691:
 7891              	.LBB4689:
 7892              	.LBI4689:
 7893              		.loc 4 153 7 is_stmt 1 view .LVU2046
 7894              	.LBB4690:
 7895              	.LBI4690:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7896              		.loc 5 89 7 view .LVU2047
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7897              		.loc 5 89 7 is_stmt 0 view .LVU2048
 7898              	.LBE4690:
 7899              	.LBE4689:
 7900              	.LBE4684:
 7901              	.LBE4683:
 7902              	.LBE4682:
 7903              	.LBB4691:
 7904              	.LBI4691:
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 7905              		.loc 9 360 12 is_stmt 1 view .LVU2049
 7906              	.LBB4692:
 7907              	.LBB4693:
 7908              	.LBB4694:
 7909              	.LBI4694:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7910              		.loc 6 74 5 view .LVU2050
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7911              		.loc 6 74 5 is_stmt 0 view .LVU2051
 7912              	.LBE4694:
 7913              		.loc 9 362 40 view .LVU2052
 7914 0020 0123     		movs	r3, #1
 7915 0022 0B93     		str	r3, [sp, #44]
 7916              	.LVL692:
 7917              	.LBB4695:
 7918              	.LBI4695:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7919              		.loc 6 74 5 is_stmt 1 view .LVU2053
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7920              		.loc 6 74 5 is_stmt 0 view .LVU2054
 7921              	.LBE4695:
 7922              	.LBB4696:
 7923              	.LBI4696:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 7924              		.loc 4 138 7 is_stmt 1 view .LVU2055
 7925              	.LBB4697:
 7926              	.LBI4697:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7927              		.loc 5 80 7 view .LVU2056
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7928              		.loc 5 80 7 is_stmt 0 view .LVU2057
 7929              	.LBE4697:
 7930              	.LBE4696:
 7931              		.loc 9 362 40 view .LVU2058
 7932 0024 4CAA     		add	r2, sp, #304
 7933 0026 3B49     		ldr	r1, .L211+8
 7934 0028 0CA8     		add	r0, sp, #48
ARM GAS  /tmp/ccEv8ptb.s 			page 460


 7935 002a FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 7936              	.LVL693:
 7937              	.LBB4698:
 7938              	.LBI4698:
 7939              		.loc 4 153 7 is_stmt 1 view .LVU2059
 7940              	.LBB4699:
 7941              	.LBI4699:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7942              		.loc 5 89 7 view .LVU2060
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7943              		.loc 5 89 7 is_stmt 0 view .LVU2061
 7944              	.LBE4699:
 7945              	.LBE4698:
 7946              	.LBE4693:
 7947              	.LBE4692:
 7948              	.LBE4691:
 7949              	.LBB4700:
 7950              	.LBI4700:
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 7951              		.loc 9 360 12 is_stmt 1 view .LVU2062
 7952              	.LBB4701:
 7953              	.LBB4702:
 7954              	.LBB4703:
 7955              	.LBI4703:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7956              		.loc 6 74 5 view .LVU2063
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7957              		.loc 6 74 5 is_stmt 0 view .LVU2064
 7958              	.LBE4703:
 7959              		.loc 9 362 40 view .LVU2065
 7960 002e 0223     		movs	r3, #2
 7961 0030 1293     		str	r3, [sp, #72]
 7962              	.LVL694:
 7963              	.LBB4704:
 7964              	.LBI4704:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7965              		.loc 6 74 5 is_stmt 1 view .LVU2066
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 7966              		.loc 6 74 5 is_stmt 0 view .LVU2067
 7967              	.LBE4704:
 7968              	.LBB4705:
 7969              	.LBI4705:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 7970              		.loc 4 138 7 is_stmt 1 view .LVU2068
 7971              	.LBB4706:
 7972              	.LBI4706:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7973              		.loc 5 80 7 view .LVU2069
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7974              		.loc 5 80 7 is_stmt 0 view .LVU2070
 7975              	.LBE4706:
 7976              	.LBE4705:
 7977              		.loc 9 362 40 view .LVU2071
 7978 0032 4BAA     		add	r2, sp, #300
 7979 0034 3849     		ldr	r1, .L211+12
 7980 0036 13A8     		add	r0, sp, #76
 7981 0038 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
ARM GAS  /tmp/ccEv8ptb.s 			page 461


 7982              	.LVL695:
 7983              	.LBB4707:
 7984              	.LBI4707:
 7985              		.loc 4 153 7 is_stmt 1 view .LVU2072
 7986              	.LBB4708:
 7987              	.LBI4708:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7988              		.loc 5 89 7 view .LVU2073
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 7989              		.loc 5 89 7 is_stmt 0 view .LVU2074
 7990              	.LBE4708:
 7991              	.LBE4707:
 7992              	.LBE4702:
 7993              	.LBE4701:
 7994              	.LBE4700:
 7995              	.LBB4709:
 7996              	.LBI4709:
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 7997              		.loc 9 360 12 is_stmt 1 view .LVU2075
 7998              	.LBB4710:
 7999              	.LBB4711:
 8000              	.LBB4712:
 8001              	.LBI4712:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8002              		.loc 6 74 5 view .LVU2076
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8003              		.loc 6 74 5 is_stmt 0 view .LVU2077
 8004              	.LBE4712:
 8005              		.loc 9 362 40 view .LVU2078
 8006 003c 0323     		movs	r3, #3
 8007 003e 1993     		str	r3, [sp, #100]
 8008              	.LVL696:
 8009              	.LBB4713:
 8010              	.LBI4713:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8011              		.loc 6 74 5 is_stmt 1 view .LVU2079
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8012              		.loc 6 74 5 is_stmt 0 view .LVU2080
 8013              	.LBE4713:
 8014              	.LBB4714:
 8015              	.LBI4714:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 8016              		.loc 4 138 7 is_stmt 1 view .LVU2081
 8017              	.LBB4715:
 8018              	.LBI4715:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8019              		.loc 5 80 7 view .LVU2082
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8020              		.loc 5 80 7 is_stmt 0 view .LVU2083
 8021              	.LBE4715:
 8022              	.LBE4714:
 8023              		.loc 9 362 40 view .LVU2084
 8024 0040 4AAA     		add	r2, sp, #296
 8025 0042 3649     		ldr	r1, .L211+16
 8026 0044 1AA8     		add	r0, sp, #104
 8027 0046 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 8028              	.LVL697:
ARM GAS  /tmp/ccEv8ptb.s 			page 462


 8029              	.LBB4716:
 8030              	.LBI4716:
 8031              		.loc 4 153 7 is_stmt 1 view .LVU2085
 8032              	.LBB4717:
 8033              	.LBI4717:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8034              		.loc 5 89 7 view .LVU2086
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8035              		.loc 5 89 7 is_stmt 0 view .LVU2087
 8036              	.LBE4717:
 8037              	.LBE4716:
 8038              	.LBE4711:
 8039              	.LBE4710:
 8040              	.LBE4709:
 8041              	.LBB4718:
 8042              	.LBI4718:
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 8043              		.loc 9 360 12 is_stmt 1 view .LVU2088
 8044              	.LBB4719:
 8045              	.LBB4720:
 8046              	.LBB4721:
 8047              	.LBI4721:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8048              		.loc 6 74 5 view .LVU2089
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8049              		.loc 6 74 5 is_stmt 0 view .LVU2090
 8050              	.LBE4721:
 8051              		.loc 9 362 40 view .LVU2091
 8052 004a 0423     		movs	r3, #4
 8053 004c 2093     		str	r3, [sp, #128]
 8054              	.LVL698:
 8055              	.LBB4722:
 8056              	.LBI4722:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8057              		.loc 6 74 5 is_stmt 1 view .LVU2092
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8058              		.loc 6 74 5 is_stmt 0 view .LVU2093
 8059              	.LBE4722:
 8060              	.LBB4723:
 8061              	.LBI4723:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 8062              		.loc 4 138 7 is_stmt 1 view .LVU2094
 8063              	.LBB4724:
 8064              	.LBI4724:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8065              		.loc 5 80 7 view .LVU2095
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8066              		.loc 5 80 7 is_stmt 0 view .LVU2096
 8067              	.LBE4724:
 8068              	.LBE4723:
 8069              		.loc 9 362 40 view .LVU2097
 8070 004e 49AA     		add	r2, sp, #292
 8071 0050 3349     		ldr	r1, .L211+20
 8072 0052 21A8     		add	r0, sp, #132
 8073 0054 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 8074              	.LVL699:
 8075              	.LBB4725:
ARM GAS  /tmp/ccEv8ptb.s 			page 463


 8076              	.LBI4725:
 8077              		.loc 4 153 7 is_stmt 1 view .LVU2098
 8078              	.LBB4726:
 8079              	.LBI4726:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8080              		.loc 5 89 7 view .LVU2099
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8081              		.loc 5 89 7 is_stmt 0 view .LVU2100
 8082              	.LBE4726:
 8083              	.LBE4725:
 8084              	.LBE4720:
 8085              	.LBE4719:
 8086              	.LBE4718:
 8087              	.LBB4727:
 8088              	.LBI4727:
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 8089              		.loc 9 360 12 is_stmt 1 view .LVU2101
 8090              	.LBB4728:
 8091              	.LBB4729:
 8092              	.LBB4730:
 8093              	.LBI4730:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8094              		.loc 6 74 5 view .LVU2102
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8095              		.loc 6 74 5 is_stmt 0 view .LVU2103
 8096              	.LBE4730:
 8097              		.loc 9 362 40 view .LVU2104
 8098 0058 8C23     		movs	r3, #140
 8099 005a 0522     		movs	r2, #5
 8100 005c 6946     		mov	r1, sp
 8101 005e 1025     		movs	r5, #16
 8102 0060 4919     		adds	r1, r1, r5
 8103 0062 CA50     		str	r2, [r1, r3]
 8104              	.LVL700:
 8105              	.LBB4731:
 8106              	.LBI4731:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8107              		.loc 6 74 5 is_stmt 1 view .LVU2105
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8108              		.loc 6 74 5 is_stmt 0 view .LVU2106
 8109              	.LBE4731:
 8110              	.LBB4732:
 8111              	.LBI4732:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 8112              		.loc 4 138 7 is_stmt 1 view .LVU2107
 8113              	.LBB4733:
 8114              	.LBI4733:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8115              		.loc 5 80 7 view .LVU2108
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8116              		.loc 5 80 7 is_stmt 0 view .LVU2109
 8117              	.LBE4733:
 8118              	.LBE4732:
 8119              		.loc 9 362 40 view .LVU2110
 8120 0064 48AA     		add	r2, sp, #288
 8121 0066 2F49     		ldr	r1, .L211+24
 8122 0068 28A8     		add	r0, sp, #160
ARM GAS  /tmp/ccEv8ptb.s 			page 464


 8123 006a FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 8124              	.LVL701:
 8125              	.LBB4734:
 8126              	.LBI4734:
 8127              		.loc 4 153 7 is_stmt 1 view .LVU2111
 8128              	.LBB4735:
 8129              	.LBI4735:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8130              		.loc 5 89 7 view .LVU2112
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8131              		.loc 5 89 7 is_stmt 0 view .LVU2113
 8132              	.LBE4735:
 8133              	.LBE4734:
 8134              	.LBE4729:
 8135              	.LBE4728:
 8136              	.LBE4727:
 8137              	.LBB4736:
 8138              	.LBI4736:
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 8139              		.loc 9 360 12 is_stmt 1 view .LVU2114
 8140              	.LBB4737:
 8141              	.LBB4738:
 8142              	.LBB4739:
 8143              	.LBI4739:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8144              		.loc 6 74 5 view .LVU2115
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8145              		.loc 6 74 5 is_stmt 0 view .LVU2116
 8146              	.LBE4739:
 8147              		.loc 9 362 40 view .LVU2117
 8148 006e A823     		movs	r3, #168
 8149 0070 0622     		movs	r2, #6
 8150 0072 6946     		mov	r1, sp
 8151 0074 4919     		adds	r1, r1, r5
 8152 0076 CA50     		str	r2, [r1, r3]
 8153              	.LVL702:
 8154              	.LBB4740:
 8155              	.LBI4740:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8156              		.loc 6 74 5 is_stmt 1 view .LVU2118
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8157              		.loc 6 74 5 is_stmt 0 view .LVU2119
 8158              	.LBE4740:
 8159              	.LBB4741:
 8160              	.LBI4741:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 8161              		.loc 4 138 7 is_stmt 1 view .LVU2120
 8162              	.LBB4742:
 8163              	.LBI4742:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8164              		.loc 5 80 7 view .LVU2121
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8165              		.loc 5 80 7 is_stmt 0 view .LVU2122
 8166              	.LBE4742:
 8167              	.LBE4741:
 8168              		.loc 9 362 40 view .LVU2123
 8169 0078 47AA     		add	r2, sp, #284
ARM GAS  /tmp/ccEv8ptb.s 			page 465


 8170 007a 2B49     		ldr	r1, .L211+28
 8171 007c 2FA8     		add	r0, sp, #188
 8172 007e FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 8173              	.LVL703:
 8174              	.LBB4743:
 8175              	.LBI4743:
 8176              		.loc 4 153 7 is_stmt 1 view .LVU2124
 8177              	.LBB4744:
 8178              	.LBI4744:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8179              		.loc 5 89 7 view .LVU2125
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8180              		.loc 5 89 7 is_stmt 0 view .LVU2126
 8181              	.LBE4744:
 8182              	.LBE4743:
 8183              	.LBE4738:
 8184              	.LBE4737:
 8185              	.LBE4736:
 8186              	.LBB4745:
 8187              	.LBI4745:
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 8188              		.loc 9 360 12 is_stmt 1 view .LVU2127
 8189              	.LBB4746:
 8190              	.LBB4747:
 8191              	.LBB4748:
 8192              	.LBI4748:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8193              		.loc 6 74 5 view .LVU2128
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8194              		.loc 6 74 5 is_stmt 0 view .LVU2129
 8195              	.LBE4748:
 8196              		.loc 9 362 40 view .LVU2130
 8197 0082 C423     		movs	r3, #196
 8198 0084 0722     		movs	r2, #7
 8199 0086 6946     		mov	r1, sp
 8200 0088 4919     		adds	r1, r1, r5
 8201 008a CA50     		str	r2, [r1, r3]
 8202              	.LVL704:
 8203              	.LBB4749:
 8204              	.LBI4749:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8205              		.loc 6 74 5 is_stmt 1 view .LVU2131
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8206              		.loc 6 74 5 is_stmt 0 view .LVU2132
 8207              	.LBE4749:
 8208              	.LBB4750:
 8209              	.LBI4750:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 8210              		.loc 4 138 7 is_stmt 1 view .LVU2133
 8211              	.LBB4751:
 8212              	.LBI4751:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8213              		.loc 5 80 7 view .LVU2134
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8214              		.loc 5 80 7 is_stmt 0 view .LVU2135
 8215              	.LBE4751:
 8216              	.LBE4750:
ARM GAS  /tmp/ccEv8ptb.s 			page 466


 8217              		.loc 9 362 40 view .LVU2136
 8218 008c 46AA     		add	r2, sp, #280
 8219 008e 2749     		ldr	r1, .L211+32
 8220 0090 36A8     		add	r0, sp, #216
 8221 0092 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 8222              	.LVL705:
 8223              	.LBB4752:
 8224              	.LBI4752:
 8225              		.loc 4 153 7 is_stmt 1 view .LVU2137
 8226              	.LBB4753:
 8227              	.LBI4753:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8228              		.loc 5 89 7 view .LVU2138
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8229              		.loc 5 89 7 is_stmt 0 view .LVU2139
 8230              	.LBE4753:
 8231              	.LBE4752:
 8232              	.LBE4747:
 8233              	.LBE4746:
 8234              	.LBE4745:
 8235              	.LBB4754:
 8236              	.LBI4754:
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 8237              		.loc 9 360 12 is_stmt 1 view .LVU2140
 8238              	.LBB4755:
 8239              	.LBB4756:
 8240              	.LBB4757:
 8241              	.LBI4757:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8242              		.loc 6 74 5 view .LVU2141
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8243              		.loc 6 74 5 is_stmt 0 view .LVU2142
 8244              	.LBE4757:
 8245              		.loc 9 362 40 view .LVU2143
 8246 0096 E023     		movs	r3, #224
 8247 0098 0822     		movs	r2, #8
 8248 009a 6946     		mov	r1, sp
 8249 009c 4919     		adds	r1, r1, r5
 8250 009e CA50     		str	r2, [r1, r3]
 8251              	.LVL706:
 8252              	.LBB4758:
 8253              	.LBI4758:
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8254              		.loc 6 74 5 is_stmt 1 view .LVU2144
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
 8255              		.loc 6 74 5 is_stmt 0 view .LVU2145
 8256              	.LBE4758:
 8257              	.LBB4759:
 8258              	.LBI4759:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 8259              		.loc 4 138 7 is_stmt 1 view .LVU2146
 8260              	.LBB4760:
 8261              	.LBI4760:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8262              		.loc 5 80 7 view .LVU2147
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8263              		.loc 5 80 7 is_stmt 0 view .LVU2148
ARM GAS  /tmp/ccEv8ptb.s 			page 467


 8264              	.LBE4760:
 8265              	.LBE4759:
 8266              		.loc 9 362 40 view .LVU2149
 8267 00a0 45AA     		add	r2, sp, #276
 8268 00a2 2349     		ldr	r1, .L211+36
 8269 00a4 3DA8     		add	r0, sp, #244
 8270 00a6 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
 8271              	.LVL707:
 8272              	.LBB4761:
 8273              	.LBI4761:
 8274              		.loc 4 153 7 is_stmt 1 view .LVU2150
 8275              	.LBB4762:
 8276              	.LBI4762:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8277              		.loc 5 89 7 view .LVU2151
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8278              		.loc 5 89 7 is_stmt 0 view .LVU2152
 8279              	.LBE4762:
 8280              	.LBE4761:
 8281              	.LBE4756:
 8282              	.LBE4755:
 8283              	.LBE4754:
  14:alohal/misc/text_transform.cpp **** }
 8284              		.loc 16 14 1 view .LVU2153
 8285 00aa 43AB     		add	r3, sp, #268
 8286 00ac 04AA     		add	r2, sp, #16
 8287 00ae 4392     		str	r2, [sp, #268]
 8288 00b0 0922     		movs	r2, #9
 8289 00b2 4492     		str	r2, [sp, #272]
 8290              	.LVL708:
 8291              	.LBB4763:
 8292              	.LBI4763:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 8293              		.loc 4 138 7 is_stmt 1 view .LVU2154
 8294              	.LBB4764:
 8295              	.LBI4764:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8296              		.loc 5 80 7 view .LVU2155
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8297              		.loc 5 80 7 is_stmt 0 view .LVU2156
 8298 00b4 02AA     		add	r2, sp, #8
 8299 00b6 03CB     		ldmia	r3!, {r0, r1}
 8300 00b8 03C2     		stmia	r2!, {r0, r1}
 8301              	.LVL709:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8302              		.loc 5 80 7 view .LVU2157
 8303              	.LBE4764:
 8304              	.LBE4763:
 8305              	.LBB4765:
 8306              	.LBI4765:
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  const _Compare& __comp = _Compare(),
 8307              		.loc 10 226 7 is_stmt 1 view .LVU2158
 8308              	.LBB4766:
 8309              	.LBI4766:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 8310              		.loc 4 141 7 view .LVU2159
 8311              	.LBB4767:
ARM GAS  /tmp/ccEv8ptb.s 			page 468


 8312              	.LBI4767:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8313              		.loc 5 83 7 view .LVU2160
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8314              		.loc 5 83 7 is_stmt 0 view .LVU2161
 8315              	.LBE4767:
 8316              	.LBE4766:
 8317              	.LBB4768:
 8318              	.LBI4768:
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       const allocator_type& __a = allocator_type())
 8319              		.loc 7 942 7 is_stmt 1 view .LVU2162
 8320              	.LBB4769:
 8321              	.LBI4769:
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 8322              		.loc 4 151 2 view .LVU2163
 8323              	.LBB4770:
 8324              	.LBI4770:
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8325              		.loc 5 80 7 view .LVU2164
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8326              		.loc 5 80 7 is_stmt 0 view .LVU2165
 8327              	.LBE4770:
 8328              	.LBE4769:
 8329              	.LBB4771:
 8330              	.LBI4771:
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8331              		.loc 7 710 4 is_stmt 1 view .LVU2166
 8332              	.LBB4772:
 8333              	.LBB4773:
 8334              	.LBI4773:
 8335              		.loc 6 99 5 view .LVU2167
 8336              		.loc 6 99 5 is_stmt 0 view .LVU2168
 8337              	.LBE4773:
 8338              	.LBB4774:
 8339              	.LBI4774:
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 8340              		.loc 4 141 7 is_stmt 1 view .LVU2169
 8341              	.LBB4775:
 8342              	.LBI4775:
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8343              		.loc 5 83 7 view .LVU2170
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8344              		.loc 5 83 7 is_stmt 0 view .LVU2171
 8345              	.LBE4775:
 8346              	.LBE4774:
 8347              	.LBB4776:
 8348              	.LBI4776:
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_key_compare(__comp)
 8349              		.loc 7 152 7 is_stmt 1 view .LVU2172
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_key_compare(__comp)
 8350              		.loc 7 152 7 is_stmt 0 view .LVU2173
 8351              	.LBE4776:
 8352              	.LBB4777:
 8353              	.LBI4777:
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 8354              		.loc 7 173 5 is_stmt 1 view .LVU2174
 8355              	.LBB4778:
ARM GAS  /tmp/ccEv8ptb.s 			page 469


 8356              	.LBB4779:
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reset();
 8357              		.loc 7 175 7 view .LVU2175
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reset();
 8358              		.loc 7 175 26 is_stmt 0 view .LVU2176
 8359 00ba 1E4B     		ldr	r3, .L211+40
 8360 00bc 1C71     		strb	r4, [r3, #4]
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 8361              		.loc 7 176 7 is_stmt 1 view .LVU2177
 8362              	.LVL710:
 8363              	.LBB4780:
 8364              	.LBI4780:
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 8365              		.loc 7 206 5 view .LVU2178
 8366              	.LBB4781:
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_left = &_M_header;
 8367              		.loc 7 208 7 view .LVU2179
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_left = &_M_header;
 8368              		.loc 7 208 27 is_stmt 0 view .LVU2180
 8369 00be 9C60     		str	r4, [r3, #8]
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_right = &_M_header;
 8370              		.loc 7 209 7 is_stmt 1 view .LVU2181
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_right = &_M_header;
 8371              		.loc 7 209 25 is_stmt 0 view .LVU2182
 8372 00c0 1A1D     		adds	r2, r3, #4
 8373 00c2 DA60     		str	r2, [r3, #12]
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_node_count = 0;
 8374              		.loc 7 210 7 is_stmt 1 view .LVU2183
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_node_count = 0;
 8375              		.loc 7 210 26 is_stmt 0 view .LVU2184
 8376 00c4 1A61     		str	r2, [r3, #16]
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 8377              		.loc 7 211 7 is_stmt 1 view .LVU2185
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 8378              		.loc 7 211 21 is_stmt 0 view .LVU2186
 8379 00c6 5C61     		str	r4, [r3, #20]
 8380              	.LVL711:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 8381              		.loc 7 211 21 view .LVU2187
 8382              	.LBE4781:
 8383              	.LBE4780:
 8384              	.LBE4779:
 8385              	.LBE4778:
 8386              	.LBE4777:
 8387              	.LBE4772:
 8388              	.LBE4771:
 8389              	.LBB4782:
 8390              	.LBI4782:
 8391              		.loc 4 153 7 is_stmt 1 view .LVU2188
 8392              	.LBB4783:
 8393              	.LBI4783:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8394              		.loc 5 89 7 view .LVU2189
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8395              		.loc 5 89 7 is_stmt 0 view .LVU2190
 8396              	.LBE4783:
 8397              	.LBE4782:
ARM GAS  /tmp/ccEv8ptb.s 			page 470


 8398              	.LBE4768:
 8399              	.LBB4784:
 8400              	.LBI4784:
 8401              		.loc 4 153 7 is_stmt 1 view .LVU2191
 8402              	.LBB4785:
 8403              	.LBI4785:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8404              		.loc 5 89 7 view .LVU2192
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8405              		.loc 5 89 7 is_stmt 0 view .LVU2193
 8406              	.LBE4785:
 8407              	.LBE4784:
 8408              	.LBB4786:
 8409              	.LBI4786:
 8410              		.file 18 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // std::initializer_list support -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // Copyright (C) 2008-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // This file is part of GCC.
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** //
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // GCC is free software; you can redistribute it and/or modify
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // it under the terms of the GNU General Public License as published by
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // the Free Software Foundation; either version 3, or (at your option)
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // any later version.
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** //
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // GCC is distributed in the hope that it will be useful,
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // GNU General Public License for more details.
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** //
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // 3.1, as published by the Free Software Foundation.
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // You should have received a copy of the GNU General Public License and
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** // <http://www.gnu.org/licenses/>.
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** /** @file initializer_list
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****  *  This is a Standard C++ Library header.
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****  */
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** #ifndef _INITIALIZER_LIST
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** #define _INITIALIZER_LIST
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** #pragma GCC system_header
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** #if __cplusplus < 201103L
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** # include <bits/c++0x_warning.h>
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** #else // C++0x
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** #pragma GCC visibility push(default)
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** #include <bits/c++config.h>
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
ARM GAS  /tmp/ccEv8ptb.s 			page 471


  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** namespace std
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** {
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****   /// initializer_list
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****   template<class _E>
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****     class initializer_list
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****     {
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****     public:
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       typedef _E 		value_type;
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       typedef const _E& 	reference;
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       typedef const _E& 	const_reference;
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       typedef size_t 		size_type;
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       typedef const _E* 	iterator;
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       typedef const _E* 	const_iterator;
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****     private:
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       iterator			_M_array;
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       size_type			_M_len;
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       // The compiler can call a private constructor.
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       constexpr initializer_list(const_iterator __a, size_type __l)
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       : _M_array(__a), _M_len(__l) { }
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****     public:
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       constexpr initializer_list() noexcept
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       : _M_array(0), _M_len(0) { }
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       // Number of elements.
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       constexpr size_type
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       size() const noexcept { return _M_len; }
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       // First element.
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       constexpr const_iterator
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       begin() const noexcept { return _M_array; }
 8411              		.loc 18 75 7 is_stmt 1 view .LVU2194
 8412              	.LBB4787:
 8413              		.loc 18 75 39 is_stmt 0 view .LVU2195
 8414 00c8 029C     		ldr	r4, [sp, #8]
 8415              	.LVL712:
 8416              		.loc 18 75 39 view .LVU2196
 8417              	.LBE4787:
 8418              	.LBE4786:
 8419              	.LBB4788:
 8420              	.LBI4788:
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       // One past the last element.
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       constexpr const_iterator
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list ****       end() const noexcept { return begin() + size(); }
 8421              		.loc 18 79 7 is_stmt 1 view .LVU2197
 8422              	.LBB4789:
 8423              	.LBB4790:
 8424              	.LBI4790:
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
 8425              		.loc 18 71 7 view .LVU2198
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list **** 
 8426              		.loc 18 71 7 is_stmt 0 view .LVU2199
 8427              	.LBE4790:
 8428              		.loc 18 79 52 view .LVU2200
ARM GAS  /tmp/ccEv8ptb.s 			page 472


 8429 00ca 2500     		movs	r5, r4
 8430 00cc FC35     		adds	r5, r5, #252
 8431              	.LVL713:
 8432              		.loc 18 79 52 view .LVU2201
 8433              	.LBE4789:
 8434              	.LBE4788:
 8435              	.LBB4791:
 8436              	.LBI4791:
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 8437              		.loc 7 1109 2 is_stmt 1 view .LVU2202
 8438              	.LBB4792:
 8439              	.LBB4793:
 8440              	.LBI4793:
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	: _M_t(__t) { }
 8441              		.loc 7 538 2 view .LVU2203
 8442              	.LBB4794:
 8443              	.LBB4795:
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 8444              		.loc 7 539 12 is_stmt 0 view .LVU2204
 8445 00ce 0193     		str	r3, [sp, #4]
 8446              	.LVL714:
 8447              	.L205:
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 8448              		.loc 7 539 12 view .LVU2205
 8449              	.LBE4795:
 8450              	.LBE4794:
 8451              	.LBE4793:
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_unique_(end(), *__first, __an);
 8452              		.loc 7 1112 19 is_stmt 1 view .LVU2206
 8453 00d0 A542     		cmp	r5, r4
 8454 00d2 07D0     		beq	.L204
 8455              	.LVL715:
 8456              	.LBB4796:
 8457              	.LBI4796:
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 8458              		.loc 7 1014 7 view .LVU2207
 8459              	.LBB4797:
 8460              	.LBI4797:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 8461              		.loc 7 273 7 view .LVU2208
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 8462              		.loc 7 273 7 is_stmt 0 view .LVU2209
 8463              	.LBE4797:
 8464              	.LBE4796:
 8465              	.LBB4798:
 8466              	.LBI4798:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 8467              		.loc 7 348 7 is_stmt 1 view .LVU2210
 8468              	.LBB4799:
 8469              	.LBB4800:
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 8470              		.loc 7 349 29 is_stmt 0 view .LVU2211
 8471 00d4 1748     		ldr	r0, .L211+40
 8472 00d6 011D     		adds	r1, r0, #4
 8473              	.LVL716:
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 8474              		.loc 7 349 29 view .LVU2212
ARM GAS  /tmp/ccEv8ptb.s 			page 473


 8475              	.LBE4800:
 8476              	.LBE4799:
 8477              	.LBE4798:
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 8478              		.loc 7 1113 6 view .LVU2213
 8479 00d8 01AB     		add	r3, sp, #4
 8480 00da 2200     		movs	r2, r4
 8481 00dc FFF7FEFF 		bl	_ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_tra
 8482              	.LVL717:
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_unique_(end(), *__first, __an);
 8483              		.loc 7 1112 4 is_stmt 1 view .LVU2214
 8484 00e0 1C34     		adds	r4, r4, #28
 8485              	.LVL718:
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_unique_(end(), *__first, __an);
 8486              		.loc 7 1112 4 is_stmt 0 view .LVU2215
 8487 00e2 F5E7     		b	.L205
 8488              	.L204:
 8489              	.LVL719:
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_unique_(end(), *__first, __an);
 8490              		.loc 7 1112 4 view .LVU2216
 8491              	.LBE4792:
 8492              	.LBE4791:
 8493              	.LBE4765:
 8494              	.LBB4801:
 8495              	.LBI4801:
 8496              		.loc 4 153 7 is_stmt 1 view .LVU2217
 8497              	.LBB4802:
 8498              	.LBI4802:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8499              		.loc 5 89 7 view .LVU2218
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8500              		.loc 5 89 7 is_stmt 0 view .LVU2219
 8501              	.LBE4802:
 8502              	.LBE4801:
  14:alohal/misc/text_transform.cpp **** }
 8503              		.loc 16 14 1 view .LVU2220
 8504 00e4 43AC     		add	r4, sp, #268
 8505 00e6 01E0     		b	.L208
 8506              	.LVL720:
 8507              	.L210:
 8508              	.LBB4803:
 8509              	.LBB4804:
 8510              	.LBB4805:
 8511              	.LBB4806:
 8512              	.LBB4807:
 8513              	.LBB4808:
 8514              	.LBI4808:
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 8515              		.loc 3 236 7 is_stmt 1 view .LVU2221
 8516              	.LBB4809:
 8517              	.LBB4810:
 8518              	.LBI4810:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 8519              		.loc 8 469 7 view .LVU2222
 8520              	.LBB4811:
 8521              	.LBI4811:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
ARM GAS  /tmp/ccEv8ptb.s 			page 474


 8522              		.loc 5 119 7 view .LVU2223
 8523              	.LBB4812:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 8524              		.loc 5 128 19 is_stmt 0 view .LVU2224
 8525 00e8 FFF7FEFF 		bl	_ZdlPv
 8526              	.LVL721:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 8527              		.loc 5 128 19 view .LVU2225
 8528              	.LBE4812:
 8529              	.LBE4811:
 8530              	.LBE4810:
 8531              	.LBE4809:
 8532              	.LBE4808:
 8533              	.LBE4807:
 8534              	.LBE4806:
 8535              	.LBB4819:
 8536              	.LBI4819:
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 8537              		.loc 3 150 14 is_stmt 1 view .LVU2226
 8538              	.LBB4820:
 8539              	.LBI4820:
 8540              		.loc 4 153 7 view .LVU2227
 8541              	.LBB4821:
 8542              	.LBI4821:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8543              		.loc 5 89 7 view .LVU2228
 8544              	.L208:
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 8545              		.loc 5 89 7 is_stmt 0 view .LVU2229
 8546              	.LBE4821:
 8547              	.LBE4820:
 8548              	.LBE4819:
 8549              	.LBE4805:
 8550              	.LBE4804:
 8551              	.LBE4803:
  14:alohal/misc/text_transform.cpp **** }
 8552              		.loc 16 14 1 discriminator 5 view .LVU2230
 8553 00ec 04AB     		add	r3, sp, #16
 8554 00ee 9C42     		cmp	r4, r3
 8555 00f0 06D0     		beq	.L206
  14:alohal/misc/text_transform.cpp **** }
 8556              		.loc 16 14 1 discriminator 4 view .LVU2231
 8557 00f2 1C3C     		subs	r4, r4, #28
 8558              	.LVL722:
 8559              	.LBB4825:
 8560              	.LBI4803:
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 8561              		.loc 9 208 12 is_stmt 1 discriminator 4 view .LVU2232
 8562              	.LBB4824:
 8563              	.LBB4823:
 8564              	.LBI4805:
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { _M_dispose(); }
 8565              		.loc 3 657 7 discriminator 4 view .LVU2233
 8566              	.LBB4822:
 8567              	.LBI4806:
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 8568              		.loc 3 229 7 discriminator 4 view .LVU2234
ARM GAS  /tmp/ccEv8ptb.s 			page 475


 8569              	.LBB4818:
 8570              	.LBB4813:
 8571              	.LBI4813:
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 8572              		.loc 3 221 7 discriminator 4 view .LVU2235
 8573              	.LBB4814:
 8574              	.LBI4814:
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 8575              		.loc 3 186 7 discriminator 4 view .LVU2236
 8576              	.LBB4815:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 8577              		.loc 3 187 28 is_stmt 0 discriminator 4 view .LVU2237
 8578 00f4 6068     		ldr	r0, [r4, #4]
 8579              	.LVL723:
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 
 8580              		.loc 3 187 28 discriminator 4 view .LVU2238
 8581              	.LBE4815:
 8582              	.LBE4814:
 8583              	.LBB4816:
 8584              	.LBI4816:
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h ****       {
 8585              		.loc 3 200 7 is_stmt 1 discriminator 4 view .LVU2239
 8586              	.LBB4817:
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 8587              		.loc 3 203 57 is_stmt 0 discriminator 4 view .LVU2240
 8588 00f6 2300     		movs	r3, r4
 8589 00f8 0C33     		adds	r3, r3, #12
 8590              	.LVL724:
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** #else
 8591              		.loc 3 203 57 discriminator 4 view .LVU2241
 8592              	.LBE4817:
 8593              	.LBE4816:
 8594              	.LBE4813:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 8595              		.loc 3 231 2 discriminator 4 view .LVU2242
 8596 00fa 9842     		cmp	r0, r3
 8597 00fc F4D1     		bne	.L210
 8598 00fe F5E7     		b	.L208
 8599              	.LVL725:
 8600              	.L206:
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 8601              		.loc 3 231 2 discriminator 4 view .LVU2243
 8602              	.LBE4818:
 8603              	.LBE4822:
 8604              	.LBE4823:
 8605              	.LBE4824:
 8606              	.LBE4825:
   4:alohal/misc/text_transform.cpp ****     make_pair(Text_colors::reset, "\u001b[0m"),
 8607              		.loc 16 4 26 discriminator 2 view .LVU2244
 8608 0100 0D4A     		ldr	r2, .L211+44
 8609 0102 0E49     		ldr	r1, .L211+48
 8610 0104 0B48     		ldr	r0, .L211+40
 8611 0106 FFF7FEFF 		bl	__aeabi_atexit
 8612              	.LVL726:
 8613              		.loc 16 51 1 discriminator 2 view .LVU2245
 8614 010a 7DE7     		b	.L202
 8615              	.L212:
ARM GAS  /tmp/ccEv8ptb.s 			page 476


 8616              		.align	2
 8617              	.L211:
 8618 010c FFFF0000 		.word	65535
 8619 0110 00000000 		.word	.LC29
 8620 0114 08000000 		.word	.LC31
 8621 0118 10000000 		.word	.LC33
 8622 011c 18000000 		.word	.LC35
 8623 0120 20000000 		.word	.LC37
 8624 0124 28000000 		.word	.LC39
 8625 0128 30000000 		.word	.LC41
 8626 012c 38000000 		.word	.LC43
 8627 0130 40000000 		.word	.LC45
 8628 0134 00000000 		.word	.LANCHOR0
 8629 0138 00000000 		.word	__dso_handle
 8630 013c 00000000 		.word	_ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES
 8631              		.cfi_endproc
 8632              	.LFE2850:
 8634              		.section	.text._GLOBAL__sub_I__ZN12Colored_text14Color_sequenceB5cxx11E,"ax",%progbits
 8635              		.align	1
 8636              		.syntax unified
 8637              		.code	16
 8638              		.thumb_func
 8639              		.fpu softvfp
 8641              	_GLOBAL__sub_I__ZN12Colored_text14Color_sequenceB5cxx11E:
 8642              	.LFB2854:
 8643              		.loc 16 51 1 is_stmt 1 view -0
 8644              		.cfi_startproc
 8645              		@ args = 0, pretend = 0, frame = 0
 8646              		@ frame_needed = 0, uses_anonymous_args = 0
 8647 0000 10B5     		push	{r4, lr}
 8648              	.LCFI35:
 8649              		.cfi_def_cfa_offset 8
 8650              		.cfi_offset 4, -8
 8651              		.cfi_offset 14, -4
 8652              		.loc 16 51 1 is_stmt 0 view .LVU2247
 8653 0002 0249     		ldr	r1, .L214
 8654 0004 0120     		movs	r0, #1
 8655 0006 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 8656              	.LVL727:
 8657              		@ sp needed
 8658 000a 10BD     		pop	{r4, pc}
 8659              	.L215:
 8660              		.align	2
 8661              	.L214:
 8662 000c FFFF0000 		.word	65535
 8663              		.cfi_endproc
 8664              	.LFE2854:
 8666              		.section	.init_array,"aw",%init_array
 8667              		.align	2
 8668 0000 00000000 		.word	_GLOBAL__sub_I__ZN12Colored_text14Color_sequenceB5cxx11E(target1)
 8669              		.global	_ZN12Colored_text14Color_sequenceB5cxx11E
 8670              		.weak	_ZSt19piecewise_construct
 8671              		.section	.rodata._ZSt19piecewise_construct,"aG",%progbits,_ZSt19piecewise_construct,comdat
 8672              		.align	2
 8675              	_ZSt19piecewise_construct:
 8676 0000 00       		.space	1
 8677              		.section	.bss._ZN12Colored_text14Color_sequenceB5cxx11E,"aw",%nobits
ARM GAS  /tmp/ccEv8ptb.s 			page 477


 8678              		.align	2
 8679              		.set	.LANCHOR0,. + 0
 8682              	_ZN12Colored_text14Color_sequenceB5cxx11E:
 8683 0000 00000000 		.space	24
 8683      00000000 
 8683      00000000 
 8683      00000000 
 8683      00000000 
 8684              		.text
 8685              	.Letext0:
 8686              		.file 19 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/type_traits"
 8687              		.file 20 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/arm-none-eabi/thumb/v6-
 8688              		.file 21 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/cpp_type_traits.h"
 8689              		.file 22 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_
 8690              		.file 23 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/debug/debug.h"
 8691              		.file 24 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/cwchar"
 8692              		.file 25 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/cstdint"
 8693              		.file 26 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/exception_ptr.h"
 8694              		.file 27 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/clocale"
 8695              		.file 28 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/limits"
 8696              		.file 29 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/string_view"
 8697              		.file 30 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/cstdlib"
 8698              		.file 31 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/cstdio"
 8699              		.file 32 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stringfwd.h"
 8700              		.file 33 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/utility"
 8701              		.file 34 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/optional"
 8702              		.file 35 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/uses_allocator.h"
 8703              		.file 36 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/ptr_traits.h"
 8704              		.file 37 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/functexcept.h"
 8705              		.file 38 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/predefined_ops.h"
 8706              		.file 39 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/numeric_traits.h"
 8707              		.file 40 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h"
 8708              		.file 41 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/aligned_buffer.h"
 8709              		.file 42 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/type_traits.h"
 8710              		.file 43 "/opt/gcc-arm-none-eabi-9-2020-q2/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h"
 8711              		.file 44 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/machine/_default_types.h"
 8712              		.file 45 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/_types.h"
 8713              		.file 46 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/reent.h"
 8714              		.file 47 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/lock.h"
 8715              		.file 48 "/opt/gcc-arm-none-eabi-9-2020-q2/lib/gcc/arm-none-eabi/9.3.1/include/stdarg.h"
 8716              		.file 49 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/wchar.h"
 8717              		.file 50 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/_stdint.h"
 8718              		.file 51 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/stdint.h"
 8719              		.file 52 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/locale.h"
 8720              		.file 53 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/ctype.h"
 8721              		.file 54 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/stdlib.h"
 8722              		.file 55 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/stdio.h"
 8723              		.file 56 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/errno.h"
 8724              		.file 57 "alohal/misc/text_transform.hpp"
 8725              		.file 58 "<built-in>"
ARM GAS  /tmp/ccEv8ptb.s 			page 478


DEFINED SYMBOLS
                            *ABS*:0000000000000000 text_transform.cpp
     /tmp/ccEv8ptb.s:16     .rodata._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.str1.4:0000000000000000 $d
     /tmp/ccEv8ptb.s:20     .text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_:0000000000000000 $t
     /tmp/ccEv8ptb.s:28     .text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_:0000000000000000 _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_
     /tmp/ccEv8ptb.s:260    .text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_:0000000000000058 $d
     /tmp/ccEv8ptb.s:270    .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E:0000000000000000 $t
     /tmp/ccEv8ptb.s:277    .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E:0000000000000000 _ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E
     /tmp/ccEv8ptb.s:474    .text._ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS1_ESaISt4pairIKS1_S7_EEED2Ev:0000000000000000 $t
     /tmp/ccEv8ptb.s:481    .text._ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS1_ESaISt4pairIKS1_S7_EEED2Ev:0000000000000000 _ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS1_ESaISt4pairIKS1_S7_EEED2Ev
     /tmp/ccEv8ptb.s:481    .text._ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS1_ESaISt4pairIKS1_S7_EEED2Ev:0000000000000000 _ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS1_ESaISt4pairIKS1_S7_EEED1Ev
     /tmp/ccEv8ptb.s:539    .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E:0000000000000000 $t
     /tmp/ccEv8ptb.s:546    .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E:0000000000000000 _ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSI_PSt13_Rb_tree_nodeISA_E
     /tmp/ccEv8ptb.s:644    .rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.str1.4:0000000000000000 $d
     /tmp/ccEv8ptb.s:648    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000000 $t
     /tmp/ccEv8ptb.s:655    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
     /tmp/ccEv8ptb.s:867    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000058 $d
     /tmp/ccEv8ptb.s:872    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:0000000000000000 $t
     /tmp/ccEv8ptb.s:879    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_
     /tmp/ccEv8ptb.s:879    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2IS3_EEPKcRKS3_:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_
     /tmp/ccEv8ptb.s:993    .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS3_:0000000000000000 $t
     /tmp/ccEv8ptb.s:1000   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS3_:0000000000000000 _ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE14_M_lower_boundEPSt13_Rb_tree_nodeISA_EPSt18_Rb_tree_node_baseRS3_
     /tmp/ccEv8ptb.s:1071   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE24_M_get_insert_unique_posERS3_:0000000000000000 $t
     /tmp/ccEv8ptb.s:1078   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE24_M_get_insert_unique_posERS3_:0000000000000000 _ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE24_M_get_insert_unique_posERS3_
     /tmp/ccEv8ptb.s:1340   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS3_:0000000000000000 $t
     /tmp/ccEv8ptb.s:1347   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS3_:0000000000000000 _ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS3_
     /tmp/ccEv8ptb.s:1789   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_:0000000000000000 $t
     /tmp/ccEv8ptb.s:1796   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_:0000000000000000 _ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
     /tmp/ccEv8ptb.s:2188   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_:0000000000000000 $t
     /tmp/ccEv8ptb.s:2195   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_:0000000000000000 _ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESL_IJEEEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EDpOT_
     /tmp/ccEv8ptb.s:2589   .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000000 $t
     /tmp/ccEv8ptb.s:2596   .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
     /tmp/ccEv8ptb.s:2807   .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000058 $d
     /tmp/ccEv8ptb.s:2812   .text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_:0000000000000000 $t
     /tmp/ccEv8ptb.s:2819   .text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_:0000000000000000 _ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_SA_
     /tmp/ccEv8ptb.s:3002   .text._Z5colorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN12Colored_text11Text_colorsE:0000000000000000 $t
     /tmp/ccEv8ptb.s:3009   .text._Z5colorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN12Colored_text11Text_colorsE:0000000000000000 _Z5colorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN12Colored_text11Text_colorsE
     /tmp/ccEv8ptb.s:3650   .text._Z5colorNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN12Colored_text11Text_colorsE:00000000000000c8 $d
     /tmp/ccEv8ptb.s:8675   .rodata._ZSt19piecewise_construct:0000000000000000 _ZSt19piecewise_construct
     /tmp/ccEv8ptb.s:3661   .text._ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z:0000000000000000 $t
     /tmp/ccEv8ptb.s:3668   .text._ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z:0000000000000000 _ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z
     /tmp/ccEv8ptb.s:3824   .rodata._Z7dec2hexB5cxx11i.str1.4:0000000000000000 $d
     /tmp/ccEv8ptb.s:3825   .rodata._Z7dec2hexB5cxx11i.str1.4:0000000000000000 .LC8
     /tmp/ccEv8ptb.s:3852   .text._Z7dec2hexB5cxx11i:0000000000000000 $t
     /tmp/ccEv8ptb.s:3859   .text._Z7dec2hexB5cxx11i:0000000000000000 _Z7dec2hexB5cxx11i
     /tmp/ccEv8ptb.s:6408   .text._Z7dec2hexB5cxx11i:0000000000000314 $d
     /tmp/ccEv8ptb.s:6431   .text._Z7dec2hexB5cxx11i:0000000000000334 $t
     /tmp/ccEv8ptb.s:6987   .rodata._Z7dec2hexB5cxx11i:0000000000000000 $d
     /tmp/ccEv8ptb.s:7376   .text._Z7dec2hexB5cxx11i:0000000000000450 $d
     /tmp/ccEv8ptb.s:7387   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE10_M_insert_IRKSA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSO_OT_RT0_:0000000000000000 $t
     /tmp/ccEv8ptb.s:7394   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE10_M_insert_IRKSA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSO_OT_RT0_:0000000000000000 _ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE10_M_insert_IRKSA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_EPSt18_Rb_tree_node_baseSO_OT_RT0_
     /tmp/ccEv8ptb.s:7702   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE17_M_insert_unique_IRKSA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EOT_RT0_:0000000000000000 $t
     /tmp/ccEv8ptb.s:7709   .text._ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE17_M_insert_unique_IRKSA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EOT_RT0_:0000000000000000 _ZNSt8_Rb_treeIN12Colored_text11Text_colorsESt4pairIKS1_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEESt10_Select1stISA_ESt4lessIS1_ESaISA_EE17_M_insert_unique_IRKSA_NSG_11_Alloc_nodeEEESt17_Rb_tree_iteratorISA_ESt23_Rb_tree_const_iteratorISA_EOT_RT0_
     /tmp/ccEv8ptb.s:7786   .rodata._Z41__static_initialization_and_destruction_0ii.str1.4:0000000000000000 $d
     /tmp/ccEv8ptb.s:7814   .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $t
     /tmp/ccEv8ptb.s:7820   .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccEv8ptb.s:8618   .text._Z41__static_initialization_and_destruction_0ii:000000000000010c $d
ARM GAS  /tmp/ccEv8ptb.s 			page 479


     /tmp/ccEv8ptb.s:8635   .text._GLOBAL__sub_I__ZN12Colored_text14Color_sequenceB5cxx11E:0000000000000000 $t
     /tmp/ccEv8ptb.s:8641   .text._GLOBAL__sub_I__ZN12Colored_text14Color_sequenceB5cxx11E:0000000000000000 _GLOBAL__sub_I__ZN12Colored_text14Color_sequenceB5cxx11E
     /tmp/ccEv8ptb.s:8662   .text._GLOBAL__sub_I__ZN12Colored_text14Color_sequenceB5cxx11E:000000000000000c $d
     /tmp/ccEv8ptb.s:8667   .init_array:0000000000000000 $d
     /tmp/ccEv8ptb.s:8682   .bss._ZN12Colored_text14Color_sequenceB5cxx11E:0000000000000000 _ZN12Colored_text14Color_sequenceB5cxx11E
     /tmp/ccEv8ptb.s:8672   .rodata._ZSt19piecewise_construct:0000000000000000 $d
     /tmp/ccEv8ptb.s:8678   .bss._ZN12Colored_text14Color_sequenceB5cxx11E:0000000000000000 $d
                           .group:0000000000000000 _ZNSt3mapIN12Colored_text11Text_colorsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS1_ESaISt4pairIKS1_S7_EEED5Ev
                           .group:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC5IS3_EEPKcRKS3_

UNDEFINED SYMBOLS
strlen
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj
_ZSt20__throw_length_errorPKc
_ZdlPv
_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
memcpy
_ZSt19__throw_logic_errorPKc
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
_Znwj
vsnprintf
__aeabi_atexit
__dso_handle
