ARM GAS  /tmp/ccPLPcMa.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32g0xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_ADC_MspInit
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_ADC_MspInit:
  25              	.LVL0:
  26              	.LFB454:
  27              		.file 1 "Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c"
   1:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
   2:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @file    stm32g0xx_hal_adc.c
   4:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following
   6:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Converter (ADC)
   7:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *           + State functions
  17:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *             ++ ADC state machine management
  18:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file
  20:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          "stm32g0xx_hal_adc_ex.c".
  21:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *
  22:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   @verbatim
  23:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ==============================================================================
  24:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   [..]
  27:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  28:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  29:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of
  30:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       analog watchdog or overrun events.
  31:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 2


  32:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  33:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  34:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  35:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  36:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  37:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  38:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) Programmable sampling time (common to group of channels)
  39:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  40:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  41:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  42:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  43:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  44:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) ADC calibration
  45:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  46:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  47:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  48:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  49:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  50:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to
  51:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  52:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  53:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  54:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                      ##### How to use this driver #####
  55:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ==============================================================================
  56:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]
  57:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  58:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  59:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      ============================================================
  60:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      [..]
  61:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  62:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Enable the ADC interface
  63:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  64:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****              Caution: On STM32G0, ADC clock frequency max is 35MHz (refer
  65:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                       to device datasheet).
  66:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                       Therefore, ADC clock source from RCC and ADC clock
  67:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                       prescaler must be configured to remain below
  68:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                       this maximum frequency.
  69:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  70:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         (++) Two clock settings are mandatory:
  71:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  72:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  73:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  74:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    Four possible clock sources: synchronous clock from APB clock (same as ADC core 
  75:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    or asynchronous clock from RCC level: SYSCLK, HSI16, PLLPCLK.
  76:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  77:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****              (+++) Example:
  78:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  79:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    other device clock parameters configuration:
  80:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_ENABLE();                  (mandatory: core clock)
  81:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  82:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  83:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  84:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  85:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) ADC pins configuration
  86:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  87:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  88:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
ARM GAS  /tmp/ccPLPcMa.s 			page 3


  89:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               using function HAL_GPIO_Init()
  90:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  91:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
  92:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
  93:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
  94:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
  95:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector
  96:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               ADCx_IRQHandler().
  97:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  98:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
  99:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               using function HAL_DMA_Init().
 101:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 102:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 103:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 104:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector
 105:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 106:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 107:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      ================================================================
 109:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      [..]
 110:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 111:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 112:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 113:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         using function HAL_ADC_Init().
 114:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 115:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number,
 116:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 117:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 118:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 119:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 120:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         monitored, thresholds, ...)
 121:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 122:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 123:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 124:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      ====================================
 125:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      [..]
 126:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 127:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 128:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         conversion accuracy
 129:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 130:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 131:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 132:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         transfer by DMA.
 133:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 134:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         (++) ADC conversion by polling:
 135:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 136:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 137:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion
 138:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 139:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Retrieve conversion results
 140:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 141:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 142:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 143:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 144:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         (++) ADC conversion by interruption:
 145:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
ARM GAS  /tmp/ccPLPcMa.s 			page 4


 146:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 147:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 148:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 149:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 (this function must be implemented in user program)
 150:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Retrieve conversion results
 151:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 152:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 153:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 154:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 155:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 156:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 157:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 158:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 159:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 160:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 161:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 162:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 destination variable address.
 163:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 164:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 165:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 166:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      [..]
 167:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 168:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 169:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 170:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 171:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 173:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 174:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      ============================================================
 176:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      [..]
 177:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 178:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Disable the ADC interface
 179:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 180:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 181:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 182:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         (++) ADC clock disable
 183:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 184:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****              (+++) Example:
 185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 186:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    other device clock parameters configuration:
 187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
 188:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_OFF; (if not used for system clock
 189:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 190:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 191:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) ADC pins configuration
 192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 193:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 194:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 196:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 197:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 199:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Deinitialize the DMA
 201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               using function HAL_DMA_Init().
 202:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
ARM GAS  /tmp/ccPLPcMa.s 			page 5


 203:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 204:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 205:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]
 206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     *** Callback registration ***
 208:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     =============================================
 209:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]
 210:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 213:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      to register an interrupt callback.
 215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]
 216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 218:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 219:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 222:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 223:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 225:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 226:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 227:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 228:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      and a pointer to the user callback function.
 229:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]
 230:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 231:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 232:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      weak function.
 233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]
 234:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 235:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 236:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      and the Callback ID.
 237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      This function allows to reset following callbacks:
 238:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 239:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 240:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 241:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 242:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 244:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 246:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 247:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      [..]
 248:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 249:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 250:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 251:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 252:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 253:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]
 256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 257:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 258:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      [..]
ARM GAS  /tmp/ccPLPcMa.s 			page 6


 260:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 261:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 263:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 264:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]
 266:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 269:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 270:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      [..]
 271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 272:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 273:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      are set to the corresponding weak functions.
 275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 276:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   @endverbatim
 277:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ******************************************************************************
 278:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @attention
 279:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *
 280:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics.
 281:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * All rights reserved.</center></h2>
 282:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *
 283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 285:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 286:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 287:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *
 288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ******************************************************************************
 289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 290:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 292:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #include "stm32g0xx_hal.h"
 293:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 294:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @addtogroup STM32G0xx_HAL_Driver
 295:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
 296:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 297:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @defgroup ADC ADC
 299:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief ADC HAL module driver
 300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
 301:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 302:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 305:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 306:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 307:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 308:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 309:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
 310:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 311:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 312:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Fixed timeout values for ADC calibration, enable settling time, disable  */
 313:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* settling time.                                                           */
 314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Values defined to be higher than worst cases: low clock frequency,       */
 315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* maximum prescaler.                                                       */
 316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
ARM GAS  /tmp/ccPLPcMa.s 			page 7


 317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* prescaler 4, sampling time 7.5 ADC clock cycles, resolution 12 bits.     */
 318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Unit: ms                                                                 */
 319:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #define ADC_ENABLE_TIMEOUT              (2UL)
 320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #define ADC_DISABLE_TIMEOUT             (2UL)
 321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #define ADC_STOP_CONVERSION_TIMEOUT     (2UL)
 322:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #define ADC_CHANNEL_CONF_RDY_TIMEOUT    (1UL)
 323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 324:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Register CHSELR bits corresponding to ranks 2 to 8 .                     */
 325:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #define ADC_CHSELR_SQ2_TO_SQ8           (ADC_CHSELR_SQ2 | ADC_CHSELR_SQ3 | ADC_CHSELR_SQ4 | \
 326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          ADC_CHSELR_SQ5 | ADC_CHSELR_SQ6 | ADC_CHSELR_SQ7 | ADC_CHS
 327:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 328:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
 329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @}
 330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 331:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 332:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 334:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 336:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
 337:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 338:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 339:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 340:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 341:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
 342:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @}
 343:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 344:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 346:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 347:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 348:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
 349:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 350:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 351:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
 352:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 353:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *
 354:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** @verbatim
 355:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****  ===============================================================================
 356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 357:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****  ===============================================================================
 358:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 359:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Initialize and configure the ADC.
 360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) De-initialize the ADC.
 361:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** @endverbatim
 362:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
 363:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 364:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
 366:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to
 367:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 369:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         (refer to description of RCC configuration for ADC
 370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         in header of this file).
 371:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 373:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
ARM GAS  /tmp/ccPLPcMa.s 			page 8


 374:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef
 375:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC
 376:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 377:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 378:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 379:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
 380:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 381:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire
 382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments
 383:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
 385:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
 386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 387:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
 388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 390:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0UL;
 391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmpCFGR2 = 0UL;
 392:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
 393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check ADC handle */
 396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (hadc == NULL)
 397:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     return HAL_ERROR;
 399:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 400:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 401:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
 402:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 403:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 404:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 405:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 406:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 407:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 408:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 409:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 410:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 411:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 412:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 413:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 415:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
 416:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
 417:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 418:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 419:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));
 420:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 421:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 422:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 423:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 424:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 425:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 426:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 427:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 428:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 429:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 430:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 9


 431:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ADC group regular discontinuous mode can be enabled only if              */
 432:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* continuous mode is disabled.                                             */
 433:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == 
 434:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 435:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 436:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 438:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 439:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 440:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Init the ADC Callback settings */
 441:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 442:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 443:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 444:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 445:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak 
 446:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak 
 447:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak 
 448:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 449:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 450:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 451:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 452:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 453:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 454:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Init the low level hardware */
 455:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 456:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
 457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Init the low level hardware */
 458:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 459:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 460:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 461:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Set ADC error code to none */
 462:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 463:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 464:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Initialize Lock */
 465:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 466:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 467:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 468:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 469:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 470:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Enable ADC internal voltage regulator */
 471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     LL_ADC_EnableInternalRegulator(hadc->Instance);
 472:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 473:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 474:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Wait loop initialization and execution */
 475:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Note: Variable divided by 2 to compensate partially              */
 476:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       CPU processing cycles, scaling in us split to not          */
 477:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       exceed 32 bits register capacity and handle low frequency. */
 478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL 
 479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 480:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 481:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       wait_loop_index--;
 482:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 483:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 484:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 485:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Verification that ADC voltage regulator is correctly enabled, whether    */
 486:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* or not ADC is coming from state reset (if any potential problem of       */
 487:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* clocking, voltage regulator would not be enabled).                       */
ARM GAS  /tmp/ccPLPcMa.s 			page 10


 488:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 489:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 490:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update ADC state machine to error */
 491:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 492:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 493:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Set ADC error code to ADC peripheral internal error */
 494:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 495:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 496:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 497:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 498:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 499:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */
 500:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* correctly completed and if there is no conversion on going on regular    */
 501:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
 502:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* called to update a parameter on the fly).                                */
 503:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 504:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 506:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 507:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      )
 508:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Set ADC state */
 510:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 511:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 512:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 513:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Configuration of common ADC parameters                                 */
 515:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 517:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 518:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - Internal voltage regulator (no parameter in HAL ADC init structure) */
 519:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - Clock configuration                                                 */
 520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - ADC resolution                                                      */
 521:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - Oversampling                                                        */
 522:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - Trigger frequency mode                                              */
 523:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
 524:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       and disable phases are performed automatically by hardware       */
 525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
 526:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 527:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 528:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Some parameters of this register are not reset, since they are set   */
 529:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* by other functions and must be kept in case of usage of this         */
 530:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 531:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* without needing to reconfigure all other ADC groups/channels         */
 532:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* parameters):                                                         */
 533:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 534:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*     (set into HAL_ADC_ConfigChannel() )                              */
 535:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 536:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Configuration of ADC resolution                                      */
 537:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR1,
 538:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_RES,
 539:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  hadc->Init.Resolution);
 540:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 542:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.Oversampling.Ratio         |
 543:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.Oversampling.RightBitShift |
 544:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.Oversampling.TriggeredMode |
ARM GAS  /tmp/ccPLPcMa.s 			page 11


 545:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.TriggerFrequencyMode
 546:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                   );
 547:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 548:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (hadc->Init.OversamplingMode == ENABLE)
 549:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 550:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 551:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 552:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 553:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2,
 554:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE |
 555:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR2_LFTRIG |
 556:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR2_OVSE   |
 557:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR2_OVSR   |
 558:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR2_OVSS   |
 559:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR2_TOVS,
 560:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  tmpCFGR2);
 561:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 562:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Configuration of ADC clock mode: asynchronous clock source           */
 563:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* with selectable prescaler.                                           */
 564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 565:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 566:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 568:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         MODIFY_REG(ADC1_COMMON->CCR,
 569:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CCR_PRESC,
 570:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
 571:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 572:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 574:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 575:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - discontinuous mode                                                  */
 576:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - LowPowerAutoWait mode                                               */
 577:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - LowPowerAutoPowerOff mode                                           */
 578:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 579:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - overrun                                                             */
 580:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - external trigger polarity                                           */
 582:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - data alignment                                                      */
 583:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - resolution                                                          */
 584:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - scan direction                                                      */
 585:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  - DMA continuous request                                              */
 586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 588:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 589:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 590:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  hadc->Init.DataAlign                                           |
 591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 592:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 593:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 594:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update setting of discontinuous mode only if continuous mode is disabled */
 595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 596:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 597:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 598:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 599:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Enable the selected ADC group regular discontinuous mode */
 600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         tmpCFGR1 |= ADC_CFGR1_DISCEN;
 601:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
ARM GAS  /tmp/ccPLPcMa.s 			page 12


 602:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       else
 603:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 604:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* ADC regular group discontinuous was intended to be enabled,        */
 605:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* but ADC regular group modes continuous and sequencer discontinuous */
 606:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                  */
 607:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 608:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update ADC state machine to error */
 609:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 610:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 611:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
 612:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 613:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 614:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 615:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 616:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 617:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* start.                                                                 */
 618:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 619:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 620:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       software start.                                                  */
 621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 622:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 624:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.ExternalTrigConvEdge);
 625:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 626:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 627:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update ADC configuration register with previous settings */
 628:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR1,
 629:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_DISCEN  |
 630:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_AUTOFF  |
 631:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_WAIT    |
 632:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_CONT    |
 633:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_OVRMOD  |
 634:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_EXTSEL  |
 635:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_EXTEN   |
 636:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_ALIGN   |
 637:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_SCANDIR |
 638:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_DMACFG,
 639:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                tmpCFGR1);
 640:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 641:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR2,
 642:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR2_LFTRIG |
 643:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR2_OVSE   |
 644:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR2_OVSR   |
 645:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR2_OVSS   |
 646:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR2_TOVS,
 647:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                tmpCFGR2);
 648:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 649:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Channel sampling time configuration */
 650:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.S
 651:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.S
 652:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 653:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 654:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 655:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 656:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 657:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*   Note: Scan mode is not present by hardware on this device, but       */
 658:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*   emulated by software for alignment over all STM32 devices.           */
ARM GAS  /tmp/ccPLPcMa.s 			page 13


 659:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 660:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*   parameter "NbrOfConversion".                                         */
 661:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*   Channels must be configured into each rank using function            */
 662:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*   "HAL_ADC_ConfigChannel()".                                           */
 663:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 665:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set sequencer scan length by clearing ranks above rank 1             */
 666:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* and do not modify rank 1 value.                                      */
 667:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->Instance->CHSELR,
 668:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               ADC_CHSELR_SQ2_TO_SQ8);
 669:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 670:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 671:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 672:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Count number of ranks available in HAL ADC handle variable */
 673:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       uint32_t ADCGroupRegularSequencerRanksCount;
 674:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 675:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Parse all ranks from 1 to 8 */
 676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); AD
 677:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 678:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Check each sequencer rank until value of end of sequence */
 679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & 
 680:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ADC_CHSELR_SQ1)
 681:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 682:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
 683:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 684:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 685:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 686:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (ADCGroupRegularSequencerRanksCount == 1UL)
 687:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 688:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set ADC group regular sequencer:                                   */
 689:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set sequencer scan length by clearing ranks above rank 1           */
 690:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* and do not modify rank 1 value.                                    */
 691:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->Instance->CHSELR,
 692:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 ADC_CHSELR_SQ2_TO_SQ8);
 693:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 694:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       else
 695:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 696:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set ADC group regular sequencer:                                   */
 697:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*  - Set ADC group regular sequencer to value memorized              */
 698:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*    in HAL ADC handle                                               */
 699:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*    Note: This value maybe be initialized at a unknown value,       */
 700:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*          therefore after the first call of "HAL_ADC_Init()",       */
 701:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*          each rank corresponding to parameter "NbrOfConversion"    */
 702:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*          must be set using "HAL_ADC_ConfigChannel()".              */
 703:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*  - Set sequencer scan length by clearing ranks above maximum rank  */
 704:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*    and do not modify other ranks value.                            */
 705:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->CHSELR,
 706:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ_ALL,
 707:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    (ADC_CHSELR_SQ2_TO_SQ8 << (((hadc->Init.NbrOfConversion - 1UL) * ADC_REGULAR_RAN
 708:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                   );
 709:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 710:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 711:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 712:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 713:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* ensure of no potential problem of ADC core peripheral clocking.        */
 714:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check through register CFGR1 (excluding analog watchdog configuration: */
 715:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* set into separate dedicated function, and bits of ADC resolution set   */
ARM GAS  /tmp/ccPLPcMa.s 			page 14


 716:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* out of temporary variable 'tmpCFGR1').                                 */
 717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CF
 718:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         == tmpCFGR1)
 719:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 720:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC error code to none */
 721:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 722:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 723:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set the ADC state */
 724:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 725:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 726:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 727:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 728:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
 729:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 730:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Update ADC state machine to error */
 731:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 732:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 733:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 734:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 735:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
 736:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 737:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 738:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 739:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 740:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 741:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 742:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
 743:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 744:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update ADC state machine to error */
 745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 746:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 747:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 748:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 749:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 750:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
 751:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
 752:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 753:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 754:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
 755:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 756:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 757:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done
 758:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 759:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         (function "HAL_ADC_MspDeInit()" is also called under the same conditions:
 760:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         all ADC instances use the same core clock at RCC level, disabling
 761:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         the core clock reset all ADC instances).
 762:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is
 763:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 764:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same
 765:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         common group is still running.
 766:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   By default, HAL_ADC_DeInit() set ADC in mode deep power-down:
 767:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         this saves more power by reducing leakage currents
 768:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         and is particularly interesting before entering MCU low-power modes.
 769:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
 770:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
 771:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 772:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
ARM GAS  /tmp/ccPLPcMa.s 			page 15


 773:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 774:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 775:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 776:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check ADC handle */
 777:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (hadc == NULL)
 778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 779:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     return HAL_ERROR;
 780:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 781:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 782:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
 783:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 784:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 785:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Set ADC state */
 786:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 787:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 788:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
 789:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 790:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 791:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 792:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 793:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 794:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 796:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 797:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 798:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 799:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 800:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Change ADC state */
 801:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 802:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 803:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 804:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Disable ADC internal voltage regulator */
 805:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     LL_ADC_DisableInternalRegulator(hadc->Instance);
 806:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 807:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 808:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Note: HAL ADC deInit is done independently of ADC conversion stop        */
 809:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*       and disable return status. In case of status fail, attempt to      */
 810:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*       perform deinitialization anyway and it is up user code in          */
 811:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
 812:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*       system RCC hard reset.                                             */
 813:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 814:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ========== Reset ADC registers ========== */
 815:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register IER */
 816:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 817:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                               ADC_IT_AWD1  | ADC_IT_OVR  |
 818:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                               ADC_IT_EOS   | ADC_IT_EOC  |
 819:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                               ADC_IT_EOSMP | ADC_IT_RDY));
 820:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 821:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register ISR */
 822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 823:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                               ADC_FLAG_AWD1  | ADC_FLAG_OVR  |
 824:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                               ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 825:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                               ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 826:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 827:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register CR */
 828:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
 829:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* "read-set": no direct reset applicable.                                */
ARM GAS  /tmp/ccPLPcMa.s 			page 16


 830:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 831:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register CFGR1 */
 832:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1
 833:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OV
 834:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                              ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RE
 835:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                              ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
 836:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 837:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register CFGR2 */
 838:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
 839:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*       already done above.                                              */
 840:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 841:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 842:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register SMPR */
 843:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 844:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 845:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register TR1 */
 846:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 847:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 848:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register CHSELR */
 849:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 850:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 851:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register DR */
 852:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable */
 853:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 854:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset register CCR */
 855:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ADC1_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 856:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 857:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ========== Hard reset ADC peripheral ========== */
 858:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 859:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* forced to a similar state after device power-on.                       */
 860:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* If needed, copy-paste and uncomment the following reset code into      */
 861:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* function "void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)":            */
 862:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*                                                                        */
 863:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 864:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 865:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 866:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 867:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (hadc->MspDeInitCallback == NULL)
 868:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 869:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 870:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 871:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 872:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* DeInit the low level hardware */
 873:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->MspDeInitCallback(hadc);
 874:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
 875:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* DeInit the low level hardware */
 876:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_ADC_MspDeInit(hadc);
 877:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 878:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 879:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Reset HAL ADC handle variable */
 880:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 881:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 882:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Set ADC error code to none */
 883:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 884:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 885:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Set ADC state */
 886:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_RESET;
ARM GAS  /tmp/ccPLPcMa.s 			page 17


 887:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 888:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process unlocked */
 889:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 890:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 891:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
 892:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
 893:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 894:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 895:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
 896:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
 897:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
 898:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
 899:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 900:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
 901:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
  28              		.loc 1 901 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 902:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 903:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   UNUSED(hadc);
  33              		.loc 1 903 3 view .LVU1
 904:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 905:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 906:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 907:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****    */
 908:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
  34              		.loc 1 908 1 is_stmt 0 view .LVU2
  35              		@ sp needed
  36 0000 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE454:
  40              		.global	__aeabi_uidiv
  41              		.section	.text.HAL_ADC_Init,"ax",%progbits
  42              		.align	1
  43              		.global	HAL_ADC_Init
  44              		.syntax unified
  45              		.code	16
  46              		.thumb_func
  47              		.fpu softvfp
  49              	HAL_ADC_Init:
  50              	.LVL1:
  51              	.LFB452:
 388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  52              		.loc 1 388 1 is_stmt 1 view -0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 8
  55              		@ frame_needed = 0, uses_anonymous_args = 0
 388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  56              		.loc 1 388 1 is_stmt 0 view .LVU4
  57 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 20
  60              		.cfi_offset 4, -20
  61              		.cfi_offset 5, -16
  62              		.cfi_offset 6, -12
ARM GAS  /tmp/ccPLPcMa.s 			page 18


  63              		.cfi_offset 7, -8
  64              		.cfi_offset 14, -4
  65 0002 83B0     		sub	sp, sp, #12
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 32
  68 0004 0400     		movs	r4, r0
 389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0UL;
  69              		.loc 1 389 3 is_stmt 1 view .LVU5
  70              	.LVL2:
 390:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmpCFGR2 = 0UL;
  71              		.loc 1 390 3 view .LVU6
 391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
  72              		.loc 1 391 3 view .LVU7
 392:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
  73              		.loc 1 392 3 view .LVU8
 393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  74              		.loc 1 393 3 view .LVU9
 393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  75              		.loc 1 393 17 is_stmt 0 view .LVU10
  76 0006 0023     		movs	r3, #0
  77 0008 0193     		str	r3, [sp, #4]
 396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
  78              		.loc 1 396 3 is_stmt 1 view .LVU11
 396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
  79              		.loc 1 396 6 is_stmt 0 view .LVU12
  80 000a 0028     		cmp	r0, #0
  81 000c 00D1     		bne	.LCB41
  82 000e 22E1     		b	.L25	@long jump
  83              	.LCB41:
 402:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
  84              		.loc 1 402 3 is_stmt 1 view .LVU13
 403:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
  85              		.loc 1 403 3 view .LVU14
 404:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  86              		.loc 1 404 3 view .LVU15
 405:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  87              		.loc 1 405 3 view .LVU16
 406:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  88              		.loc 1 406 3 view .LVU17
 407:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  89              		.loc 1 407 3 view .LVU18
 408:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  90              		.loc 1 408 3 view .LVU19
 409:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  91              		.loc 1 409 3 view .LVU20
 410:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  92              		.loc 1 410 3 view .LVU21
 411:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  93              		.loc 1 411 3 view .LVU22
 412:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  94              		.loc 1 412 3 view .LVU23
 413:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
  95              		.loc 1 413 3 view .LVU24
 414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
  96              		.loc 1 414 3 view .LVU25
 415:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
  97              		.loc 1 415 3 view .LVU26
ARM GAS  /tmp/ccPLPcMa.s 			page 19


 416:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  98              		.loc 1 416 3 view .LVU27
 417:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
  99              		.loc 1 417 3 view .LVU28
 419:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 100              		.loc 1 419 3 view .LVU29
 421:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 101              		.loc 1 421 3 view .LVU30
 427:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 102              		.loc 1 427 7 view .LVU31
 433:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 103              		.loc 1 433 3 view .LVU32
 437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 104              		.loc 1 437 3 view .LVU33
 437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 105              		.loc 1 437 11 is_stmt 0 view .LVU34
 106 0010 836D     		ldr	r3, [r0, #88]
 437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 107              		.loc 1 437 6 view .LVU35
 108 0012 002B     		cmp	r3, #0
 109 0014 12D0     		beq	.L29
 110              	.LVL3:
 111              	.L4:
 468:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 112              		.loc 1 468 3 is_stmt 1 view .LVU36
 468:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 113              		.loc 1 468 7 is_stmt 0 view .LVU37
 114 0016 2368     		ldr	r3, [r4]
 115              	.LVL4:
 116              	.LBB129:
 117              	.LBI129:
 118              		.file 2 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h"
   1:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
   2:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ******************************************************************************
   3:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @file    stm32g0xx_ll_adc.h
   4:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @author  MCD Application Team
   5:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ******************************************************************************
   7:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @attention
   8:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
   9:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics.
  10:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
  12:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
  17:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ******************************************************************************
  18:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
  19:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  20:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #ifndef STM32G0xx_LL_ADC_H
  22:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define STM32G0xx_LL_ADC_H
  23:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  24:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #ifdef __cplusplus
  25:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** extern "C" {
ARM GAS  /tmp/ccPLPcMa.s 			page 20


  26:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #endif
  27:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  28:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #include "stm32g0xx.h"
  30:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  31:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @addtogroup STM32G0xx_LL_Driver
  32:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
  33:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
  34:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  35:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #if defined (ADC1)
  36:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  37:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  38:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
  39:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
  40:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  41:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  44:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  46:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
  47:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
  48:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  49:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  50:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  51:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  52:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  53:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  54:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  55:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  56:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  57:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  ( 0UL) /* Value equivalent to bitfield "ADC_CHSELR_SQ1" 
  58:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  ( 4UL) /* Value equivalent to bitfield "ADC_CHSELR_SQ2" 
  59:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  ( 8UL) /* Value equivalent to bitfield "ADC_CHSELR_SQ3" 
  60:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_CHSELR_SQ4" 
  61:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  (16UL) /* Value equivalent to bitfield "ADC_CHSELR_SQ5" 
  62:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  (20UL) /* Value equivalent to bitfield "ADC_CHSELR_SQ6" 
  63:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_CHSELR_SQ7" 
  64:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (28UL) /* Value equivalent to bitfield "ADC_CHSELR_SQ8" 
  65:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  66:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  67:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  68:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
  69:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
  70:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - regular trigger source                                                   */
  71:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - regular trigger edge                                                     */
  72:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR1_EXTEN_0) /* Trigger edge set to rising edge 
  73:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  74:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
  75:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
  76:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
  77:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTSEL) << (4U 
  78:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              ((ADC_CFGR1_EXTSEL)                            << (4U 
  79:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              ((ADC_CFGR1_EXTSEL)                            << (4U 
  80:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              ((ADC_CFGR1_EXTSEL)                            << (4U 
  81:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  82:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
ARM GAS  /tmp/ccPLPcMa.s 			page 21


  83:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
  84:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
  85:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN) << (4U *
  86:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)              << (4U *
  87:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)              << (4U *
  88:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)              << (4U *
  89:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  90:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
  91:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_CFGR1_EXTSEL
  92:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (10UL) /* Value equivalent to bitfield "ADC_CFGR1_EXTEN"
  93:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  94:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  95:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
  96:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
  97:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
  98:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - channel identifier defined by number                                     */
  99:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
 100:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 101:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 102:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR1_AWD1CH)
 103:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_CHSELR_CHSEL)
 104:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_SEQ     (ADC_CHSELR_SQ1 << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) 
 105:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (26UL)/* Value equivalent to bitfield "ADC_CHANNEL_ID_N
 106:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 107:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                             ADC_CHANNEL_ID_INTERNAL_CH_MASK)
 108:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 109:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (0x0000001FUL) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 110:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 111:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 112:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 113:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH)
 114:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 115:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 116:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* channels literals definition.                                              */
 117:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
 118:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (ADC_CFGR1_AWD1CH_0)
 119:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (ADC_CFGR1_AWD1CH_1)
 120:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (ADC_CFGR1_AWD1CH_1 | ADC_CFGR1_AWD1CH_0)
 121:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (ADC_CFGR1_AWD1CH_2)
 122:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD1CH_0)
 123:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD1CH_1)
 124:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD1CH_1 | ADC_CFGR1_AWD
 125:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (ADC_CFGR1_AWD1CH_3)
 126:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_0)
 127:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_1)
 128:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_1 | ADC_CFGR1_AWD
 129:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_2)
 130:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD
 131:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD
 132:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_2 | \
 133:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                             ADC_CFGR1_AWD1CH_1 | ADC_CFGR1_AWD1CH_0)
 134:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR1_AWD1CH_4)
 135:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR1_AWD1CH_4 | ADC_CFGR1_AWD1CH_0)
 136:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR1_AWD1CH_4 | ADC_CFGR1_AWD1CH_1)
 137:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 138:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 139:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* channels literals definition.                                              */
ARM GAS  /tmp/ccPLPcMa.s 			page 22


 140:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_CHSELR_CHSEL0)
 141:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_CHSELR_CHSEL1)
 142:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_CHSELR_CHSEL2)
 143:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_CHSELR_CHSEL3)
 144:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_CHSELR_CHSEL4)
 145:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_CHSELR_CHSEL5)
 146:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_CHSELR_CHSEL6)
 147:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_CHSELR_CHSEL7)
 148:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_CHSELR_CHSEL8)
 149:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_CHSELR_CHSEL9)
 150:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_CHSELR_CHSEL10)
 151:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_CHSELR_CHSEL11)
 152:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_CHSELR_CHSEL12)
 153:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_CHSELR_CHSEL13)
 154:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_CHSELR_CHSEL14)
 155:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_CHSELR_CHSEL15)
 156:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_CHSELR_CHSEL16)
 157:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_CHSELR_CHSEL17)
 158:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_CHSELR_CHSEL18)
 159:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 160:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Internal mask for ADC channel sampling time:                               */
 161:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* To select into literals LL_ADC_SAMPLINGTIME_x                              */
 162:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* the relevant bits for:                                                     */
 163:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* (concatenation of multiple bits used in register SMPR)                     */
 164:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - ADC channels sampling time: setting channel wise, to map each channel    */
 165:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*   on one of the common sampling time available.                            */
 166:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - ADC channels common sampling time: set a sampling time into one of the   */
 167:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*   common sampling time available.                                          */
 168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_SAMPLING_TIME_CH_MASK          (ADC_CHANNEL_ID_BITFIELD_MASK << ADC_SMPR_SMPSEL0_BITOFF
 169:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_SAMPLING_TIME_SMP_MASK         (ADC_SMPR_SMP2 | ADC_SMPR_SMP1)
 170:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_SAMPLING_TIME_SMP_SHIFT_MASK   (ADC_SMPR_SMP2_BITOFFSET_POS | ADC_SMPR_SMP1_BITOFFSET_P
 171:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 172:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 173:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 174:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 175:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 176:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 177:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*   selection of ADC group (ADC group regular).                              */
 178:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 179:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*   selection on groups.                                                     */
 180:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 181:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 182:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 183:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 184:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 185:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 186:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 187:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 188:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 189:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 190:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 191:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
 192:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS (20UL)
 193:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 194:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL
 195:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 196:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
ARM GAS  /tmp/ccPLPcMa.s 			page 23


 197:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 198:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 199:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 200:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 201:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 202:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 203:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET + (1UL << ADC_AWD_CRX_REGOFFSET_B
 204:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 205:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 206:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 207:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 208:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
 209:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS (20UL)
 210:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 211:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 212:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 213:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* ADC registers bits positions */
 214:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CFGR1_RES_BITOFFSET_POS        ( 3UL) /* Value equivalent to bitfield "ADC_CFGR1_RES" p
 215:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CFGR1_AWDSGL_BITOFFSET_POS     (22UL) /* Value equivalent to bitfield "ADC_CFGR1_AWDSGL
 216:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_TR1_HT1_BITOFFSET_POS          (16UL) /* Value equivalent to bitfield "ADC_TR1_HT1" pos
 217:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL0_BITOFFSET_POS    ( 0UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL1_BITOFFSET_POS    ( 1UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 219:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL2_BITOFFSET_POS    ( 2UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 220:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL3_BITOFFSET_POS    ( 3UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 221:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL4_BITOFFSET_POS    ( 4UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 222:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL5_BITOFFSET_POS    ( 5UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 223:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL6_BITOFFSET_POS    ( 6UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 224:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL7_BITOFFSET_POS    ( 7UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 225:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL8_BITOFFSET_POS    ( 8UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 226:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL9_BITOFFSET_POS    ( 9UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 227:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL10_BITOFFSET_POS   (10UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 228:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL11_BITOFFSET_POS   (11UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 229:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL12_BITOFFSET_POS   (12UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 230:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL13_BITOFFSET_POS   (13UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 231:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL14_BITOFFSET_POS   (14UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 232:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL15_BITOFFSET_POS   (15UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 233:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL16_BITOFFSET_POS   (16UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 234:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL17_BITOFFSET_POS   (17UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 235:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CHSELR_CHSEL18_BITOFFSET_POS   (18UL) /* Value equivalent to bitfield "ADC_CHSELR_CHSEL
 236:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_SMPR_SMP1_BITOFFSET_POS        ( 0UL) /* Value equivalent to bitfield "ADC_SMPR_SMP1" p
 237:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_SMPR_SMP2_BITOFFSET_POS        ( 4UL) /* Value equivalent to bitfield "ADC_SMPR_SMP2" p
 238:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_SMPR_SMPSEL0_BITOFFSET_POS     ( 8UL) /* Value equivalent to bitfield "ADC_SMPR_SMPSEL0
 239:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 240:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 241:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* ADC registers bits groups */
 242:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_A
 243:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 244:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 245:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* ADC internal channels related definitions */
 246:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 247:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FFF75AAUL)) /* Internal voltage referen
 248:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define VREFINT_CAL_VREF                   ( 3000UL)                    /* Analog voltage reference
 249:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Temperature sensor */
 250:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FFF75A8UL)) /* Internal temperature sen
 251:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FFF75CAUL)) /* Internal temperature sen
 252:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (( int32_t)   30)            /* Internal temperature sen
 253:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (( int32_t)  130)            /* Internal temperature sen
ARM GAS  /tmp/ccPLPcMa.s 			page 24


 254:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          ( 3000UL)                    /* Analog voltage reference
 255:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 256:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 258:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 259:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 260:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 261:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 262:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 263:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 264:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 265:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 266:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 267:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 268:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a register from a register basis from which an offset
 269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is applied.
 270:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 271:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 272:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Pointer to register address
 273:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 274:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 275:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 276:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 277:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 278:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 279:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 280:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 281:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 282:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 283:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 284:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 285:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 286:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 287:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 288:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 290:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and multimode
 291:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 292:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 293:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 294:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         sharing the same ADC common instance):
 295:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 296:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         disabled.
 297:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 298:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** typedef struct
 299:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 300:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 301:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 302:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 304:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 306:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 307:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 308:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 309:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 310:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
ARM GAS  /tmp/ccPLPcMa.s 			page 25


 311:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 312:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 313:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is conditioned to ADC state:
 314:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC instance must be disabled.
 315:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 317:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 318:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 319:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 320:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 321:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 322:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         refer to description of each function for setting
 323:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         conditioned to ADC state.
 324:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 325:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** typedef struct
 326:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 327:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t Clock;                       /*!< Set ADC instance clock source and prescaler.
 328:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_CLOCK_
 329:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              @note On this STM32 series, this parameter has some cl
 330:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                    ADC clock synchronous (from PCLK) with prescaler
 331:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                    (APB prescaler configured inside the RCC must be
 332:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 333:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 334:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 335:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              For more details, refer to description of this functio
 336:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 337:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 338:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 339:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 340:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 341:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 342:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t DataAlignment;               /*!< Set ADC conversion data alignment.
 343:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_DATA_A
 344:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 345:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 346:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 347:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 348:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 349:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 350:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 351:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 352:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 353:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 354:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 355:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 356:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 357:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 358:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 359:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (functions with prefix "REG").
 360:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 361:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is conditioned to ADC state:
 362:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC instance must be disabled.
 363:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 364:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 365:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 366:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 367:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
ARM GAS  /tmp/ccPLPcMa.s 			page 26


 368:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 369:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 370:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         refer to description of each function for setting
 371:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         conditioned to ADC state.
 372:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 373:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** typedef struct
 374:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 375:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 376:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 377:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              @note On this STM32 series, setting trigger source to 
 378:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 379:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 380:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 381:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 383:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 384:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 385:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 386:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 387:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 388:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 389:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 390:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 392:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                    (depending on the sequencer mode: scan length of
 393:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 394:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 395:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 397:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 400:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 401:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 402:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t DMATransfer;                 /*!< Set ADC group regular conversion data transfer: no tra
 403:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DM
 404:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 405:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 406:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 407:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 408:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              data preserved or overwritten.
 409:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 410:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 411:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 412:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 413:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 414:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 415:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 416:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 417:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 418:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 419:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 420:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 421:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 422:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 423:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 424:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 27


 425:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 426:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 428:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 430:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_CCRDY                  ADC_ISR_CCRDY      /*!< ADC flag ADC channel configurati
 431:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 432:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 433:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 434:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 435:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 436:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 437:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 438:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_FLAG_EOCAL                  ADC_ISR_EOCAL      /*!< ADC flag end of calibration */
 439:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 440:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 441:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 442:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 443:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 444:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 445:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 446:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 447:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 448:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_CCRDY                    ADC_IER_CCRDYIE    /*!< ADC interruption channel configu
 449:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 450:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 451:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 452:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 453:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 454:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 455:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 456:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_IT_EOCAL                    ADC_IER_EOCALIE    /*!< ADC interruption ADC end of cali
 457:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 458:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 459:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 460:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 461:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 462:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 463:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 464:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 465:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* DMA transfer.                                                              */
 466:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 467:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 468:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 469:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 470:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 471:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 472:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 473:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 474:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 475:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 476:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 477:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 478:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 479:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 480:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 481:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
ARM GAS  /tmp/ccPLPcMa.s 			page 28


 482:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 483:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 484:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 485:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 486:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 487:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 488:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 489:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 490:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 491:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_FREQ_MODE  ADC common - Clock frequency mode
 492:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 493:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 494:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_FREQ_MODE_HIGH        (0x00000000UL)         /*!< ADC clock mode to high frequ
 495:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_FREQ_MODE_LOW         (ADC_CCR_LFMEN)        /*!< ADC clock mode to low freque
 496:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 497:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 498:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 499:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 500:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 501:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 502:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 503:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 504:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 505:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 506:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 507:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 508:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement paths all di
 509:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 510:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_TSEN)         /*!< ADC measurement path to inte
 511:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATEN)       /*!< ADC measurement path to inte
 512:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 513:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 514:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 515:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 516:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CLOCK_SOURCE  ADC instance - Clock source
 517:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 518:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 519:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CFGR2_CKMODE_1)                                  /*
 520:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CFGR2_CKMODE_0)                                  /*
 521:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CFGR2_CKMODE_1 | ADC_CFGR2_CKMODE_0)             /*
 522:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC                 (0x00000000UL)                                        /*
 523:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 524:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 525:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 526:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 527:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 528:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 529:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 530:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (0x00000000UL)                      /*!< ADC resolution 
 531:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                  ADC_CFGR1_RES_0) /*!< ADC resolution 
 532:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR1_RES_1                  ) /*!< ADC resolution 
 533:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC_CFGR1_RES_1 | ADC_CFGR1_RES_0) /*!< ADC resolution 
 534:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 535:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 536:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 537:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 538:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
ARM GAS  /tmp/ccPLPcMa.s 			page 29


 539:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 540:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 541:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 542:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC_CFGR1_ALIGN)      /*!< ADC conversion data alignmen
 543:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 544:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 545:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 546:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 547:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 548:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 549:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 550:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 551:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR1_WAIT)                    /*!< ADC low power m
 552:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_LP_AUTOPOWEROFF             (ADC_CFGR1_AUTOFF)                  /*!< ADC low power m
 553:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF    (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF) /*!< ADC low power m
 554:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 555:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 556:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 557:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 558:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_FREQ  ADC group regular - Trigger frequency mode
 559:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 560:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_TRIGGER_FREQ_HIGH           (0x00000000UL)            /*!< ADC trigger frequency mod
 562:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_TRIGGER_FREQ_LOW            (ADC_CFGR2_LFTRIG)        /*!< ADC trigger frequency mod
 563:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 564:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 565:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 566:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 567:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_SAMPLINGTIME_COMMON  ADC instance - Sampling time common to a group of chan
 568:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 569:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 570:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_1       (ADC_SMPR_SMP1_BITOFFSET_POS)                           
 571:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_2       (ADC_SMPR_SMP2_BITOFFSET_POS | ADC_SAMPLING_TIME_CH_MASK
 572:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 573:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 574:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 575:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 576:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 577:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 578:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 579:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 580:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 581:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 582:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 583:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 584:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 585:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 586:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 587:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_BITFIELD ) /*!< A
 588:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_BITFIELD ) /*!< A
 589:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_BITFIELD ) /*!< A
 590:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_BITFIELD ) /*!< A
 591:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_BITFIELD ) /*!< A
 592:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_BITFIELD ) /*!< A
 593:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_BITFIELD ) /*!< A
 594:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_BITFIELD ) /*!< A
 595:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_BITFIELD ) /*!< A
ARM GAS  /tmp/ccPLPcMa.s 			page 30


 596:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_BITFIELD ) /*!< A
 597:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_BITFIELD) /*!< A
 598:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_BITFIELD) /*!< A
 599:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_BITFIELD) /*!< A
 600:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_BITFIELD) /*!< A
 601:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_BITFIELD) /*!< A
 602:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_BITFIELD) /*!< A
 603:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_BITFIELD) /*!< A
 604:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_BITFIELD) /*!< A
 605:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_BITFIELD) /*!< A
 606:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_13 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 607:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_12 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 608:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_14 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 609:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 610:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 611:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 613:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 614:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 615:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 616:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE           (0x00000000UL)                                          
 617:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2     (                                                       
 618:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH4       (                                          ADC_CFGR1_EXT
 619:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #if defined(TIM2)
 620:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO      (                     ADC_CFGR1_EXTSEL_1                
 621:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #endif
 622:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO      (                     ADC_CFGR1_EXTSEL_1 | ADC_CFGR1_EXT
 623:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #if defined(TIM4)
 624:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_TRGO      (ADC_CFGR1_EXTSEL_2 | ADC_CFGR1_EXTSEL_1                
 625:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #endif
 626:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #if defined(TIM6)
 627:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM6_TRGO      (ADC_CFGR1_EXTSEL_2                      | ADC_CFGR1_EXT
 628:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #endif
 629:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #if defined(TIM15)
 630:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO     (ADC_CFGR1_EXTSEL_2                                     
 631:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #endif
 632:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11    (ADC_CFGR1_EXTSEL_2 | ADC_CFGR1_EXTSEL_1 | ADC_CFGR1_EXT
 633:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 634:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 635:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 636:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 637:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 638:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 639:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 640:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                    ADC_CFGR1_EXTEN_0) /*!< ADC group r
 641:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR1_EXTEN_1                    ) /*!< ADC group r
 642:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR1_EXTEN_1 | ADC_CFGR1_EXTEN_0) /*!< ADC group r
 643:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 644:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 645:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 646:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 647:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
 648:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 649:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 650:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
 651:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR1_CONT)        /*!< ADC conversions are perform
 652:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
ARM GAS  /tmp/ccPLPcMa.s 			page 31


 653:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 654:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 655:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 656:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
 657:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 658:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversio
 660:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                   ADC_CFGR1_DMAEN)  /*!< ADC conversio
 661:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN)  /*!< ADC conversio
 662:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 663:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 664:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 665:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 666:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
 667:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 668:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
 670:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR1_OVRMOD)     /*!< ADC group regular behavior i
 671:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 672:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 673:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 674:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_MODE  ADC group regular - Sequencer configuration flexibility
 676:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 678:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_FIXED               (0x00000000UL)         /*!< Sequencer configured to not 
 679:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_CONFIGURABLE        (ADC_CFGR1_CHSELRMOD)  /*!< Sequencer configured to full
 680:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 681:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 682:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 684:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
 685:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 687:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (ADC_CHSELR_SQ2)       /*!< ADC group regular sequencer 
 688:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (ADC_CHSELR_SQ3)       /*!< ADC group regular sequencer 
 689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (ADC_CHSELR_SQ4)       /*!< ADC group regular sequencer 
 690:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (ADC_CHSELR_SQ5)       /*!< ADC group regular sequencer 
 691:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (ADC_CHSELR_SQ6)       /*!< ADC group regular sequencer 
 692:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (ADC_CHSELR_SQ7)       /*!< ADC group regular sequencer 
 693:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (ADC_CHSELR_SQ8)       /*!< ADC group regular sequencer 
 694:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (0x00000000UL)         /*!< ADC group regular sequencer 
 695:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 696:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 697:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 698:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 699:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_DIRECTION  ADC group regular - Sequencer scan direction
 700:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 701:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 702:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DIR_FORWARD    (0x00000000UL)         /*!< On this STM32 series, parame
 703:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD   (ADC_CFGR1_SCANDIR)    /*!< On this STM32 series, parame
 704:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 705:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 707:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 708:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
 709:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccPLPcMa.s 			page 32


 710:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 711:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
 712:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (ADC_CFGR1_DISCEN)                                      
 713:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 714:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 715:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 716:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 717:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
 718:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 719:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 720:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_REG_RANK_1_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 721:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_REG_RANK_2_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 722:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_REG_RANK_3_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 723:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_REG_RANK_4_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 724:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_REG_RANK_5_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 725:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_REG_RANK_6_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 726:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_REG_RANK_7_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 727:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_REG_RANK_8_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 728:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 729:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 730:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 731:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 732:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
 733:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 734:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 735:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_1CYCLE_5       (0x00000000UL)                                        /*
 736:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_3CYCLES_5      (ADC_SMPR_SMP1_0)                                     /*
 737:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_7CYCLES_5      (ADC_SMPR_SMP1_1)                                     /*
 738:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_12CYCLES_5     (ADC_SMPR_SMP1_1 | ADC_SMPR_SMP1_0)                   /*
 739:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_19CYCLES_5     (ADC_SMPR_SMP1_2)                                     /*
 740:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_39CYCLES_5     (ADC_SMPR_SMP1_2 | ADC_SMPR_SMP1_0)                   /*
 741:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_79CYCLES_5     (ADC_SMPR_SMP1_2 | ADC_SMPR_SMP1_1)                   /*
 742:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_160CYCLES_5    (ADC_SMPR_SMP1_2 | ADC_SMPR_SMP1_1 | ADC_SMPR_SMP1_0) /*
 743:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 744:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 745:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 746:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 747:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
 748:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 749:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 750:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
 751:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
 752:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
 753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 755:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 756:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 757:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
 758:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 759:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 760:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
 761:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                         | ADC
 762:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)         | ADC
 763:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)         | ADC
 764:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)         | ADC
 765:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)         | ADC
 766:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)         | ADC
ARM GAS  /tmp/ccPLPcMa.s 			page 33


 767:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)         | ADC
 768:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)         | ADC
 769:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)         | ADC
 770:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)         | ADC
 771:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)         | ADC
 772:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)         | ADC
 773:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)         | ADC
 774:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)         | ADC
 775:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)         | ADC
 776:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)         | ADC
 777:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)         | ADC
 778:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)         | ADC
 779:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)         | ADC
 780:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)         | ADC
 781:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT    & ADC_CHANNEL_ID_MASK) | ADC
 782:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG       ((LL_ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_ID_MASK) | ADC
 783:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT       & ADC_CHANNEL_ID_MASK) | ADC
 784:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 785:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 786:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 788:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
 789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 791:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (ADC_TR1_HT1              ) /*!< ADC analog watchdog thr
 792:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (              ADC_TR1_LT1) /*!< ADC analog watchdog thr
 793:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLDS_HIGH_LOW     (ADC_TR1_HT1 | ADC_TR1_LT1) /*!< ADC analog watchdog bot
 794:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 795:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 796:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 797:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 798:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
 799:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 800:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 801:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
 802:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_OVSE)  /*
 803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 804:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 805:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 806:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 807:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
 808:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 809:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 810:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
 811:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TOVS)       /*!< ADC oversampling discontinuo
 812:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 813:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 814:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 815:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 816:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
 817:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 818:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 819:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
 820:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                      ADC_CFGR2_OVSR_0)
 821:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                   ADC_CFGR2_OVSR_1                   )
 822:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                   ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
 823:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC_CFGR2_OVSR_2                                      )
ARM GAS  /tmp/ccPLPcMa.s 			page 34


 824:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC_CFGR2_OVSR_2                    | ADC_CFGR2_OVSR_0)
 825:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1                   )
 826:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
 827:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 828:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 829:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 830:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 831:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
 832:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 833:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 834:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
 835:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
 836:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
 837:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
 838:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
 839:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
 840:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
 841:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
 842:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
 843:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 844:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 845:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 846:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 847:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HELPER_MACRO  Definitions of constants used by helper macro
 848:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 849:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_TEMPERATURE_CALC_ERROR     ((int16_t)0x7FFF) /* Temperature calculation error using 
 851:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 852:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 854:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 855:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
 856:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
 857:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         not timeout values.
 858:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
 859:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         above each literal definition.
 860:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 861:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 862:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 863:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
 864:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       not timeout values.                                                  */
 865:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
 866:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
 867:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
 868:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
 869:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       STM32 series:                                                        */
 870:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 82/fADC.                    */
 871:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
 872:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
 873:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
 874:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
 875:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
 876:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*         cycles                                                             */
 877:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
 878:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*         configuration.                                                     */
 879:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
 880:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 35


 881:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
 882:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
 883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
 884:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Unit: us                                                                   */
 885:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 20UL)  /*!< Delay for ADC stabilization time (ADC vol
 886:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 887:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
 888:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
 889:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* parameter "tstart_vrefint").                                               */
 890:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Unit: us                                                                   */
 891:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US           ( 12UL)  /*!< Delay for internal voltage reference s
 892:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 893:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
 894:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
 895:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* parameter "tSTART").                                                       */
 896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Unit: us                                                                   */
 897:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US        (120UL)  /*!< Delay for temperature sensor stabiliza
 898:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US ( 15UL)  /*!< Delay for temperature sensor buffer st
 899:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 900:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
 901:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Note: On this STM32 series, a minimum number of ADC clock cycles           */
 902:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
 903:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
 904:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
 905:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
 906:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
 907:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES   (  2UL)  /*!< Delay required between ADC end of cali
 908:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 909:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 910:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 911:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 912:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 913:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 914:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 915:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 916:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 917:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 918:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
 919:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
 920:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 921:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 922:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 923:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
 924:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 925:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 926:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 927:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 928:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Write a value in ADC register
 929:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
 930:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __REG__ Register to be written
 931:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
 932:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
 933:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 934:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 935:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 936:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 937:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Read a value in ADC register
ARM GAS  /tmp/ccPLPcMa.s 			page 36


 938:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
 939:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __REG__ Register to be read
 940:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Register value
 941:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 942:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 943:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 944:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
 945:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 946:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 947:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
 948:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
 949:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 950:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 951:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
 952:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
 953:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
 954:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Example:
 955:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
 956:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           will return decimal number "4".
 957:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
 958:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         number is returned, either defined with number
 959:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
 960:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 961:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
 962:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
 963:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
 964:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
 965:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
 966:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
 967:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
 968:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
 969:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
 970:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
 971:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
 972:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
 973:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
 974:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
 975:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
 976:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
 977:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
 978:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
 979:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
 980:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
 981:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
 982:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
 983:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
 984:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
 985:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
 986:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
 987:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
 988:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
 989:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                                
 990:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL) ?                                       
 991:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****    (                                                                                               
 992:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS         
 993:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****    )                                                                                               
 994:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****    :                                                                                               
ARM GAS  /tmp/ccPLPcMa.s 			page 37


 995:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****    ((((__CHANNEL__) & ADC_CHANNEL_0_BITFIELD) == ADC_CHANNEL_0_BITFIELD) ? (0UL) :                 
 996:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     ((((__CHANNEL__) & ADC_CHANNEL_1_BITFIELD) == ADC_CHANNEL_1_BITFIELD) ? (1UL) :                
 997:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****      ((((__CHANNEL__) & ADC_CHANNEL_2_BITFIELD) == ADC_CHANNEL_2_BITFIELD) ? (2UL) :               
 998:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       ((((__CHANNEL__) & ADC_CHANNEL_3_BITFIELD) == ADC_CHANNEL_3_BITFIELD) ? (3UL) :              
 999:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****        ((((__CHANNEL__) & ADC_CHANNEL_4_BITFIELD) == ADC_CHANNEL_4_BITFIELD) ? (4UL) :             
1000:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         ((((__CHANNEL__) & ADC_CHANNEL_5_BITFIELD) == ADC_CHANNEL_5_BITFIELD) ? (5UL) :            
1001:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****          ((((__CHANNEL__) & ADC_CHANNEL_6_BITFIELD) == ADC_CHANNEL_6_BITFIELD) ? (6UL) :           
1002:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           ((((__CHANNEL__) & ADC_CHANNEL_7_BITFIELD) == ADC_CHANNEL_7_BITFIELD) ? (7UL) :          
1003:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****            ((((__CHANNEL__) & ADC_CHANNEL_8_BITFIELD) == ADC_CHANNEL_8_BITFIELD) ? (8UL) :         
1004:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****             ((((__CHANNEL__) & ADC_CHANNEL_9_BITFIELD) == ADC_CHANNEL_9_BITFIELD) ? (9UL) :        
1005:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ((((__CHANNEL__) & ADC_CHANNEL_10_BITFIELD) == ADC_CHANNEL_10_BITFIELD) ? (10UL) :    
1006:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****               ((((__CHANNEL__) & ADC_CHANNEL_11_BITFIELD) == ADC_CHANNEL_11_BITFIELD) ? (11UL) :   
1007:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                ((((__CHANNEL__) & ADC_CHANNEL_12_BITFIELD) == ADC_CHANNEL_12_BITFIELD) ? (12UL) :  
1008:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                 ((((__CHANNEL__) & ADC_CHANNEL_13_BITFIELD) == ADC_CHANNEL_13_BITFIELD) ? (13UL) : 
1009:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                  ((((__CHANNEL__) & ADC_CHANNEL_14_BITFIELD) == ADC_CHANNEL_14_BITFIELD) ? (14UL) :
1010:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                   ((((__CHANNEL__) & ADC_CHANNEL_15_BITFIELD) == ADC_CHANNEL_15_BITFIELD) ? (15UL) 
1011:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                    ((((__CHANNEL__) & ADC_CHANNEL_16_BITFIELD) == ADC_CHANNEL_16_BITFIELD) ? (16UL)
1012:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                     ((((__CHANNEL__) & ADC_CHANNEL_17_BITFIELD) == ADC_CHANNEL_17_BITFIELD) ? (17UL
1013:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                      ((((__CHANNEL__) & ADC_CHANNEL_18_BITFIELD) == ADC_CHANNEL_18_BITFIELD) ? (18U
1014:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                       (0UL)))))))))))))))))))))
1015:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1016:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1017:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
1018:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         from number in decimal format.
1019:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Example:
1020:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1021:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1022:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1023:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1024:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1025:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1026:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1027:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1028:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1029:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1030:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1031:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1032:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1033:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1034:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1035:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1036:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1037:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1038:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1039:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
1040:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
1041:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
1042:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1043:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT    (2)
1044:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR (2)
1045:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (2)
1046:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
1047:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
1048:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
1049:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().\n
1050:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (2) For ADC channel read back from ADC register,
1051:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             comparison with internal channel parameter to be done
ARM GAS  /tmp/ccPLPcMa.s 			page 38


1052:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1053:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1054:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                         \
1055:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   (((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) |                 \
1056:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****    (ADC_CHSELR_CHSEL0 << (__DECIMAL_NB__)))
1057:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1058:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1059:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
1060:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
1061:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1062:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - ADC internal channel:
1063:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1064:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1065:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1066:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1067:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1068:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1069:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1070:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1071:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         returned from ADC registers,
1072:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         because internal and external channels share the same channel
1073:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1074:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         parameters definitions of driver.
1075:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1076:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1077:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1078:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1079:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1080:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1081:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1082:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1083:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1084:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1085:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1086:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1087:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1088:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1089:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1090:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1091:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
1092:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
1093:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
1094:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1095:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
1096:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
1097:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
1098:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
1099:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
1100:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
1101:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
1102:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1103:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1104:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1105:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1106:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1107:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1108:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
ARM GAS  /tmp/ccPLPcMa.s 			page 39


1109:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1110:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1111:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1112:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
1113:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
1114:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1115:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1116:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1117:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a value defined from parameter definition of
1118:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1119:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1120:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         from ADC registers.
1121:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1122:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1123:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1124:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1125:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1126:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1127:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1128:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1129:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1130:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1131:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1132:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1133:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1134:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1135:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1136:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1137:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
1138:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
1139:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
1140:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1141:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
1142:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
1143:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
1144:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
1145:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
1146:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
1147:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
1148:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1149:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1150:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1151:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1152:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1153:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1154:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1155:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1156:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1157:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1158:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1159:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1160:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1161:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1162:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1163:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1164:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1165:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
ARM GAS  /tmp/ccPLPcMa.s 			page 40


1166:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1167:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1169:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1170:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1171:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1172:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1173:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1174:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1175:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1176:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1177:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1178:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1179:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1180:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or a value from functions where a channel number is
1181:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         returned from ADC registers,
1182:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         because internal and external channels share the same channel
1183:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1184:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         parameters definitions of driver.
1185:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1186:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1187:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
1188:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
1189:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
1190:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1191:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1192:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1193:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1194:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   (((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)    ||                             \
1195:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****    ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR) ||                             \
1196:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****    ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT))
1197:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1198:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1199:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1200:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1201:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1202:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1203:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example:
1204:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1205:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1206:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1207:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1208:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1209:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1210:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1211:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1212:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1213:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1214:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1215:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1216:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1217:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1219:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1220:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1221:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1222:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
ARM GAS  /tmp/ccPLPcMa.s 			page 41


1223:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
1224:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
1225:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
1226:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1227:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT    (2)
1228:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR (2)
1229:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (2)
1230:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
1231:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
1232:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
1233:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().\n
1234:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (2) For ADC channel read back from ADC register,
1235:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             comparison with internal channel parameter to be done
1236:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1237:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
1238:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
1239:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1240:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
1241:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
1242:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG
1243:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG
1244:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG
1245:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG
1246:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG
1247:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG
1248:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG
1249:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG
1250:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG
1251:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG
1252:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
1253:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
1254:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
1255:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
1256:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
1257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
1258:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
1259:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
1260:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG
1261:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG
1262:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
1263:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
1264:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1265:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
1266:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL)
1267:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1268:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
1270:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
1271:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         different of 12 bits.
1272:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_ConfigAnalogWDThresholds()
1273:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or @ref LL_ADC_SetAnalogWDThresholds().
1274:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
1275:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
1276:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
1277:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *            (< ADCx param >,
1278:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_8
1279:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *            );
ARM GAS  /tmp/ccPLPcMa.s 			page 42


1280:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1281:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1282:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1283:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1284:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1285:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000 and Max_Data=0xFFF
1286:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1287:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1288:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
1289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U )))
1290:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1291:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1292:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
1293:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
1294:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         different of 12 bits.
1295:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
1296:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
1297:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
1298:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           < threshold_value_6_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
1299:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
1300:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
1301:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *            );
1302:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1304:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1306:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1307:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_12_BITS__ Value between Min_Data=0x000 and Max_Data=0xFFF
1308:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1309:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1310:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_12_BITS__) \
1311:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ((__AWD_THRESHOLD_12_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U )))
1312:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1313:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1314:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to get the ADC analog watchdog threshold high
1315:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or low from raw value containing both thresholds concatenated.
1316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
1317:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example, to get analog watchdog threshold high from the register raw value:
1318:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(LL_ADC_AWD_THRESHOLD_HIGH, <raw_value_with_both
1319:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_TYPE__ This parameter can be one of the following values:
1320:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
1321:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
1322:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __AWD_THRESHOLDS__ Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
1323:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1324:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1325:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(__AWD_THRESHOLD_TYPE__, __AWD_THRESHOLDS__)       \
1326:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   (((__AWD_THRESHOLDS__) >> (((__AWD_THRESHOLD_TYPE__) & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_
1327:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1328:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1329:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
1330:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
1331:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
1332:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
1333:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
1334:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
1335:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
1336:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval ADC common register instance
ARM GAS  /tmp/ccPLPcMa.s 			page 43


1337:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1338:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
1339:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   (ADC1_COMMON)
1340:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1341:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1342:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
1343:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC common instance are disabled.
1344:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
1345:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
1346:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1347:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
1348:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
1349:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
1350:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
1351:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
1352:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1353:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
1354:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         are disabled.
1355:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
1356:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is enabled.
1357:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1358:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
1359:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   LL_ADC_IsEnabled(ADC1)
1360:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1361:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1362:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
1363:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
1364:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
1365:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
1366:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (refer to reference manual).
1367:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1368:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1369:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1370:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1371:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1372:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
1373:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1374:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
1375:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1UL)))
1376:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1377:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1378:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
1379:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a resolution to another resolution.
1380:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
1381:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
1382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This parameter can be one of the following values:
1383:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1384:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1385:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1386:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1387:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
1388:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This parameter can be one of the following values:
1389:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1390:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1392:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1393:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
ARM GAS  /tmp/ccPLPcMa.s 			page 44


1394:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1395:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
1396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
1397:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)          \
1398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** (((__DATA__)                                                                 \
1399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1UL)))  \
1400:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****  >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1UL))     \
1401:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** )
1402:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1403:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1404:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
1405:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
1406:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
1407:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
1408:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
1409:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
1410:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 12 bits)
1411:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                       (unit: digital value).
1412:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1413:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1414:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1415:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1416:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1417:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
1418:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1419:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
1420:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                       __ADC_DATA__,\
1421:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                    \
1422:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
1423:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****  / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
1424:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** )
1425:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1426:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
1428:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
1429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         reference VrefInt.
1430:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
1431:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         stored in system memory for each device during production.
1432:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
1433:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         connected to pin Vref+.
1434:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
1435:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
1436:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, calibration data of internal voltage reference
1437:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 12 bits,
1438:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
1439:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         internal voltage reference VrefInt.
1440:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
1441:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
1442:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 12 bits)
1443:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
1444:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1445:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1446:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1447:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1448:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1449:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
1450:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
ARM GAS  /tmp/ccPLPcMa.s 			page 45


1451:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
1452:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                 \
1453:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
1454:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****  / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                  \
1455:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                     (__ADC_RESOLUTION__),                    \
1456:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                     LL_ADC_RESOLUTION_12B)                   \
1457:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** )
1458:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1459:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1460:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
1461:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
1462:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
1463:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         stored in system memory for each device during production.
1464:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Calculation formula:
1465:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
1466:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
1467:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
1468:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
1469:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
1470:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
1471:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
1472:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
1473:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
1474:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
1475:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
1476:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  parameters are correct (address and data).
1477:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
1478:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
1479:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  less accurate than calibrated values),
1480:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
1481:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
1482:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
1483:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
1484:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
1485:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
1486:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, calibration data of temperature sensor
1487:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         corresponds to a resolution of 12 bits,
1488:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
1489:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         temperature sensor.
1490:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
1491:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
1492:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
1493:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
1494:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
1495:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
1496:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                 sensor voltage has been measured.
1497:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This parameter can be one of the following values:
1498:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1499:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1500:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1501:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1502:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
1503:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         In case or error, value LL_ADC_TEMPERATURE_CALC_ERROR is returned (inconsistent tempera
1504:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1505:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
1506:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
1507:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                   __ADC_RESOLUTION__)\
ARM GAS  /tmp/ccPLPcMa.s 			page 46


1508:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** ((((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0) ?        \
1509:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
1510:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
1511:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_12B)         \
1512:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
1513:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
1514:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
1515:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
1516:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
1517:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
1518:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   )                                                                                \
1519:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   :                                                                                \
1520:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ((int32_t)LL_ADC_TEMPERATURE_CALC_ERROR)                                         \
1521:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** )
1522:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1523:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1524:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
1525:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
1526:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
1527:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (refer to device datasheet).
1528:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Calculation formula:
1529:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
1530:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
1531:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
1532:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                   (unit: digital value)
1533:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
1534:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
1535:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
1536:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
1537:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
1538:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  of the current device has characteristics in line with
1539:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  datasheet typical values.
1540:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
1541:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
1542:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
1543:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
1544:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
1545:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
1546:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
1547:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
1548:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
1549:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 12 bits
1550:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
1551:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 12 bits.
1552:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
1553:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                       On STM32G0, refer to device datasheet parameter "Avg_Slop
1554:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
1555:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                       On STM32G0, refer to device datasheet parameter "V30" (co
1556:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
1557:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
1558:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
1559:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
1560:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This parameter can be one of the following values:
1561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1562:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1563:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1564:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
ARM GAS  /tmp/ccPLPcMa.s 			page 47


1565:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
1566:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1567:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
1568:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
1569:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
1570:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
1571:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
1572:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              __ADC_RESOLUTION__)            \
1573:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** (((((int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
1574:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
1575:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****               * 1000UL)                                                     \
1576:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     -                                                                       \
1577:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
1578:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****               * 1000UL)                                                     \
1579:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****    )                                                                        \
1580:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                \
1581:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****  ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                    \
1582:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** )
1583:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1584:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1585:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
1586:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1587:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1588:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1589:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
1590:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1591:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1592:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1593:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
1594:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
1595:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
1596:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1597:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1598:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
1599:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
1600:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1601:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /* Note: LL ADC functions to set DMA transfer are located into sections of    */
1602:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       configuration of ADC instance, groups and multimode (if available):  */
1603:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /*       @ref LL_ADC_REG_SetDMATransfer(), ...                                */
1604:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1605:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1606:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
1607:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
1608:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
1609:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   These ADC registers are data registers:
1610:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
1611:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
1612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
1613:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
1614:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example:
1615:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
1616:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
1617:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
1618:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
1619:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
1620:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
1621:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
ARM GAS  /tmp/ccPLPcMa.s 			page 48


1622:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
1623:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
1624:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_DMA_GetRegAddr
1625:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
1626:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
1627:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
1628:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval ADC register address
1629:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1630:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
1631:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1632:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
1633:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   (void)(Register);
1634:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1635:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Retrieve address of register DR */
1636:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t) &(ADCx->DR);
1637:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1638:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1639:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1640:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
1641:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1642:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1643:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
1644:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
1645:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1646:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1647:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1648:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
1649:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1650:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
1651:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1652:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
1653:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
1654:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
1655:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CCR      PRESC          LL_ADC_SetCommonClock
1656:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1657:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1658:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
1659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1   (1)
1660:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2   (1)
1661:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4   (1)
1662:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6   (1)
1663:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8   (1)
1664:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10  (1)
1665:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12  (1)
1666:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16  (1)
1667:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32  (1)
1668:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64  (1)
1669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128 (1)
1670:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256 (1)
1671:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
1672:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) ADC common clock asynchronous prescaler is applied to
1673:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             each ADC instance if the corresponding ADC instance clock
1674:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             is set to clock source asynchronous.
1675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (refer to function @ref LL_ADC_SetClock() ).
1676:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
1677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1678:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
ARM GAS  /tmp/ccPLPcMa.s 			page 49


1679:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1680:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
1681:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1682:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1684:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
1685:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CCR      PRESC          LL_ADC_GetCommonClock
1686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1687:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1688:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1   (1)
1690:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2   (1)
1691:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4   (1)
1692:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6   (1)
1693:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8   (1)
1694:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10  (1)
1695:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12  (1)
1696:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16  (1)
1697:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32  (1)
1698:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64  (1)
1699:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128 (1)
1700:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256 (1)
1701:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
1702:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) ADC common clock asynchronous prescaler is applied to
1703:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             each ADC instance if the corresponding ADC instance clock
1704:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             is set to clock source asynchronous.
1705:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (refer to function @ref LL_ADC_SetClock() ).
1706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1707:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
1708:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1709:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
1710:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1711:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1712:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1713:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Legacy feature, useless on STM32G0 (ADC common clock low frequency
1714:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****             mode is automatically managed by ADC peripheral on STM32G0).
1715:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****             Function kept for legacy purpose.
1716:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1717:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
1718:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1719:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
1720:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CCR      LFMEN          LL_ADC_SetCommonFrequencyMode
1721:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1722:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1723:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  CommonFrequencyMode This parameter can be one of the following values:
1724:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
1725:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
1726:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
1727:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1728:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Commo
1729:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1730:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
1731:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1732:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1733:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1734:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Legacy feature, useless on STM32G0 (ADC common clock low frequency
1735:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****             mode is automatically managed by ADC peripheral on STM32G0).
ARM GAS  /tmp/ccPLPcMa.s 			page 50


1736:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****             Function kept for legacy purpose.
1737:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CCR      LFMEN          LL_ADC_GetCommonFrequencyMode
1738:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1739:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1740:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1741:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
1742:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
1743:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1744:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON)
1745:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1746:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_LFMEN));
1747:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1748:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1749:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1750:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to
1751:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         internal channels (VrefInt, temperature sensor, ...).
1752:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Configure all paths (overwrite current configuration).
1753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   One or several values can be selected.
1754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1755:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1756:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         The values not selected are removed from configuration.
1757:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
1758:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
1759:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
1760:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         temperature sensor stabilization time.
1761:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet.
1762:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
1763:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to literals @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US,
1764:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US.
1765:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
1766:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         For ADC conversion of internal channels,
1767:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a sampling time minimum value is required.
1768:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet.
1769:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1770:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
1771:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1772:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
1773:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
1774:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
1775:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
1776:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalCh\n
1777:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalCh
1778:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1779:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1780:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
1781:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1782:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1783:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1784:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
1785:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
1786:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
1788:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1791:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1792:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
ARM GAS  /tmp/ccPLPcMa.s 			page 51


1793:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to
1794:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         internal channels (VrefInt, temperature sensor, ...).
1795:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Add paths to the current configuration.
1796:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   One or several values can be selected.
1797:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1798:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1799:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
1800:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
1801:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
1802:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         temperature sensor stabilization time.
1803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet.
1804:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
1805:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to literals @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US,
1806:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US.
1807:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
1808:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         For ADC conversion of internal channels,
1809:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a sampling time minimum value is required.
1810:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet.
1811:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1812:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
1813:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1814:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
1815:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
1816:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
1817:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalChAdd\n
1818:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalChAdd\n
1819:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalChAdd
1820:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1821:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1822:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
1823:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1824:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1825:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1826:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
1827:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
1828:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1829:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalChAdd(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t P
1830:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1831:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCxy_COMMON->CCR, PathInternal);
1832:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1833:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1834:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1835:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to
1836:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         internal channels (VrefInt, temperature sensor, ...).
1837:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Remove paths to the current configuration.
1838:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   One or several values can be selected.
1839:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1840:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1841:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1842:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
1843:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1844:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
1845:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
1846:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
1847:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalChRem\n
1848:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalChRem\n
1849:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalChRem
ARM GAS  /tmp/ccPLPcMa.s 			page 52


1850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1851:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1852:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
1853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1854:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1855:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1856:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
1857:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
1858:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1859:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalChRem(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t P
1860:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1861:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCxy_COMMON->CCR, PathInternal);
1862:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1863:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1864:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1865:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
1866:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
1867:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   One or several values can be selected.
1868:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1869:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1870:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
1871:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_GetCommonPathInternalCh\n
1872:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_GetCommonPathInternalCh
1873:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1874:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1875:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
1876:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1877:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1878:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1879:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
1880:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1881:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
1882:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
1884:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1885:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1886:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1887:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
1888:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1889:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1890:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
1891:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
1892:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1893:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1894:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1895:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC instance clock source and prescaler.
1896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1897:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
1898:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled.
1899:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    CKMODE         LL_ADC_SetClock
1900:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
1901:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ClockSource This parameter can be one of the following values:
1902:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
1903:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
1904:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1 (2)
1905:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC (1)
1906:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
ARM GAS  /tmp/ccPLPcMa.s 			page 53


1907:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) Asynchronous clock prescaler can be configured using
1908:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             function @ref LL_ADC_SetCommonClock().\n
1909:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (2) Caution: This parameter has some clock ratio constraints:
1910:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             This configuration must be enabled only if PCLK has a 50%
1911:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             duty clock cycle (APB prescaler configured inside the RCC
1912:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             must be bypassed and the system clock must by 50% duty
1913:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             cycle).
1914:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Refer to reference manual.
1915:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
1916:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1917:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetClock(ADC_TypeDef *ADCx, uint32_t ClockSource)
1918:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1919:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
1920:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1921:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1922:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1923:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC instance clock source and prescaler.
1924:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    CKMODE         LL_ADC_GetClock
1925:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
1926:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1927:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
1928:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
1929:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1 (2)
1930:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC (1)
1931:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
1932:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) Asynchronous clock prescaler can be retrieved using
1933:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             function @ref LL_ADC_GetCommonClock().\n
1934:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (2) Caution: This parameter has some clock ratio constraints:
1935:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             This configuration must be enabled only if PCLK has a 50%
1936:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             duty clock cycle (APB prescaler configured inside the RCC
1937:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             must be bypassed and the system clock must by 50% duty
1938:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             cycle).
1939:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Refer to reference manual.
1940:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1941:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetClock(ADC_TypeDef *ADCx)
1942:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1943:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
1944:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1945:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1946:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1947:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
1948:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
1949:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
1950:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         without having to perform a new calibration using
1951:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
1952:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1953:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
1954:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
1955:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on going on group regular.
1956:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT        LL_ADC_SetCalibrationFactor
1957:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
1958:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
1959:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
1960:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1961:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t CalibrationFactor)
1962:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1963:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
ARM GAS  /tmp/ccPLPcMa.s 			page 54


1964:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CALFACT_CALFACT,
1965:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              CalibrationFactor);
1966:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1967:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1968:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1969:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
1970:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
1971:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
1972:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
1973:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT        LL_ADC_GetCalibrationFactor
1974:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
1975:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
1976:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1977:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationFactor(ADC_TypeDef *ADCx)
1978:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
1979:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
1980:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
1981:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
1982:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
1983:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC resolution.
1984:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
1985:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         dependencies to ADC resolutions.
1986:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1987:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
1988:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
1989:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
1990:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    RES            LL_ADC_SetResolution
1991:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
1992:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
1993:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1994:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1995:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1996:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1997:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
1998:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
1999:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
2000:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2001:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, Resolution);
2002:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2003:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2004:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2005:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC resolution.
2006:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2007:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2008:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    RES            LL_ADC_GetResolution
2009:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2010:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2011:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2012:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2013:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2014:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2015:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2016:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
2017:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2018:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_RES));
2019:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2020:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 55


2021:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2022:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC conversion data alignment.
2023:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
2024:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2025:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2026:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2027:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2028:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2029:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    ALIGN          LL_ADC_SetDataAlignment
2030:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2031:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  DataAlignment This parameter can be one of the following values:
2032:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
2033:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
2034:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2035:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2036:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
2037:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2038:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_ALIGN, DataAlignment);
2039:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2040:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2041:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2042:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC conversion data alignment.
2043:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
2044:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2045:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    ALIGN          LL_ADC_GetDataAlignment
2046:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2047:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2048:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
2049:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
2050:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2051:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataAlignment(ADC_TypeDef *ADCx)
2052:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2053:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_ALIGN));
2054:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2055:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2056:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2057:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC low power mode.
2058:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Description of ADC low power modes:
2059:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2060:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2061:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           in order to reduce power consumption.
2062:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2063:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2064:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           has been retrieved by user software.
2065:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
2066:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           other conversion.
2067:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
2068:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
2069:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
2070:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           applications.
2071:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           How to use this low power mode:
2072:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
2073:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
2074:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
2075:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
2076:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
2077:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
ARM GAS  /tmp/ccPLPcMa.s 			page 56


2078:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
2079:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
2080:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
2081:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
2082:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC conversion start.
2083:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
2084:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
2085:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
2086:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
2087:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
2088:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
2089:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
2090:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
2091:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         of delay during which ADC was idle.
2092:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
2093:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
2094:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC channel.
2095:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2096:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2097:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2098:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2099:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    WAIT           LL_ADC_SetLowPowerMode\n
2100:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    AUTOFF         LL_ADC_SetLowPowerMode
2101:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2102:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
2103:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
2104:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
2105:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOPOWEROFF
2106:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF
2107:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2108:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2109:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
2110:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2111:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF), LowPowerMode);
2112:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2113:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2114:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2115:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC low power mode:
2116:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Description of ADC low power modes:
2117:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2118:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2119:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           in order to reduce power consumption.
2120:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2121:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2122:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           has been retrieved by user software.
2123:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
2124:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           other conversion.
2125:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
2126:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
2127:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
2128:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           applications.
2129:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           How to use this low power mode:
2130:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
2131:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
2132:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
2133:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
2134:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
ARM GAS  /tmp/ccPLPcMa.s 			page 57


2135:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
2136:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
2137:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
2138:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
2139:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
2140:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC conversion start.
2141:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
2142:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
2143:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
2144:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
2145:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
2146:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
2147:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
2148:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
2149:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         of delay during which ADC was idle.
2150:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
2151:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
2152:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC channel.
2153:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    WAIT           LL_ADC_GetLowPowerMode\n
2154:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    AUTOFF         LL_ADC_GetLowPowerMode
2155:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2156:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2157:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
2158:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
2159:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOPOWEROFF
2160:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF
2161:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2162:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
2163:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2164:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF)));
2165:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2166:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2167:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC trigger frequency mode.
2169:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   ADC trigger frequency mode must be set to low frequency when
2170:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a duration is exceeded before ADC conversion start trigger event
2171:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (between ADC enable and ADC conversion start trigger event
2172:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or between two ADC conversion start trigger event).
2173:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Duration value: Refer to device datasheet, parameter "tIdle".
2174:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   When ADC trigger frequency mode is set to low frequency,
2175:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         some rearm cycles are inserted before performing ADC conversion
2176:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         start, inducing a delay of 2 ADC clock cycles.
2177:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Usage of ADC trigger frequency mode with ADC low power mode:
2178:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Low power mode auto wait: Only the first ADC conversion
2179:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           start trigger inserts the rearm delay.
2180:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Low power mode auto power-off: ADC trigger frequency mode
2181:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           is discarded.
2182:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2183:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2184:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled.
2185:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    LFTRIG         LL_ADC_SetTriggerFrequencyMode
2186:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2187:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  TriggerFrequencyMode This parameter can be one of the following values:
2188:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
2189:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
2190:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2191:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
ARM GAS  /tmp/ccPLPcMa.s 			page 58


2192:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMod
2193:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2194:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
2195:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2196:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2197:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2198:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC trigger frequency mode.
2199:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    LFTRIG         LL_ADC_GetTriggerFrequencyMode
2200:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2201:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2202:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
2203:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
2204:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2205:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetTriggerFrequencyMode(ADC_TypeDef *ADCx)
2206:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2207:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_LFTRIG));
2208:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2209:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2210:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2211:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set sampling time common to a group of channels.
2212:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Unit: ADC clock cycles.
2213:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, sampling time scope is on ADC instance:
2214:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Sampling time common to all channels.
2215:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (on some other STM32 families, sampling time is channel wise)
2216:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
2217:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         converted:
2218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
2219:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
2220:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         setting).
2221:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
2222:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TS_temp, ...).
2223:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
2224:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         On this STM32 series, ADC processing time is:
2225:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
2226:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
2227:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
2228:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
2229:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
2230:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
2231:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is required.
2232:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet.
2233:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2234:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2235:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2236:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2237:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll SMPR     SMP1           LL_ADC_SetSamplingTimeCommonChannels\n
2238:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll SMPR     SMP2           LL_ADC_SetSamplingTimeCommonChannels
2239:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2240:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  SamplingTimeY This parameter can be one of the following values:
2241:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
2242:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
2243:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
2244:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
2245:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_3CYCLES_5
2246:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_7CYCLES_5
2247:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
2248:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_19CYCLES_5
ARM GAS  /tmp/ccPLPcMa.s 			page 59


2249:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
2250:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
2251:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
2252:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2253:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2254:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY
2255:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                           uint32_t SamplingTime)
2256:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->SMPR,
2258:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
2259:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
2260:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2261:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2262:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2263:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get sampling time common to a group of channels.
2264:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Unit: ADC clock cycles.
2265:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, sampling time scope is on ADC instance:
2266:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Sampling time common to all channels.
2267:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (on some other STM32 families, sampling time is channel wise)
2268:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
2269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to reference manual for ADC processing time of
2270:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         this STM32 series.
2271:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll SMPR     SMP1           LL_ADC_GetSamplingTimeCommonChannels\n
2272:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll SMPR     SMP2           LL_ADC_GetSamplingTimeCommonChannels
2273:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2274:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  SamplingTimeY This parameter can be one of the following values:
2275:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
2276:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
2277:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2278:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
2279:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_3CYCLES_5
2280:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_7CYCLES_5
2281:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
2282:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_19CYCLES_5
2283:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
2284:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
2285:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
2286:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2287:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingT
2288:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_S
2290:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                     >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
2291:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2292:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2293:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2294:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
2295:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2296:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2297:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
2298:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
2299:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2300:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2301:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2302:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
2303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
2304:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         external interrupt line).
2305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting trigger source to external trigger
ARM GAS  /tmp/ccPLPcMa.s 			page 60


2306:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         also set trigger polarity to rising edge
2307:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
2308:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
2309:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
2310:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
2311:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC trigger frequency mode must be set
2312:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         in function of frequency of ADC group regular conversion trigger.
2313:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of function
2314:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_SetTriggerFrequencyMode().
2315:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
2316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         depends on timers availability on the selected device.
2317:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2318:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2319:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2320:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2321:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTSEL         LL_ADC_REG_SetTriggerSource\n
2322:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    EXTEN          LL_ADC_REG_SetTriggerSource
2323:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2324:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
2325:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
2326:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
2327:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH4
2328:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO   (1)
2329:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
2330:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO   (1)
2331:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO  (1)
2332:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
2333:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
2334:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter not available on all devices
2335:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2336:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2337:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
2338:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2339:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
2340:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2341:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2342:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2343:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
2344:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
2345:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         external interrupt line).
2346:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
2347:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         internal (SW start) or external, without detail
2348:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
2349:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (equivalent to
2350:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
2351:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
2352:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
2353:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         depends on timers availability on the selected device.
2354:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTSEL         LL_ADC_REG_GetTriggerSource\n
2355:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    EXTEN          LL_ADC_REG_GetTriggerSource
2356:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2357:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2358:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
2359:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
2360:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH4
2361:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO   (1)
2362:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
ARM GAS  /tmp/ccPLPcMa.s 			page 61


2363:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO   (1)
2364:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO  (1)
2365:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
2366:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
2367:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter not available on all devices
2368:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2369:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
2370:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2371:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTSEL | ADC_CFGR1_EXTEN);
2372:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2373:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
2374:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* corresponding to ADC_CFGR1_EXTEN {0; 1; 2; 3}.                           */
2375:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t ShiftExten = ((TriggerSource & ADC_CFGR1_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET_POS - 2
2376:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2377:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR1_EXTEN and ADC_CFGR1_EXTSEL       */
2378:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
2379:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((TriggerSource
2380:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR1_EXTSEL)
2381:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR1_EXTEN)
2382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****          );
2383:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2384:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2385:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2386:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
2387:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or external.
2388:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
2389:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
2390:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
2391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
2392:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2393:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
2394:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
2395:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
2397:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) 
2399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2400:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2401:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2402:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
2403:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
2404:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2405:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2406:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2407:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2408:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTEN          LL_ADC_REG_SetTriggerEdge
2409:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2410:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
2411:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
2412:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
2413:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
2414:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2415:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2416:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
2417:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2418:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
2419:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
ARM GAS  /tmp/ccPLPcMa.s 			page 62


2420:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2421:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2422:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
2423:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
2424:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    EXTEN          LL_ADC_REG_GetTriggerEdge
2425:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2426:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
2428:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
2429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
2430:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2431:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
2432:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2433:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN));
2434:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2435:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2436:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2437:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer configuration flexibility.
2438:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2439:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         "fully configurable" or "not fully configurable" are
2440:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         available:
2441:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - sequencer configured to fully configurable:
2442:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           sequencer length and each rank
2443:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           affectation to a channel are configurable.
2444:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Refer to description of function
2445:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerLength().
2446:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - sequencer configured to not fully configurable:
2447:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2448:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           are fixed by channel HW number.
2449:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Refer to description of function
2450:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerChannels().
2451:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2452:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2453:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2454:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2455:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2456:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2457:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         for more details.
2458:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2459:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2460:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2461:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2462:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR     CHSELRMOD      LL_ADC_REG_SetSequencerConfigurable
2463:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2464:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Configurability This parameter can be one of the following values:
2465:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_FIXED
2466:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
2467:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2468:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2469:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurabilit
2470:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2471:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
2472:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2473:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2474:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2475:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer configuration flexibility.
2476:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
ARM GAS  /tmp/ccPLPcMa.s 			page 63


2477:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         "fully configurable" or "not fully configurable" are
2478:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         available:
2479:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - sequencer configured to fully configurable:
2480:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           sequencer length and each rank
2481:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           affectation to a channel are configurable.
2482:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Refer to description of function
2483:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerLength().
2484:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - sequencer configured to not fully configurable:
2485:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2486:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           are fixed by channel HW number.
2487:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Refer to description of function
2488:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerChannels().
2489:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR     CHSELRMOD      LL_ADC_REG_SetSequencerConfigurable
2490:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2491:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2492:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_FIXED
2493:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
2494:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2495:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerConfigurable(ADC_TypeDef *ADCx)
2496:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2497:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
2498:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2499:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2500:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2501:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
2502:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
2503:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
2504:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
2505:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2506:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           are configurable.
2507:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This function performs configuration of:
2508:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
2509:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
2510:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
2511:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Sequencer ranks are selected using
2512:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
2513:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
2514:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
2515:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2516:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           are defined by channel number.
2517:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This function performs configuration of:
2518:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
2519:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
2520:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
2521:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2522:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
2523:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
2524:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             highest channel number).
2525:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Sequencer ranks are selected using
2526:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
2527:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           To set scan direction differently, refer to function
2528:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerScanDirection().
2529:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2530:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
2531:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         are available, they can be chosen using
2532:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
2533:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
ARM GAS  /tmp/ccPLPcMa.s 			page 64


2534:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2535:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2536:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2537:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
2538:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2539:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2540:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         for more details.
2541:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
2542:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
2543:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2544:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2545:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2546:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2547:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CHSELR   SQ1            LL_ADC_REG_SetSequencerLength\n
2548:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ2            LL_ADC_REG_SetSequencerLength\n
2549:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ3            LL_ADC_REG_SetSequencerLength\n
2550:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ4            LL_ADC_REG_SetSequencerLength\n
2551:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ5            LL_ADC_REG_SetSequencerLength\n
2552:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ6            LL_ADC_REG_SetSequencerLength\n
2553:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ7            LL_ADC_REG_SetSequencerLength\n
2554:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ8            LL_ADC_REG_SetSequencerLength
2555:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2556:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
2557:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
2558:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
2559:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
2560:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
2561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
2562:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
2563:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
2564:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
2565:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2566:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2567:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
2568:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2569:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->CHSELR, SequencerNbRanks);
2570:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2571:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2572:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2573:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
2574:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
2575:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
2576:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
2577:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2578:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           are configurable.
2579:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This function retrieves:
2580:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
2581:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
2582:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
2583:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Sequencer ranks are selected using
2584:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
2585:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
2586:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
2587:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2588:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           are defined by channel number.
2589:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This function retrieves:
2590:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
ARM GAS  /tmp/ccPLPcMa.s 			page 65


2591:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
2592:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
2593:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2594:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
2595:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
2596:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             highest channel number).
2597:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Sequencer ranks are selected using
2598:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
2599:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *          To set scan direction differently, refer to function
2600:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *          @ref LL_ADC_REG_SetSequencerScanDirection().
2601:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2602:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
2603:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         are available, they can be chosen using
2604:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
2605:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
2606:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
2607:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CHSELR   SQ1            LL_ADC_REG_GetSequencerLength\n
2608:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ2            LL_ADC_REG_GetSequencerLength\n
2609:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ3            LL_ADC_REG_GetSequencerLength\n
2610:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ4            LL_ADC_REG_GetSequencerLength\n
2611:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ5            LL_ADC_REG_GetSequencerLength\n
2612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ6            LL_ADC_REG_GetSequencerLength\n
2613:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ7            LL_ADC_REG_GetSequencerLength\n
2614:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ8            LL_ADC_REG_GetSequencerLength
2615:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2616:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2617:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
2618:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
2619:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
2620:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
2621:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
2622:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
2623:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
2624:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
2625:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2626:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
2627:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2628:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   __IO uint32_t ChannelsRanks = READ_BIT(ADCx->CHSELR, ADC_CHSELR_SQ_ALL);
2629:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
2630:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t RankIndex;
2631:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2632:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parse register for end of sequence identifier */
2633:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   for (RankIndex = 0UL; RankIndex < (32U - 4U); RankIndex += 4U)
2634:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   {
2635:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     if ((ChannelsRanks & (ADC_CHSELR_SQ2 << RankIndex)) == (ADC_CHSELR_SQ2 << RankIndex))
2636:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     {
2637:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       SequencerLength = (ADC_CHSELR_SQ2 << RankIndex);
2638:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       break;
2639:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     }
2640:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
2641:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2642:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return SequencerLength;
2643:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2644:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2645:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2646:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer scan direction.
2647:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, parameter relevant only is sequencer is set
ARM GAS  /tmp/ccPLPcMa.s 			page 66


2648:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         to mode not fully configurable,
2649:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
2650:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On some other STM32 series, this setting is not available and
2651:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         the default scan direction is forward.
2652:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2653:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2654:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2655:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2656:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
2657:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2658:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         for more details.
2660:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2661:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2662:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2663:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2664:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    SCANDIR        LL_ADC_REG_SetSequencerScanDirection
2665:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2666:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ScanDirection This parameter can be one of the following values:
2667:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
2668:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
2669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2670:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2671:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection
2672:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2673:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
2674:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2676:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer scan direction.
2678:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, parameter relevant only is sequencer is set
2679:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         to mode not fully configurable,
2680:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
2681:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On some other STM32 families, this setting is not available and
2682:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         the default scan direction is forward.
2683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    SCANDIR        LL_ADC_REG_GetSequencerScanDirection
2684:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2685:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
2687:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
2688:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerScanDirection(ADC_TypeDef *ADCx)
2690:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2691:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_SCANDIR));
2692:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2693:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2694:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2695:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
2696:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
2697:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         number of ranks.
2698:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
2699:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
2700:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2701:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2702:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2703:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2704:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    DISCEN         LL_ADC_REG_SetSequencerDiscont\n
ARM GAS  /tmp/ccPLPcMa.s 			page 67


2705:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
2707:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
2708:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
2709:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2710:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2711:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
2712:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2713:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DISCEN, SeqDiscont);
2714:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2715:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2716:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2717:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
2718:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
2719:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         number of ranks.
2720:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    DISCEN         LL_ADC_REG_GetSequencerDiscont\n
2721:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2722:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2723:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
2724:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
2725:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2726:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
2727:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2728:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DISCEN));
2729:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2730:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2731:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2732:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
2733:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         scan sequence rank.
2734:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This function performs configuration of:
2735:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2736:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
2737:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
2738:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
2739:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         affectation to a channel are configurable.
2740:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
2741:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2742:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2743:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
2744:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2745:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         enabled separately.
2746:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2747:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2748:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2749:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2750:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2751:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
2752:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         for more details.
2755:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2756:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2757:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2758:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2759:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CHSELR   SQ1            LL_ADC_REG_SetSequencerRanks\n
2760:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ2            LL_ADC_REG_SetSequencerRanks\n
2761:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ3            LL_ADC_REG_SetSequencerRanks\n
ARM GAS  /tmp/ccPLPcMa.s 			page 68


2762:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ4            LL_ADC_REG_SetSequencerRanks\n
2763:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ5            LL_ADC_REG_SetSequencerRanks\n
2764:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ6            LL_ADC_REG_SetSequencerRanks\n
2765:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ7            LL_ADC_REG_SetSequencerRanks\n
2766:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ8            LL_ADC_REG_SetSequencerRanks
2767:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2768:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2769:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
2770:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
2771:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
2772:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
2773:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
2774:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
2775:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
2776:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
2777:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
2778:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2779:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2780:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2781:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2782:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2783:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2784:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2785:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2786:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2788:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2791:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2792:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2793:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
2794:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
2795:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
2796:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
2797:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
2798:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
2799:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
2800:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
2801:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
2802:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
2803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
2804:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2805:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2806:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
2807:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2808:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
2809:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
2810:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
2811:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2812:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CHSELR,
2813:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
2814:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <<
2815:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2816:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2817:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2818:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
ARM GAS  /tmp/ccPLPcMa.s 			page 69


2819:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         scan sequence rank.
2820:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
2821:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
2822:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         affectation to a channel are configurable.
2823:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
2824:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2825:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2826:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Usage of the returned channel number:
2827:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
2828:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
2829:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
2830:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
2831:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2832:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
2833:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           as parameter for another function.
2834:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - To get the channel number in decimal format:
2835:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           process the returned value with the helper macro
2836:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2837:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CHSELR   SQ1            LL_ADC_REG_GetSequencerRanks\n
2838:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ2            LL_ADC_REG_GetSequencerRanks\n
2839:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ3            LL_ADC_REG_GetSequencerRanks\n
2840:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ4            LL_ADC_REG_GetSequencerRanks\n
2841:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ5            LL_ADC_REG_GetSequencerRanks\n
2842:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ6            LL_ADC_REG_GetSequencerRanks\n
2843:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ7            LL_ADC_REG_GetSequencerRanks\n
2844:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   SQ8            LL_ADC_REG_GetSequencerRanks
2845:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2846:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2847:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
2848:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
2849:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
2850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
2851:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
2852:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
2853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
2854:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
2855:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2856:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2857:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2858:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2859:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2860:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2861:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2862:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2863:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2864:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2865:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2866:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2867:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2868:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2869:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2870:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2871:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
2872:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
2873:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
2874:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
2875:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT    (2)
ARM GAS  /tmp/ccPLPcMa.s 			page 70


2876:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR (2)
2877:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (2)
2878:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
2879:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
2880:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
2881:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().\n
2882:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (2) For ADC channel read back from ADC register,
2883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             comparison with internal channel parameter to be done
2884:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
2885:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2886:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
2887:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2888:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->CHSELR,
2889:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK))
2890:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)
2891:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                     ) << (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
2892:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                    );
2893:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2894:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2895:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on rank corresponding to
2897:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         channel number.
2898:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This function performs:
2899:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2900:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
2901:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2902:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Set channels selected by overwriting the current sequencer
2903:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           configuration.
2904:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2905:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
2906:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         are available, they can be chosen using
2907:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
2908:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This function can be used with setting "not fully configurable".
2909:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of functions @ref LL_ADC_REG_SetSequencerConfigurable()
2910:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and @ref LL_ADC_REG_SetSequencerLength().
2911:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2912:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2913:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2914:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2915:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
2916:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2917:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2918:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         for more details.
2919:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2920:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2921:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
2922:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2923:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         enabled separately.
2924:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2925:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2926:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
2927:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2928:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
2929:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   One or several values can be selected.
2930:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
2931:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_SetSequencerChannels\n
2932:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_SetSequencerChannels\n
ARM GAS  /tmp/ccPLPcMa.s 			page 71


2933:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_SetSequencerChannels\n
2934:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_SetSequencerChannels\n
2935:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_SetSequencerChannels\n
2936:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_SetSequencerChannels\n
2937:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_SetSequencerChannels\n
2938:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_SetSequencerChannels\n
2939:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_SetSequencerChannels\n
2940:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_SetSequencerChannels\n
2941:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_SetSequencerChannels\n
2942:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_SetSequencerChannels\n
2943:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_SetSequencerChannels\n
2944:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_SetSequencerChannels\n
2945:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_SetSequencerChannels\n
2946:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_SetSequencerChannels\n
2947:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_SetSequencerChannels\n
2948:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_SetSequencerChannels\n
2949:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_SetSequencerChannels
2950:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
2951:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
2952:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2953:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2954:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2955:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2956:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2957:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2958:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2959:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2960:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2961:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2962:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2963:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2964:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2965:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2966:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2967:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
2968:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
2969:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
2970:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
2971:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
2972:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
2973:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
2974:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
2975:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
2976:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
2977:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
2978:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
2979:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
2980:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
2981:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
2982:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
2983:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2984:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
2985:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
2986:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
2987:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
2988:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Add channel to ADC group regular sequence: channel on rank corresponding to
2989:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         channel number.
ARM GAS  /tmp/ccPLPcMa.s 			page 72


2990:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This function performs:
2991:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2992:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
2993:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2994:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Set channels selected by adding them to the current sequencer
2995:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           configuration.
2996:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2997:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
2998:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         are available, they can be chosen using
2999:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
3000:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This function can be used with setting "not fully configurable".
3001:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of functions @ref LL_ADC_REG_SetSequencerConfigurable()
3002:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and @ref LL_ADC_REG_SetSequencerLength().
3003:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
3004:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
3005:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
3006:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
3007:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
3008:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
3009:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
3010:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         for more details.
3011:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
3012:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
3013:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
3014:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
3015:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         enabled separately.
3016:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
3017:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3018:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3019:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3020:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3021:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   One or several values can be selected.
3022:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
3023:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_SetSequencerChAdd\n
3024:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_SetSequencerChAdd\n
3025:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_SetSequencerChAdd\n
3026:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_SetSequencerChAdd\n
3027:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_SetSequencerChAdd\n
3028:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_SetSequencerChAdd\n
3029:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_SetSequencerChAdd\n
3030:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_SetSequencerChAdd\n
3031:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_SetSequencerChAdd\n
3032:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_SetSequencerChAdd\n
3033:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_SetSequencerChAdd\n
3034:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_SetSequencerChAdd\n
3035:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_SetSequencerChAdd\n
3036:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_SetSequencerChAdd\n
3037:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_SetSequencerChAdd\n
3038:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_SetSequencerChAdd\n
3039:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_SetSequencerChAdd\n
3040:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_SetSequencerChAdd\n
3041:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_SetSequencerChAdd
3042:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3043:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
3044:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3045:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
3046:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
ARM GAS  /tmp/ccPLPcMa.s 			page 73


3047:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
3048:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
3049:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
3050:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3051:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3052:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3053:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3054:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3055:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3056:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3057:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3058:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3059:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3060:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3061:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3062:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3063:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3064:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
3065:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3066:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
3067:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
3068:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
3069:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3070:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
3071:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3072:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
3073:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3074:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
3075:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
3076:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
3077:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3078:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3079:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3080:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Remove channel to ADC group regular sequence: channel on rank corresponding to
3081:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         channel number.
3082:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This function performs:
3083:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
3084:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
3085:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3086:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Set channels selected by removing them to the current sequencer
3087:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           configuration.
3088:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
3089:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
3090:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         are available, they can be chosen using
3091:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
3092:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This function can be used with setting "not fully configurable".
3093:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of functions @ref LL_ADC_REG_SetSequencerConfigurable()
3094:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and @ref LL_ADC_REG_SetSequencerLength().
3095:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
3096:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
3097:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
3098:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
3099:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
3100:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
3101:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
3102:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         for more details.
3103:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
ARM GAS  /tmp/ccPLPcMa.s 			page 74


3104:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
3105:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
3106:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
3107:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         enabled separately.
3108:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
3109:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3110:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3111:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3112:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3113:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   One or several values can be selected.
3114:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
3115:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_SetSequencerChRem\n
3116:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_SetSequencerChRem\n
3117:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_SetSequencerChRem\n
3118:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_SetSequencerChRem\n
3119:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_SetSequencerChRem\n
3120:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_SetSequencerChRem\n
3121:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_SetSequencerChRem\n
3122:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_SetSequencerChRem\n
3123:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_SetSequencerChRem\n
3124:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_SetSequencerChRem\n
3125:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_SetSequencerChRem\n
3126:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_SetSequencerChRem\n
3127:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_SetSequencerChRem\n
3128:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_SetSequencerChRem\n
3129:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_SetSequencerChRem\n
3130:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_SetSequencerChRem\n
3131:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_SetSequencerChRem\n
3132:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_SetSequencerChRem\n
3133:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_SetSequencerChRem
3134:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3135:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
3136:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3137:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
3138:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
3139:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
3140:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
3141:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
3142:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3143:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3144:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3145:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3146:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3147:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3148:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3149:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3150:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3151:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3152:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3153:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3154:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3155:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3156:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
3157:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3158:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
3159:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
3160:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
ARM GAS  /tmp/ccPLPcMa.s 			page 75


3161:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3162:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
3163:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3164:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
3165:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3166:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
3167:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
3168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
3169:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3170:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3171:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3172:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on rank corresponding to
3173:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         channel number.
3174:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This function performs:
3175:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Channels order reading into each rank of scan sequence:
3176:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
3177:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3178:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
3179:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
3180:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         are available, they can be chosen using
3181:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
3182:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This function can be used with setting "not fully configurable".
3183:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to description of functions @ref LL_ADC_REG_SetSequencerConfigurable()
3184:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and @ref LL_ADC_REG_SetSequencerLength().
3185:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
3186:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
3187:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
3188:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
3189:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         enabled separately.
3190:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
3191:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3192:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3193:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3194:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3195:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   One or several values can be retrieved.
3196:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
3197:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_GetSequencerChannels\n
3198:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_GetSequencerChannels\n
3199:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_GetSequencerChannels\n
3200:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_GetSequencerChannels\n
3201:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_GetSequencerChannels\n
3202:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_GetSequencerChannels\n
3203:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_GetSequencerChannels\n
3204:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_GetSequencerChannels\n
3205:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_GetSequencerChannels\n
3206:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_GetSequencerChannels\n
3207:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_GetSequencerChannels\n
3208:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_GetSequencerChannels\n
3209:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_GetSequencerChannels\n
3210:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_GetSequencerChannels\n
3211:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_GetSequencerChannels\n
3212:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_GetSequencerChannels\n
3213:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_GetSequencerChannels\n
3214:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_GetSequencerChannels\n
3215:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_GetSequencerChannels
3216:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3217:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
ARM GAS  /tmp/ccPLPcMa.s 			page 76


3218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3219:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
3220:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
3221:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
3222:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
3223:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
3224:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3225:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3226:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3227:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3228:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3229:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3230:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3231:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3232:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3233:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3234:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3235:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3236:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3237:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3238:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
3239:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3240:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
3241:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
3242:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
3243:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3244:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3245:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerChannels(ADC_TypeDef *ADCx)
3246:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3247:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t ChannelsBitfield = (uint32_t)READ_BIT(ADCx->CHSELR, ADC_CHSELR_CHSEL);
3248:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3249:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((((ChannelsBitfield & ADC_CHSELR_CHSEL0) >> ADC_CHSELR_CHSEL0_BITOFFSET_POS) * LL_ADC_CHA
3250:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL1) >> ADC_CHSELR_CHSEL1_BITOFFSET_POS) * LL_ADC_C
3251:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL2) >> ADC_CHSELR_CHSEL2_BITOFFSET_POS) * LL_ADC_C
3252:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL3) >> ADC_CHSELR_CHSEL3_BITOFFSET_POS) * LL_ADC_C
3253:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL4) >> ADC_CHSELR_CHSEL4_BITOFFSET_POS) * LL_ADC_C
3254:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL5) >> ADC_CHSELR_CHSEL5_BITOFFSET_POS) * LL_ADC_C
3255:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL6) >> ADC_CHSELR_CHSEL6_BITOFFSET_POS) * LL_ADC_C
3256:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL7) >> ADC_CHSELR_CHSEL7_BITOFFSET_POS) * LL_ADC_C
3257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL8) >> ADC_CHSELR_CHSEL8_BITOFFSET_POS) * LL_ADC_C
3258:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL9) >> ADC_CHSELR_CHSEL9_BITOFFSET_POS) * LL_ADC_C
3259:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL10) >> ADC_CHSELR_CHSEL10_BITOFFSET_POS) * LL_ADC
3260:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL11) >> ADC_CHSELR_CHSEL11_BITOFFSET_POS) * LL_ADC
3261:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL12) >> ADC_CHSELR_CHSEL12_BITOFFSET_POS) * LL_ADC
3262:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL13) >> ADC_CHSELR_CHSEL13_BITOFFSET_POS) * LL_ADC
3263:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL14) >> ADC_CHSELR_CHSEL14_BITOFFSET_POS) * LL_ADC
3264:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL15) >> ADC_CHSELR_CHSEL15_BITOFFSET_POS) * LL_ADC
3265:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL16) >> ADC_CHSELR_CHSEL16_BITOFFSET_POS) * LL_ADC
3266:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL17) >> ADC_CHSELR_CHSEL17_BITOFFSET_POS) * LL_ADC
3267:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #if defined(ADC_CCR_VBATEN)
3268:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (((ChannelsBitfield & ADC_CHSELR_CHSEL18) >> ADC_CHSELR_CHSEL18_BITOFFSET_POS) * LL_ADC
3269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** #endif
3270:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****          );
3271:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3272:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3273:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3274:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
ARM GAS  /tmp/ccPLPcMa.s 			page 77


3275:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
3276:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - single mode: one conversion per trigger
3277:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
3278:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           conversions launched successively automatically.
3279:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
3280:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
3281:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3282:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3283:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3284:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3285:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    CONT           LL_ADC_REG_SetContinuousMode
3286:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3287:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
3288:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
3289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
3290:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
3291:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3292:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
3293:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3294:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CONT, Continuous);
3295:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3296:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3297:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3298:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
3299:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
3300:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - single mode: one conversion per trigger
3301:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
3302:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           conversions launched successively automatically.
3303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    CONT           LL_ADC_REG_GetContinuousMode
3304:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3306:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
3307:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
3308:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3309:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
3310:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3311:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CONT));
3312:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3313:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3314:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3315:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
3316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
3317:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
3318:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         mode:
3319:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
3320:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           when number of DMA data transfers (number of
3321:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC conversions) is reached.
3322:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
3323:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
3324:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
3325:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC conversions).
3326:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
3327:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
3328:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         mode non-circular:
3329:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
3330:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
3331:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
ARM GAS  /tmp/ccPLPcMa.s 			page 78


3332:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
3333:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
3334:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3335:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3336:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3337:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3338:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    DMAEN          LL_ADC_REG_SetDMATransfer\n
3339:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    DMACFG         LL_ADC_REG_SetDMATransfer
3340:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3341:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
3342:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
3343:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
3344:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
3345:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
3346:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3347:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
3348:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3349:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
3350:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3351:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3352:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3353:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
3354:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
3355:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
3356:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         mode:
3357:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
3358:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           when number of DMA data transfers (number of
3359:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC conversions) is reached.
3360:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
3361:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
3362:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
3363:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC conversions).
3364:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
3365:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
3366:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         mode non-circular:
3367:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
3368:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
3369:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
3370:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
3371:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
3372:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    DMAEN          LL_ADC_REG_GetDMATransfer\n
3373:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    DMACFG         LL_ADC_REG_GetDMATransfer
3374:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3375:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3376:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
3377:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
3378:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
3379:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3380:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
3381:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
3383:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3384:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3385:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3386:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
3387:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         data preserved or overwritten.
3388:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
ARM GAS  /tmp/ccPLPcMa.s 			page 79


3389:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         other devices without this feature have a behavior
3390:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         equivalent to data overwritten.
3391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
3392:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
3393:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         overrun should be set to data overwritten.
3394:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3395:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3397:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    OVRMOD         LL_ADC_REG_SetOverrun
3399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3400:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
3401:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
3402:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
3403:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
3404:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3405:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
3406:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3407:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_OVRMOD, Overrun);
3408:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3409:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3410:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3411:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
3412:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         data preserved or overwritten.
3413:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    OVRMOD         LL_ADC_REG_GetOverrun
3414:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3415:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3416:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
3417:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
3418:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3419:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
3420:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3421:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_OVRMOD));
3422:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3423:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3424:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3425:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
3426:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3428:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
3429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
3430:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3431:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3432:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3433:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
3434:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Unit: ADC clock cycles.
3435:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
3436:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
3437:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
3438:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         converted:
3439:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
3440:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
3441:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         setting).
3442:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
3443:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TS_temp, ...).
3444:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
3445:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to reference manual for ADC processing time of
ARM GAS  /tmp/ccPLPcMa.s 			page 80


3446:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         this STM32 series.
3447:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
3448:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
3449:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is required.
3450:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet.
3451:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3452:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3453:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3454:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3455:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll SMPR     SMPSEL0        LL_ADC_SetChannelSamplingTime\n
3456:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL1        LL_ADC_SetChannelSamplingTime\n
3457:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL2        LL_ADC_SetChannelSamplingTime\n
3458:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL3        LL_ADC_SetChannelSamplingTime\n
3459:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL4        LL_ADC_SetChannelSamplingTime\n
3460:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL5        LL_ADC_SetChannelSamplingTime\n
3461:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL6        LL_ADC_SetChannelSamplingTime\n
3462:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL7        LL_ADC_SetChannelSamplingTime\n
3463:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL8        LL_ADC_SetChannelSamplingTime\n
3464:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL9        LL_ADC_SetChannelSamplingTime\n
3465:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL10       LL_ADC_SetChannelSamplingTime\n
3466:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL11       LL_ADC_SetChannelSamplingTime\n
3467:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL12       LL_ADC_SetChannelSamplingTime\n
3468:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL13       LL_ADC_SetChannelSamplingTime\n
3469:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL14       LL_ADC_SetChannelSamplingTime\n
3470:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL15       LL_ADC_SetChannelSamplingTime\n
3471:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL16       LL_ADC_SetChannelSamplingTime\n
3472:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL17       LL_ADC_SetChannelSamplingTime\n
3473:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL18       LL_ADC_SetChannelSamplingTime
3474:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3475:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
3476:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3477:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
3478:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
3479:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
3480:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
3481:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
3482:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3483:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3484:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3485:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3486:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3487:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3488:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3489:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3490:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3491:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3492:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3493:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3494:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3495:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3496:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
3497:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3498:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
3499:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
3500:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
3501:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3502:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  SamplingTimeY This parameter can be one of the following values:
ARM GAS  /tmp/ccPLPcMa.s 			page 81


3503:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
3504:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
3505:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
3506:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3507:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
3508:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3509:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
3510:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
3511:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->SMPR,
3512:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
3513:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MA
3514:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****             );
3515:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3516:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3517:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3518:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
3519:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Unit: ADC clock cycles.
3520:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
3521:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
3522:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
3523:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to reference manual for ADC processing time of
3524:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         this STM32 series.
3525:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll SMPR     SMPSEL0        LL_ADC_GetChannelSamplingTime\n
3526:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL1        LL_ADC_GetChannelSamplingTime\n
3527:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL2        LL_ADC_GetChannelSamplingTime\n
3528:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL3        LL_ADC_GetChannelSamplingTime\n
3529:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL4        LL_ADC_GetChannelSamplingTime\n
3530:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL5        LL_ADC_GetChannelSamplingTime\n
3531:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL6        LL_ADC_GetChannelSamplingTime\n
3532:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL7        LL_ADC_GetChannelSamplingTime\n
3533:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL8        LL_ADC_GetChannelSamplingTime\n
3534:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL9        LL_ADC_GetChannelSamplingTime\n
3535:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL10       LL_ADC_GetChannelSamplingTime\n
3536:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL11       LL_ADC_GetChannelSamplingTime\n
3537:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL12       LL_ADC_GetChannelSamplingTime\n
3538:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL13       LL_ADC_GetChannelSamplingTime\n
3539:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL14       LL_ADC_GetChannelSamplingTime\n
3540:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL15       LL_ADC_GetChannelSamplingTime\n
3541:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL16       LL_ADC_GetChannelSamplingTime\n
3542:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL17       LL_ADC_GetChannelSamplingTime\n
3543:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         SMPR     SMPSEL18       LL_ADC_GetChannelSamplingTime
3544:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3545:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3546:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3547:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
3548:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
3549:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
3550:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
3551:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
3552:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3553:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3554:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3555:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3556:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3557:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3558:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3559:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
ARM GAS  /tmp/ccPLPcMa.s 			page 82


3560:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3562:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3563:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3564:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3565:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3566:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
3567:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3568:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
3569:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On STM32G0, parameter can be set in ADC group sequencer
3570:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
3571:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3572:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3573:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
3574:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
3575:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3576:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
3577:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3578:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   __IO uint32_t smpr = READ_REG(ADCx->SMPR);
3579:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3580:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Retrieve sampling time bit corresponding to the selected channel            */
3581:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* and shift it to position 0.                                                 */
3582:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t smp_channel_posbit0 = ((smpr & ADC_SAMPLING_TIME_CH_MASK)
3583:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                   >> ((((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NU
3584:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                       0x1FUL));
3585:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3586:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Select sampling time bitfield depending on sampling time bit value 0 or 1.  */
3587:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((~(smp_channel_posbit0) * LL_ADC_SAMPLINGTIME_COMMON_1)
3588:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****           | (smp_channel_posbit0 * LL_ADC_SAMPLINGTIME_COMMON_2));
3589:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3590:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3591:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3592:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
3593:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3594:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3595:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
3596:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
3597:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3598:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3599:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3600:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
3601:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
3602:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on ADC group regular.
3603:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
3604:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is enabled.
3605:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
3606:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
3607:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
3608:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
3609:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         instance:
3610:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3611:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - groups monitored: ADC group regular.
3613:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3614:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC resolution configured).
3615:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
3616:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
ARM GAS  /tmp/ccPLPcMa.s 			page 83


3617:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
3618:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
3619:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             be selected. For example:
3620:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
3621:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
3622:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             groups regular and injected).
3623:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
3624:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
3625:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
3626:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3627:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC resolution configured).
3628:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3629:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3630:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3631:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3632:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
3633:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
3634:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
3635:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
3636:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
3637:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3638:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
3639:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
3640:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
3641:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
3642:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
3643:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
3644:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
3645:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG
3646:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG
3647:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG
3648:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG
3649:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG
3650:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG
3651:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG
3652:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG
3653:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG
3654:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG
3655:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
3656:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
3657:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
3658:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
3659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
3660:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
3661:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
3662:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
3663:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG
3664:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG
3665:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
3666:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
3667:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
3668:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
3670:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3671:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
3672:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
3673:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
ARM GAS  /tmp/ccPLPcMa.s 			page 84


3674:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
3675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   __IO uint32_t *preg;
3676:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   if (AWDy == LL_ADC_AWD1)
3678:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   {
3679:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
3680:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
3681:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   else
3682:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   {
3683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX
3684:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
3685:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(*preg,
3687:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
3688:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              AWDChannelGroup & AWDy);
3689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3690:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3691:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3692:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
3693:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3694:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3695:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3696:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3697:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3698:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3699:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3700:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           as parameter for another function.
3701:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3702:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           process the returned value with the helper macro
3703:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3704:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
3705:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           one channel.
3706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
3707:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         instance:
3708:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3709:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3710:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - groups monitored: ADC group regular.
3711:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3712:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC resolution configured).
3713:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
3714:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
3715:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
3716:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
3717:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             be selected. For example:
3718:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
3719:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
3720:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             groups regular and injected).
3721:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
3722:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
3723:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
3724:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3725:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC resolution configured).
3726:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3727:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3728:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3729:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3730:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR1    AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
ARM GAS  /tmp/ccPLPcMa.s 			page 85


3731:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
3732:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR1    AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
3733:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
3734:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
3735:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3736:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
3737:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
3738:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
3739:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
3740:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *
3741:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
3742:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
3743:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
3744:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             multiple channels are programmed simultaneously
3745:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             by bitfield.
3746:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3747:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
3748:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
3749:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG
3750:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG
3751:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG
3752:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG
3753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG
3754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG
3755:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG
3756:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG
3757:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG
3758:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG
3759:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
3760:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
3761:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
3762:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
3763:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
3764:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
3765:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
3766:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
3767:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG
3768:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3769:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
3770:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3771:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> A
3772:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_C
3773:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3774:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   uint32_t AnalogWDMonitChannels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK);
3775:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3776:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* If "AnalogWDMonitChannels" == 0, then the selected AWD is disabled       */
3777:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
3778:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
3779:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* or a single channel.                                                     */
3780:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   if (AnalogWDMonitChannels != 0UL)
3781:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   {
3782:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
3783:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     {
3784:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_CFGR1_AWD1SGL) == 0UL)
3785:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       {
3786:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         /* AWD monitoring a group of channels */
3787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         AnalogWDMonitChannels = ((AnalogWDMonitChannels
ARM GAS  /tmp/ccPLPcMa.s 			page 86


3788:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                   | (ADC_AWD_CR23_CHANNEL_MASK)
3789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                  )
3790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                  & (~(ADC_CFGR1_AWD1CH))
3791:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                 );
3792:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       }
3793:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       else
3794:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       {
3795:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         /* AWD monitoring a single channel */
3796:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
3797:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                  | (ADC_AWD2CR_AWD2CH_0 << (AnalogWDMonitChannels >> ADC_CFGR1_AWD1
3798:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                 );
3799:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       }
3800:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     }
3801:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     else
3802:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     {
3803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
3804:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       {
3805:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         /* AWD monitoring a group of channels */
3806:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         AnalogWDMonitChannels = (ADC_AWD_CR23_CHANNEL_MASK
3807:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                  | (ADC_CFGR1_AWD1EN)
3808:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                 );
3809:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       }
3810:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       else
3811:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       {
3812:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         /* AWD monitoring a single channel */
3813:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         /* AWD monitoring a group of channels */
3814:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
3815:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                  | (ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL)
3816:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                  | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDMonitChannels) << ADC_CF
3817:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                 );
3818:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****       }
3819:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****     }
3820:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
3821:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3822:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return AnalogWDMonitChannels;
3823:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3824:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3825:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3826:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
3827:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         high and low.
3828:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
3829:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
3830:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
3831:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
3832:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
3833:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
3834:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         instance:
3835:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3836:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3837:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - groups monitored: ADC group regular.
3838:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3839:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC resolution configured).
3840:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
3841:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
3842:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
3843:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
3844:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             be selected. For example:
ARM GAS  /tmp/ccPLPcMa.s 			page 87


3845:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
3846:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
3847:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             groups regular and injected).
3848:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
3849:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
3850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
3851:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3852:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC resolution configured).
3853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
3854:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
3855:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
3856:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
3857:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Examples:
3858:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3859:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           on 12 bits (ratio 16 and shift 4, or ratio 32 and shift 5, ...):
3860:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC analog watchdog thresholds must be divided by 16.
3861:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3862:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           on 14 bits (ratio 16 and shift 2, or ratio 32 and shift 3, ...):
3863:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC analog watchdog thresholds must be divided by 4.
3864:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3865:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           on 16 bits (ratio 16 and shift none, or ratio 32 and shift 1, ...):
3866:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC analog watchdog thresholds match directly to ADC data register.
3867:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3868:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3869:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3870:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
3871:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
3872:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
3873:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
3874:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
3875:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
3876:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
3877:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3878:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
3879:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
3880:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
3881:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
3882:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
3883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
3884:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
3885:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3886:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
3887:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                      uint32_t AWDThresholdLowValue)
3888:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3889:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
3890:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* position in register and register position depending on parameter        */
3891:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* "AWDy".                                                                  */
3892:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
3893:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
3894:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (
3895:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(*preg,
3897:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
3898:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
3899:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3900:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3901:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
ARM GAS  /tmp/ccPLPcMa.s 			page 88


3902:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
3903:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         high or low.
3904:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   If values of both thresholds high or low must be set,
3905:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         use function @ref LL_ADC_ConfigAnalogWDThresholds().
3906:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
3907:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
3908:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
3909:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
3910:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         instance:
3911:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3912:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3913:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - groups monitored: ADC group regular.
3914:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3915:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC resolution configured).
3916:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
3917:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
3918:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
3919:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
3920:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             be selected. For example:
3921:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
3922:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
3923:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             groups regular and injected).
3924:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
3925:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
3926:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
3927:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3928:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *             ADC resolution configured).
3929:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
3930:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
3931:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
3932:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
3933:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Examples:
3934:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3935:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           on 12 bits (ratio 16 and shift 4, or ratio 32 and shift 5, ...):
3936:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC analog watchdog thresholds must be divided by 16.
3937:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3938:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           on 14 bits (ratio 16 and shift 2, or ratio 32 and shift 3, ...):
3939:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC analog watchdog thresholds must be divided by 4.
3940:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3941:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           on 16 bits (ratio 16 and shift none, or ratio 32 and shift 1, ...):
3942:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           ADC analog watchdog thresholds match directly to ADC data register.
3943:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is not conditioned to
3944:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
3945:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC can be disabled, enabled with or without conversion on going
3946:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on ADC group regular.
3947:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
3948:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
3949:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
3950:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
3951:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
3952:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
3953:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3954:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
3955:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
3956:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
3957:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
3958:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
ARM GAS  /tmp/ccPLPcMa.s 			page 89


3959:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
3960:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
3961:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
3962:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
3963:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
3964:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
3965:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                   uint32_t AWDThresholdValue)
3966:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
3967:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
3968:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
3969:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
3970:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
3971:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
3972:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
3973:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX
3974:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                              + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGO
3975:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3976:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(*preg,
3977:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              AWDThresholdsHighLow,
3978:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TR
3979:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
3980:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
3981:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
3982:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
3983:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
3984:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         concatenated.
3985:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   If raw data with ADC thresholds high and low is retrieved,
3986:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         the data of each threshold high or low can be isolated
3987:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         using helper macro:
3988:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW().
3989:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
3990:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
3991:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
3992:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
3993:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
3994:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
3995:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
3996:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
3997:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
3998:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
3999:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
4000:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
4001:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
4002:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
4003:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
4004:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
4005:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
4006:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLDS_HIGH_LOW
4007:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
4008:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4009:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
4010:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4011:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
4012:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
4013:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
4014:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
4015:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
ARM GAS  /tmp/ccPLPcMa.s 			page 90


4016:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
4017:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                    (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_A
4018:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                    + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CR
4019:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4020:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
4021:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                              (AWDThresholdsHighLow | ADC_TR1_LT1))
4022:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                     >> (((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_BIT_HIGH
4023:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                         & ~(AWDThresholdsHighLow & ADC_TR1_LT1)));
4024:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4025:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4026:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4027:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
4028:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4029:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4030:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
4031:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
4032:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4033:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4034:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4035:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC oversampling scope.
4036:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4037:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4038:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled.
4039:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    OVSE           LL_ADC_SetOverSamplingScope
4040:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4041:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
4042:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
4043:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
4044:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4045:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4046:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
4047:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4048:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
4049:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4050:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4051:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4052:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC oversampling scope.
4053:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    OVSE           LL_ADC_GetOverSamplingScope
4054:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4055:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4056:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
4057:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
4058:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4059:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
4060:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4061:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSE));
4062:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4063:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4064:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4065:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
4066:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on the selected ADC group.
4067:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
4068:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
4069:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           are done from 1 trigger)
4070:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
4071:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           needs a trigger)
4072:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
ARM GAS  /tmp/ccPLPcMa.s 			page 91


4073:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4074:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4075:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
4076:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    TOVS           LL_ADC_SetOverSamplingDiscont
4077:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4078:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
4079:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
4080:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
4081:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4082:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4083:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
4084:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4085:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TOVS, OverSamplingDiscont);
4086:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4087:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4088:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4089:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
4090:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on the selected ADC group.
4091:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
4092:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
4093:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           are done from 1 trigger)
4094:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
4095:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           needs a trigger)
4096:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    TOVS           LL_ADC_GetOverSamplingDiscont
4097:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4098:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4099:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
4100:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
4101:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4102:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
4103:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4104:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TOVS));
4105:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4106:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4107:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4108:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Set ADC oversampling
4109:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
4110:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - ratio
4111:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - shift
4112:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4113:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4114:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be disabled.
4115:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
4116:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
4117:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4118:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Ratio This parameter can be one of the following values:
4119:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
4120:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
4121:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
4122:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
4123:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
4124:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
4125:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
4126:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
4127:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
4128:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
4129:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
ARM GAS  /tmp/ccPLPcMa.s 			page 92


4130:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
4131:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
4132:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
4133:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
4134:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
4135:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
4136:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
4137:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4138:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4139:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
4140:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4141:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
4142:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4143:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4144:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4145:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
4146:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
4147:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4148:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Ratio This parameter can be one of the following values:
4149:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
4150:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
4151:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
4152:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
4153:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
4154:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
4155:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
4156:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
4157:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4158:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
4159:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4160:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR));
4161:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4162:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4163:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4164:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC oversampling shift
4165:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
4166:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4167:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
4168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
4169:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
4170:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
4171:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
4172:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
4173:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
4174:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
4175:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
4176:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
4177:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4178:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
4179:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4180:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
4181:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4182:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4183:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4184:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
4185:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4186:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 93


4187:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
4188:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
4189:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4190:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4191:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4192:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
4193:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, there are three possibilities to enable
4194:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         the voltage regulator:
4195:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - by enabling it manually
4196:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           using function @ref LL_ADC_EnableInternalRegulator().
4197:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - by launching a calibration
4198:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           using function @ref LL_ADC_StartCalibration().
4199:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - by enabling the ADC
4200:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           using function @ref LL_ADC_Enable().
4201:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after ADC internal voltage regulator enable,
4202:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
4203:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
4204:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet, parameter "tADCVREG_STUP".
4205:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
4206:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4207:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4208:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be ADC disabled.
4209:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
4210:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4211:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4212:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4213:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
4214:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4215:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4216:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4217:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4219:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4220:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_ADVREGEN);
4221:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4222:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4223:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4224:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
4225:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4226:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4227:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be ADC disabled.
4228:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
4229:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4230:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4231:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4232:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
4233:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4234:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
4235:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4236:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4237:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4238:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
4239:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
4240:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4241:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
4242:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4243:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccPLPcMa.s 			page 94


 119              		.loc 2 4243 26 is_stmt 1 view .LVU38
 120              	.LBB130:
4244:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4245:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 121              		.loc 2 4245 3 view .LVU39
 122              		.loc 2 4245 12 is_stmt 0 view .LVU40
 123 0018 9A68     		ldr	r2, [r3, #8]
 124              		.loc 2 4245 76 view .LVU41
 125 001a D200     		lsls	r2, r2, #3
 126 001c 1BD4     		bmi	.L5
 127              	.LVL5:
 128              		.loc 2 4245 76 view .LVU42
 129              	.LBE130:
 130              	.LBE129:
 471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 131              		.loc 1 471 5 is_stmt 1 view .LVU43
 132              	.LBB131:
 133              	.LBI131:
4213:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 134              		.loc 2 4213 22 view .LVU44
 135              	.LBB132:
4218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 136              		.loc 2 4218 3 view .LVU45
 137 001e 9A68     		ldr	r2, [r3, #8]
 138 0020 8E49     		ldr	r1, .L35
 139 0022 1140     		ands	r1, r2
 140 0024 8022     		movs	r2, #128
 141 0026 5205     		lsls	r2, r2, #21
 142 0028 0A43     		orrs	r2, r1
 143 002a 9A60     		str	r2, [r3, #8]
 144              	.LVL6:
4218:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 145              		.loc 2 4218 3 is_stmt 0 view .LVU46
 146              	.LBE132:
 147              	.LBE131:
 478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 148              		.loc 1 478 5 is_stmt 1 view .LVU47
 478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 149              		.loc 1 478 88 is_stmt 0 view .LVU48
 150 002c 8C4B     		ldr	r3, .L35+4
 151 002e 1868     		ldr	r0, [r3]
 152 0030 8C49     		ldr	r1, .L35+8
 153 0032 FFF7FEFF 		bl	__aeabi_uidiv
 154              	.LVL7:
 478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 155              		.loc 1 478 69 view .LVU49
 156 0036 4000     		lsls	r0, r0, #1
 478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 157              		.loc 1 478 21 view .LVU50
 158 0038 0190     		str	r0, [sp, #4]
 479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 159              		.loc 1 479 5 is_stmt 1 view .LVU51
 479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 160              		.loc 1 479 11 is_stmt 0 view .LVU52
 161 003a 09E0     		b	.L6
 162              	.LVL8:
 163              	.L29:
ARM GAS  /tmp/ccPLPcMa.s 			page 95


 458:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 164              		.loc 1 458 5 is_stmt 1 view .LVU53
 165 003c FFF7FEFF 		bl	HAL_ADC_MspInit
 166              	.LVL9:
 462:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 167              		.loc 1 462 5 view .LVU54
 168 0040 0023     		movs	r3, #0
 169 0042 E365     		str	r3, [r4, #92]
 465:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 170              		.loc 1 465 5 view .LVU55
 465:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 171              		.loc 1 465 16 is_stmt 0 view .LVU56
 172 0044 5422     		movs	r2, #84
 173 0046 A354     		strb	r3, [r4, r2]
 174 0048 E5E7     		b	.L4
 175              	.L7:
 481:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 176              		.loc 1 481 7 is_stmt 1 view .LVU57
 481:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 177              		.loc 1 481 22 is_stmt 0 view .LVU58
 178 004a 019B     		ldr	r3, [sp, #4]
 179 004c 013B     		subs	r3, r3, #1
 180 004e 0193     		str	r3, [sp, #4]
 181              	.L6:
 479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 182              		.loc 1 479 11 is_stmt 1 view .LVU59
 479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 183              		.loc 1 479 28 is_stmt 0 view .LVU60
 184 0050 019B     		ldr	r3, [sp, #4]
 479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 185              		.loc 1 479 11 view .LVU61
 186 0052 002B     		cmp	r3, #0
 187 0054 F9D1     		bne	.L7
 188              	.L5:
 488:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 189              		.loc 1 488 3 is_stmt 1 view .LVU62
 488:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 190              		.loc 1 488 7 is_stmt 0 view .LVU63
 191 0056 2368     		ldr	r3, [r4]
 192              	.LVL10:
 193              	.LBB133:
 194              	.LBI133:
4243:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 195              		.loc 2 4243 26 is_stmt 1 view .LVU64
 196              	.LBB134:
 197              		.loc 2 4245 3 view .LVU65
 198              		.loc 2 4245 12 is_stmt 0 view .LVU66
 199 0058 9A68     		ldr	r2, [r3, #8]
 200              		.loc 2 4245 76 view .LVU67
 201 005a D200     		lsls	r2, r2, #3
 202 005c 09D4     		bmi	.L26
 203              	.LVL11:
 204              		.loc 2 4245 76 view .LVU68
 205              	.LBE134:
 206              	.LBE133:
 491:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 207              		.loc 1 491 5 is_stmt 1 view .LVU69
ARM GAS  /tmp/ccPLPcMa.s 			page 96


 208 005e A26D     		ldr	r2, [r4, #88]
 209 0060 1021     		movs	r1, #16
 210 0062 0A43     		orrs	r2, r1
 211 0064 A265     		str	r2, [r4, #88]
 494:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 212              		.loc 1 494 5 view .LVU70
 213 0066 E26D     		ldr	r2, [r4, #92]
 214 0068 0F39     		subs	r1, r1, #15
 215 006a 0A43     		orrs	r2, r1
 216 006c E265     		str	r2, [r4, #92]
 496:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 217              		.loc 1 496 5 view .LVU71
 218              	.LVL12:
 496:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 219              		.loc 1 496 20 is_stmt 0 view .LVU72
 220 006e 0120     		movs	r0, #1
 221 0070 00E0     		b	.L8
 222              	.LVL13:
 223              	.L26:
 389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0UL;
 224              		.loc 1 389 21 view .LVU73
 225 0072 0020     		movs	r0, #0
 226              	.LVL14:
 227              	.L8:
 503:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 228              		.loc 1 503 3 is_stmt 1 view .LVU74
 229              	.LBB135:
 230              	.LBI135:
4246:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4247:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4248:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4249:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
4250:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after ADC enable, a delay for
4251:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
4252:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC conversion start.
4253:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
4254:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
4255:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
4256:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
4257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4258:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4259:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
4260:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
4261:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4262:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4263:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4264:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
4265:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4266:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4267:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4268:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4270:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4271:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_ADEN);
4272:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4273:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4274:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
ARM GAS  /tmp/ccPLPcMa.s 			page 97


4275:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
4276:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4277:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4278:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
4279:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         on group regular.
4280:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
4281:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4282:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4283:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4284:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
4285:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4286:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4287:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4288:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4290:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4291:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_ADDIS);
4292:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4293:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4294:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4295:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
4296:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
4297:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
4298:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
4299:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
4300:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4301:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
4302:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
4304:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
4306:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4307:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4308:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4309:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
4310:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
4311:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4312:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
4313:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4314:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
4315:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
4317:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4318:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4319:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4320:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
4321:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
4322:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, a minimum number of ADC clock cycles
4323:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
4324:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
4325:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   In case of usage of ADC with DMA transfer:
4326:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         On this STM32 series, ADC DMA transfer request should be disabled
4327:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         during calibration:
4328:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Calibration factor is available in data register
4329:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         and also transferred by DMA.
4330:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         To not insert ADC calibration factor among ADC conversion data
4331:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         in array variable, DMA transfer must be disabled during
ARM GAS  /tmp/ccPLPcMa.s 			page 98


4332:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         calibration.
4333:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (DMA transfer setting backup and disable before calibration,
4334:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         DMA transfer setting restore after calibration.
4335:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Refer to functions @ref LL_ADC_REG_GetDMATransfer(),
4336:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetDMATransfer() ).
4337:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4338:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4339:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be ADC disabled.
4340:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
4341:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4342:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4343:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4344:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
4345:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4346:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4347:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4348:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4349:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4350:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4351:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_ADCAL);
4352:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4353:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4354:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4355:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC calibration state.
4356:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
4357:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4358:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
4359:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4360:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
4361:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4362:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
4363:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4364:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4365:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4366:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
4367:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4368:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4369:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
4370:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
4371:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4372:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4373:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4374:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
4375:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for both
4376:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
4377:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
4378:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           starts immediately.
4379:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
4380:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
4381:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *           following the ADC start conversion command.
4382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4383:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4384:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
4385:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
4386:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         without ADC disable command on going.
4387:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
4388:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccPLPcMa.s 			page 99


4389:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4390:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
4392:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4393:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4394:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4395:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4397:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_ADSTART);
4399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4400:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4401:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4402:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
4403:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4404:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC state:
4405:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
4406:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         without ADC disable command on going.
4407:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
4408:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4409:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4410:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4411:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
4412:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4413:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4414:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4415:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4416:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4417:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4418:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_ADSTP);
4419:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4420:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4421:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4422:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
4423:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
4424:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4425:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
4426:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
 231              		.loc 2 4427 26 view .LVU75
 232              	.LBB136:
4428:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 233              		.loc 2 4429 3 view .LVU76
 234              		.loc 2 4429 12 is_stmt 0 view .LVU77
 235 0074 9968     		ldr	r1, [r3, #8]
 236 0076 0425     		movs	r5, #4
 237 0078 2A00     		movs	r2, r5
 238 007a 0A40     		ands	r2, r1
 239              		.loc 2 4429 74 view .LVU78
 240 007c 0D42     		tst	r5, r1
 241 007e 00D0     		beq	.L9
 242 0080 0122     		movs	r2, #1
 243              	.L9:
 244              	.LVL15:
 245              		.loc 2 4429 74 view .LVU79
 246              	.LBE136:
ARM GAS  /tmp/ccPLPcMa.s 			page 100


 247              	.LBE135:
 505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 248              		.loc 1 505 3 is_stmt 1 view .LVU80
 505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 249              		.loc 1 505 13 is_stmt 0 view .LVU81
 250 0082 A16D     		ldr	r1, [r4, #88]
 505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 251              		.loc 1 505 6 view .LVU82
 252 0084 C906     		lsls	r1, r1, #27
 253 0086 00D5     		bpl	.LCB203
 254 0088 DEE0     		b	.L10	@long jump
 255              	.LCB203:
 506:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      )
 256              		.loc 1 506 7 view .LVU83
 257 008a 002A     		cmp	r2, #0
 258 008c 00D0     		beq	.LCB205
 259 008e DBE0     		b	.L10	@long jump
 260              	.LCB205:
 510:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 261              		.loc 1 510 5 is_stmt 1 view .LVU84
 262 0090 A16D     		ldr	r1, [r4, #88]
 263 0092 754D     		ldr	r5, .L35+12
 264 0094 2940     		ands	r1, r5
 265 0096 0635     		adds	r5, r5, #6
 266 0098 FF35     		adds	r5, r5, #255
 267 009a 2943     		orrs	r1, r5
 268 009c A165     		str	r1, [r4, #88]
 526:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 269              		.loc 1 526 5 view .LVU85
 270              	.LVL16:
 271              	.LBB137:
 272              	.LBI137:
4303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 273              		.loc 2 4303 26 view .LVU86
 274              	.LBB138:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 275              		.loc 2 4305 3 view .LVU87
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 276              		.loc 2 4305 12 is_stmt 0 view .LVU88
 277 009e 9968     		ldr	r1, [r3, #8]
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 278              		.loc 2 4305 68 view .LVU89
 279 00a0 C907     		lsls	r1, r1, #31
 280 00a2 33D4     		bmi	.L27
 281              	.LVL17:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 282              		.loc 2 4305 68 view .LVU90
 283              	.LBE138:
 284              	.LBE137:
 537:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_RES,
 285              		.loc 1 537 7 is_stmt 1 view .LVU91
 286 00a4 D968     		ldr	r1, [r3, #12]
 287 00a6 1635     		adds	r5, r5, #22
 288 00a8 A943     		bics	r1, r5
 289 00aa A568     		ldr	r5, [r4, #8]
 290 00ac 2943     		orrs	r1, r5
 291 00ae D960     		str	r1, [r3, #12]
ARM GAS  /tmp/ccPLPcMa.s 			page 101


 541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.Oversampling.Ratio         |
 292              		.loc 1 541 7 view .LVU92
 541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.Oversampling.Ratio         |
 293              		.loc 1 541 47 is_stmt 0 view .LVU93
 294 00b0 6368     		ldr	r3, [r4, #4]
 295 00b2 990F     		lsrs	r1, r3, #30
 296 00b4 8907     		lsls	r1, r1, #30
 541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.Oversampling.Ratio         |
 297              		.loc 1 541 67 view .LVU94
 298 00b6 236C     		ldr	r3, [r4, #64]
 299 00b8 1943     		orrs	r1, r3
 542:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.Oversampling.RightBitShift |
 300              		.loc 1 542 58 view .LVU95
 301 00ba 636C     		ldr	r3, [r4, #68]
 302 00bc 1943     		orrs	r1, r3
 543:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.Oversampling.TriggeredMode |
 303              		.loc 1 543 58 view .LVU96
 304 00be A36C     		ldr	r3, [r4, #72]
 305 00c0 1943     		orrs	r1, r3
 544:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.TriggerFrequencyMode
 306              		.loc 1 544 58 view .LVU97
 307 00c2 E36C     		ldr	r3, [r4, #76]
 308 00c4 1943     		orrs	r1, r3
 309              	.LVL18:
 548:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 310              		.loc 1 548 7 is_stmt 1 view .LVU98
 548:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 311              		.loc 1 548 21 is_stmt 0 view .LVU99
 312 00c6 3C23     		movs	r3, #60
 313 00c8 E35C     		ldrb	r3, [r4, r3]
 548:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 314              		.loc 1 548 10 view .LVU100
 315 00ca 012B     		cmp	r3, #1
 316 00cc 1CD0     		beq	.L30
 317              	.L12:
 553:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE |
 318              		.loc 1 553 7 is_stmt 1 view .LVU101
 319 00ce 2568     		ldr	r5, [r4]
 320 00d0 2B69     		ldr	r3, [r5, #16]
 321 00d2 664E     		ldr	r6, .L35+16
 322 00d4 3340     		ands	r3, r6
 323 00d6 0B43     		orrs	r3, r1
 324 00d8 2B61     		str	r3, [r5, #16]
 564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 325              		.loc 1 564 7 view .LVU102
 564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 326              		.loc 1 564 23 is_stmt 0 view .LVU103
 327 00da 6368     		ldr	r3, [r4, #4]
 564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 328              		.loc 1 564 10 view .LVU104
 329 00dc C025     		movs	r5, #192
 330 00de 2D06     		lsls	r5, r5, #24
 331 00e0 AB42     		cmp	r3, r5
 332 00e2 14D0     		beq	.L11
 564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 333              		.loc 1 564 69 discriminator 1 view .LVU105
 334 00e4 8025     		movs	r5, #128
ARM GAS  /tmp/ccPLPcMa.s 			page 102


 335 00e6 ED05     		lsls	r5, r5, #23
 336 00e8 AB42     		cmp	r3, r5
 337 00ea 10D0     		beq	.L11
 565:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 338              		.loc 1 565 69 view .LVU106
 339 00ec 8025     		movs	r5, #128
 340 00ee 2D06     		lsls	r5, r5, #24
 341 00f0 AB42     		cmp	r3, r5
 342 00f2 0CD0     		beq	.L11
 568:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CCR_PRESC,
 343              		.loc 1 568 9 is_stmt 1 view .LVU107
 344 00f4 5E4E     		ldr	r6, .L35+20
 345 00f6 3568     		ldr	r5, [r6]
 346 00f8 5E4F     		ldr	r7, .L35+24
 347 00fa 3D40     		ands	r5, r7
 348 00fc F027     		movs	r7, #240
 349 00fe BF03     		lsls	r7, r7, #14
 350 0100 3B40     		ands	r3, r7
 351 0102 2B43     		orrs	r3, r5
 352 0104 3360     		str	r3, [r6]
 353 0106 02E0     		b	.L11
 354              	.L30:
 550:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 355              		.loc 1 550 9 view .LVU108
 356 0108 1943     		orrs	r1, r3
 357              	.LVL19:
 550:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 358              		.loc 1 550 9 is_stmt 0 view .LVU109
 359 010a E0E7     		b	.L12
 360              	.LVL20:
 361              	.L27:
 391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
 362              		.loc 1 391 12 view .LVU110
 363 010c 1100     		movs	r1, r2
 364              	.LVL21:
 365              	.L11:
 586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 366              		.loc 1 586 5 is_stmt 1 view .LVU111
 586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 367              		.loc 1 586 18 is_stmt 0 view .LVU112
 368 010e 237E     		ldrb	r3, [r4, #24]
 369 0110 9B03     		lsls	r3, r3, #14
 587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 370              		.loc 1 587 18 view .LVU113
 371 0112 657E     		ldrb	r5, [r4, #25]
 372 0114 ED03     		lsls	r5, r5, #15
 586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 373              		.loc 1 586 81 view .LVU114
 374 0116 2B43     		orrs	r3, r5
 588:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 375              		.loc 1 588 18 view .LVU115
 376 0118 A67E     		ldrb	r6, [r4, #26]
 377 011a 7503     		lsls	r5, r6, #13
 587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 378              		.loc 1 587 81 view .LVU116
 379 011c 2B43     		orrs	r3, r5
 589:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  hadc->Init.DataAlign                                           |
ARM GAS  /tmp/ccPLPcMa.s 			page 103


 380              		.loc 1 589 18 view .LVU117
 381 011e 256B     		ldr	r5, [r4, #48]
 382 0120 002D     		cmp	r5, #0
 383 0122 01D0     		beq	.L13
 384 0124 8025     		movs	r5, #128
 385 0126 6D01     		lsls	r5, r5, #5
 386              	.L13:
 588:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 387              		.loc 1 588 81 view .LVU118
 388 0128 2B43     		orrs	r3, r5
 589:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  hadc->Init.DataAlign                                           |
 389              		.loc 1 589 81 view .LVU119
 390 012a E568     		ldr	r5, [r4, #12]
 391 012c 2B43     		orrs	r3, r5
 591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 392              		.loc 1 591 18 view .LVU120
 393 012e 2569     		ldr	r5, [r4, #16]
 394 0130 002D     		cmp	r5, #0
 395 0132 49DB     		blt	.L31
 396 0134 8025     		movs	r5, #128
 397 0136 AD03     		lsls	r5, r5, #14
 398              	.L14:
 590:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 399              		.loc 1 590 81 view .LVU121
 400 0138 2B43     		orrs	r3, r5
 592:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 401              		.loc 1 592 18 view .LVU122
 402 013a 2C25     		movs	r5, #44
 403 013c 655D     		ldrb	r5, [r4, r5]
 404 013e 6D00     		lsls	r5, r5, #1
 591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 405              		.loc 1 591 81 view .LVU123
 406 0140 2B43     		orrs	r3, r5
 407              	.LVL22:
 595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 408              		.loc 1 595 5 is_stmt 1 view .LVU124
 595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 409              		.loc 1 595 19 is_stmt 0 view .LVU125
 410 0142 2025     		movs	r5, #32
 411 0144 655D     		ldrb	r5, [r4, r5]
 595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 412              		.loc 1 595 8 view .LVU126
 413 0146 012D     		cmp	r5, #1
 414 0148 41D0     		beq	.L32
 415              	.L15:
 621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 416              		.loc 1 621 5 is_stmt 1 view .LVU127
 621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 417              		.loc 1 621 19 is_stmt 0 view .LVU128
 418 014a 656A     		ldr	r5, [r4, #36]
 621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 419              		.loc 1 621 8 view .LVU129
 420 014c 002D     		cmp	r5, #0
 421 014e 05D0     		beq	.L17
 623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.ExternalTrigConvEdge);
 422              		.loc 1 623 7 is_stmt 1 view .LVU130
 623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.ExternalTrigConvEdge);
ARM GAS  /tmp/ccPLPcMa.s 			page 104


 423              		.loc 1 623 49 is_stmt 0 view .LVU131
 424 0150 E026     		movs	r6, #224
 425 0152 7600     		lsls	r6, r6, #1
 426 0154 3540     		ands	r5, r6
 623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.ExternalTrigConvEdge);
 427              		.loc 1 623 69 view .LVU132
 428 0156 A66A     		ldr	r6, [r4, #40]
 429 0158 3543     		orrs	r5, r6
 623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    hadc->Init.ExternalTrigConvEdge);
 430              		.loc 1 623 16 view .LVU133
 431 015a 2B43     		orrs	r3, r5
 432              	.LVL23:
 433              	.L17:
 628:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR1_DISCEN  |
 434              		.loc 1 628 5 is_stmt 1 view .LVU134
 435 015c 2668     		ldr	r6, [r4]
 436 015e F568     		ldr	r5, [r6, #12]
 437 0160 454F     		ldr	r7, .L35+28
 438 0162 3D40     		ands	r5, r7
 439 0164 1D43     		orrs	r5, r3
 440 0166 F560     		str	r5, [r6, #12]
 641:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR2_LFTRIG |
 441              		.loc 1 641 5 view .LVU135
 442 0168 2668     		ldr	r6, [r4]
 443 016a 3569     		ldr	r5, [r6, #16]
 444 016c 434F     		ldr	r7, .L35+32
 445 016e 3D40     		ands	r5, r7
 446 0170 2943     		orrs	r1, r5
 447              	.LVL24:
 641:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                ADC_CFGR2_LFTRIG |
 448              		.loc 1 641 5 is_stmt 0 view .LVU136
 449 0172 3161     		str	r1, [r6, #16]
 650:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.S
 450              		.loc 1 650 5 is_stmt 1 view .LVU137
 451 0174 2568     		ldr	r5, [r4]
 452              	.LVL25:
 453              	.LBB139:
 454              	.LBI139:
2254:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                           uint32_t SamplingTime)
 455              		.loc 2 2254 22 view .LVU138
 456              	.LBB140:
2257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
 457              		.loc 2 2257 3 view .LVU139
 458 0176 6969     		ldr	r1, [r5, #20]
 459 0178 0726     		movs	r6, #7
 460 017a B143     		bics	r1, r6
 461 017c 666B     		ldr	r6, [r4, #52]
 462 017e 3143     		orrs	r1, r6
 463 0180 6961     		str	r1, [r5, #20]
 464              	.LVL26:
2257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
 465              		.loc 2 2257 3 is_stmt 0 view .LVU140
 466              	.LBE140:
 467              	.LBE139:
 651:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 468              		.loc 1 651 5 is_stmt 1 view .LVU141
 469 0182 2668     		ldr	r6, [r4]
ARM GAS  /tmp/ccPLPcMa.s 			page 105


 470              	.LVL27:
 471              	.LBB141:
 472              	.LBI141:
2254:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                           uint32_t SamplingTime)
 473              		.loc 2 2254 22 view .LVU142
 474              	.LBB142:
2257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
 475              		.loc 2 2257 3 view .LVU143
 476 0184 7169     		ldr	r1, [r6, #20]
 477 0186 7025     		movs	r5, #112
 478 0188 A943     		bics	r1, r5
 479 018a A56B     		ldr	r5, [r4, #56]
 480 018c 2D01     		lsls	r5, r5, #4
 481 018e 2943     		orrs	r1, r5
 482 0190 7161     		str	r1, [r6, #20]
 483              	.LVL28:
2257:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
 484              		.loc 2 2257 3 is_stmt 0 view .LVU144
 485              	.LBE142:
 486              	.LBE141:
 663:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 487              		.loc 1 663 5 is_stmt 1 view .LVU145
 663:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 488              		.loc 1 663 19 is_stmt 0 view .LVU146
 489 0192 2169     		ldr	r1, [r4, #16]
 663:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 490              		.loc 1 663 8 view .LVU147
 491 0194 0029     		cmp	r1, #0
 492 0196 29D1     		bne	.L18
 667:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               ADC_CHSELR_SQ2_TO_SQ8);
 493              		.loc 1 667 7 is_stmt 1 view .LVU148
 494 0198 2168     		ldr	r1, [r4]
 495 019a 8D6A     		ldr	r5, [r1, #40]
 496 019c 1022     		movs	r2, #16
 497              	.LVL29:
 667:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****               ADC_CHSELR_SQ2_TO_SQ8);
 498              		.loc 1 667 7 is_stmt 0 view .LVU149
 499 019e 5242     		rsbs	r2, r2, #0
 500 01a0 2A43     		orrs	r2, r5
 501 01a2 8A62     		str	r2, [r1, #40]
 502              	.L19:
 717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         == tmpCFGR1)
 503              		.loc 1 717 5 is_stmt 1 view .LVU150
 717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         == tmpCFGR1)
 504              		.loc 1 717 14 is_stmt 0 view .LVU151
 505 01a4 2268     		ldr	r2, [r4]
 717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         == tmpCFGR1)
 506              		.loc 1 717 24 view .LVU152
 507 01a6 D268     		ldr	r2, [r2, #12]
 717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         == tmpCFGR1)
 508              		.loc 1 717 32 view .LVU153
 509 01a8 3549     		ldr	r1, .L35+36
 510 01aa 0A40     		ands	r2, r1
 717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         == tmpCFGR1)
 511              		.loc 1 717 8 view .LVU154
 512 01ac 9A42     		cmp	r2, r3
 513 01ae 42D0     		beq	.L33
ARM GAS  /tmp/ccPLPcMa.s 			page 106


 731:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 514              		.loc 1 731 7 is_stmt 1 view .LVU155
 515 01b0 A36D     		ldr	r3, [r4, #88]
 516              	.LVL30:
 731:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 517              		.loc 1 731 7 is_stmt 0 view .LVU156
 518 01b2 1222     		movs	r2, #18
 519 01b4 9343     		bics	r3, r2
 520 01b6 023A     		subs	r2, r2, #2
 521 01b8 1343     		orrs	r3, r2
 522 01ba A365     		str	r3, [r4, #88]
 736:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 523              		.loc 1 736 7 is_stmt 1 view .LVU157
 524 01bc E36D     		ldr	r3, [r4, #92]
 525 01be 0F3A     		subs	r2, r2, #15
 526 01c0 1343     		orrs	r3, r2
 527 01c2 E365     		str	r3, [r4, #92]
 738:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 528              		.loc 1 738 7 view .LVU158
 529              	.LVL31:
 738:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 530              		.loc 1 738 22 is_stmt 0 view .LVU159
 531 01c4 0120     		movs	r0, #1
 532 01c6 44E0     		b	.L3
 533              	.LVL32:
 534              	.L31:
 591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 535              		.loc 1 591 18 discriminator 1 view .LVU160
 536 01c8 6D00     		lsls	r5, r5, #1
 537 01ca 6D08     		lsrs	r5, r5, #1
 538 01cc B4E7     		b	.L14
 539              	.LVL33:
 540              	.L32:
 597:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 541              		.loc 1 597 7 is_stmt 1 view .LVU161
 597:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 542              		.loc 1 597 10 is_stmt 0 view .LVU162
 543 01ce 002E     		cmp	r6, #0
 544 01d0 03D1     		bne	.L16
 600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 545              		.loc 1 600 9 is_stmt 1 view .LVU163
 600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 546              		.loc 1 600 18 is_stmt 0 view .LVU164
 547 01d2 8025     		movs	r5, #128
 548 01d4 6D02     		lsls	r5, r5, #9
 549 01d6 2B43     		orrs	r3, r5
 550              	.LVL34:
 600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 551              		.loc 1 600 18 view .LVU165
 552 01d8 B7E7     		b	.L15
 553              	.L16:
 609:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 554              		.loc 1 609 9 is_stmt 1 view .LVU166
 555 01da A56D     		ldr	r5, [r4, #88]
 556 01dc 2026     		movs	r6, #32
 557 01de 3543     		orrs	r5, r6
 558 01e0 A565     		str	r5, [r4, #88]
ARM GAS  /tmp/ccPLPcMa.s 			page 107


 612:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 559              		.loc 1 612 9 view .LVU167
 560 01e2 E56D     		ldr	r5, [r4, #92]
 561 01e4 1F3E     		subs	r6, r6, #31
 562 01e6 3543     		orrs	r5, r6
 563 01e8 E565     		str	r5, [r4, #92]
 564 01ea AEE7     		b	.L15
 565              	.LVL35:
 566              	.L18:
 670:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 567              		.loc 1 670 10 view .LVU168
 670:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 568              		.loc 1 670 13 is_stmt 0 view .LVU169
 569 01ec 8025     		movs	r5, #128
 570 01ee AD03     		lsls	r5, r5, #14
 571 01f0 A942     		cmp	r1, r5
 572 01f2 D7D1     		bne	.L19
 573              	.LVL36:
 574              	.L20:
 575              	.LBB143:
 676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 576              		.loc 1 676 54 is_stmt 1 discriminator 1 view .LVU170
 676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 577              		.loc 1 676 7 is_stmt 0 discriminator 1 view .LVU171
 578 01f4 072A     		cmp	r2, #7
 579 01f6 08D8     		bhi	.L21
 679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ADC_CHSELR_SQ1)
 580              		.loc 1 679 9 is_stmt 1 view .LVU172
 679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ADC_CHSELR_SQ1)
 581              		.loc 1 679 90 is_stmt 0 view .LVU173
 582 01f8 9100     		lsls	r1, r2, #2
 679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ADC_CHSELR_SQ1)
 583              		.loc 1 679 51 view .LVU174
 584 01fa 256E     		ldr	r5, [r4, #96]
 585 01fc CD40     		lsrs	r5, r5, r1
 679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ADC_CHSELR_SQ1)
 586              		.loc 1 679 98 view .LVU175
 587 01fe 0F21     		movs	r1, #15
 588 0200 2940     		ands	r1, r5
 679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ADC_CHSELR_SQ1)
 589              		.loc 1 679 12 view .LVU176
 590 0202 0F29     		cmp	r1, #15
 591 0204 01D0     		beq	.L21
 676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 592              		.loc 1 676 98 is_stmt 1 discriminator 2 view .LVU177
 676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 593              		.loc 1 676 132 is_stmt 0 discriminator 2 view .LVU178
 594 0206 0132     		adds	r2, r2, #1
 595              	.LVL37:
 676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 596              		.loc 1 676 132 discriminator 2 view .LVU179
 597 0208 F4E7     		b	.L20
 598              	.L21:
 686:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 599              		.loc 1 686 7 is_stmt 1 view .LVU180
 686:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 600              		.loc 1 686 10 is_stmt 0 view .LVU181
ARM GAS  /tmp/ccPLPcMa.s 			page 108


 601 020a 012A     		cmp	r2, #1
 602 020c 0DD0     		beq	.L34
 705:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ_ALL,
 603              		.loc 1 705 9 is_stmt 1 view .LVU182
 604 020e 2568     		ldr	r5, [r4]
 605 0210 AA6A     		ldr	r2, [r5, #40]
 606              	.LVL38:
 705:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ_ALL,
 607              		.loc 1 705 9 is_stmt 0 view .LVU183
 608 0212 E269     		ldr	r2, [r4, #28]
 609 0214 013A     		subs	r2, r2, #1
 610 0216 9200     		lsls	r2, r2, #2
 611 0218 1C21     		movs	r1, #28
 612 021a 1140     		ands	r1, r2
 613 021c 1022     		movs	r2, #16
 614 021e 5242     		rsbs	r2, r2, #0
 615 0220 8A40     		lsls	r2, r2, r1
 616 0222 216E     		ldr	r1, [r4, #96]
 617 0224 0A43     		orrs	r2, r1
 618 0226 AA62     		str	r2, [r5, #40]
 619 0228 BCE7     		b	.L19
 620              	.LVL39:
 621              	.L34:
 691:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 ADC_CHSELR_SQ2_TO_SQ8);
 622              		.loc 1 691 9 is_stmt 1 view .LVU184
 623 022a 2168     		ldr	r1, [r4]
 624 022c 8D6A     		ldr	r5, [r1, #40]
 625 022e 113A     		subs	r2, r2, #17
 626              	.LVL40:
 691:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 ADC_CHSELR_SQ2_TO_SQ8);
 627              		.loc 1 691 9 is_stmt 0 view .LVU185
 628 0230 2A43     		orrs	r2, r5
 629              	.LVL41:
 691:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 ADC_CHSELR_SQ2_TO_SQ8);
 630              		.loc 1 691 9 view .LVU186
 631 0232 8A62     		str	r2, [r1, #40]
 632 0234 B6E7     		b	.L19
 633              	.L33:
 691:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                 ADC_CHSELR_SQ2_TO_SQ8);
 634              		.loc 1 691 9 view .LVU187
 635              	.LBE143:
 721:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 636              		.loc 1 721 7 is_stmt 1 view .LVU188
 637 0236 0023     		movs	r3, #0
 638              	.LVL42:
 721:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 639              		.loc 1 721 7 is_stmt 0 view .LVU189
 640 0238 E365     		str	r3, [r4, #92]
 724:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 641              		.loc 1 724 7 is_stmt 1 view .LVU190
 642 023a A36D     		ldr	r3, [r4, #88]
 643 023c 0322     		movs	r2, #3
 644 023e 9343     		bics	r3, r2
 645 0240 023A     		subs	r2, r2, #2
 646 0242 1343     		orrs	r3, r2
 647 0244 A365     		str	r3, [r4, #88]
 648 0246 04E0     		b	.L3
ARM GAS  /tmp/ccPLPcMa.s 			page 109


 649              	.LVL43:
 650              	.L10:
 745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 651              		.loc 1 745 5 view .LVU191
 652 0248 A36D     		ldr	r3, [r4, #88]
 653 024a 1022     		movs	r2, #16
 654              	.LVL44:
 745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 655              		.loc 1 745 5 is_stmt 0 view .LVU192
 656 024c 1343     		orrs	r3, r2
 657 024e A365     		str	r3, [r4, #88]
 747:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 658              		.loc 1 747 5 is_stmt 1 view .LVU193
 659              	.LVL45:
 747:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 660              		.loc 1 747 20 is_stmt 0 view .LVU194
 661 0250 0120     		movs	r0, #1
 662              	.LVL46:
 663              	.L3:
 752:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 664              		.loc 1 752 1 view .LVU195
 665 0252 03B0     		add	sp, sp, #12
 666              		@ sp needed
 667              	.LVL47:
 752:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 668              		.loc 1 752 1 view .LVU196
 669 0254 F0BD     		pop	{r4, r5, r6, r7, pc}
 670              	.LVL48:
 671              	.L25:
 398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 672              		.loc 1 398 12 view .LVU197
 673 0256 0120     		movs	r0, #1
 674              	.LVL49:
 398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 675              		.loc 1 398 12 view .LVU198
 676 0258 FBE7     		b	.L3
 677              	.L36:
 678 025a C046     		.align	2
 679              	.L35:
 680 025c E8FFFF6F 		.word	1879048168
 681 0260 00000000 		.word	SystemCoreClock
 682 0264 400D0300 		.word	200000
 683 0268 FDFEFFFF 		.word	-259
 684 026c 02FCFF1F 		.word	536869890
 685 0270 08270140 		.word	1073817352
 686 0274 FFFFC3FF 		.word	-3932161
 687 0278 1902FEFF 		.word	-130535
 688 027c 02FCFFDF 		.word	-536871934
 689 0280 E7FF3F83 		.word	-2092957721
 690              		.cfi_endproc
 691              	.LFE452:
 693              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 694              		.align	1
 695              		.weak	HAL_ADC_MspDeInit
 696              		.syntax unified
 697              		.code	16
 698              		.thumb_func
ARM GAS  /tmp/ccPLPcMa.s 			page 110


 699              		.fpu softvfp
 701              	HAL_ADC_MspDeInit:
 702              	.LVL50:
 703              	.LFB455:
 909:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 910:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
 911:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
 912:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
 913:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   All ADC instances use the same core clock at RCC level, disabling
 914:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         the core clock reset all ADC instances).
 915:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
 916:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 917:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
 918:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 704              		.loc 1 918 1 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 919:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 920:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   UNUSED(hadc);
 709              		.loc 1 920 3 view .LVU200
 921:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 922:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 923:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 924:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****    */
 925:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 710              		.loc 1 925 1 is_stmt 0 view .LVU201
 711              		@ sp needed
 712 0000 7047     		bx	lr
 713              		.cfi_endproc
 714              	.LFE455:
 716              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 717              		.align	1
 718              		.global	HAL_ADC_PollForConversion
 719              		.syntax unified
 720              		.code	16
 721              		.thumb_func
 722              		.fpu softvfp
 724              	HAL_ADC_PollForConversion:
 725              	.LVL51:
 726              	.LFB458:
 926:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 927:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 928:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
 929:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 930:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 931:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 932:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 933:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 934:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         This parameter can be one of the following values:
 935:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 936:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
 937:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 938:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 939:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
 940:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
ARM GAS  /tmp/ccPLPcMa.s 			page 111


 941:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
 942:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 943:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 944:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 945:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 946:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 947:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
 948:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
 949:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 950:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                            pADC_CallbackTypeDef pCallback)
 951:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 952:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 953:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 954:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (pCallback == NULL)
 955:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 956:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update the error code */
 957:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 958:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 959:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     return HAL_ERROR;
 960:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 961:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 962:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 963:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 964:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     switch (CallbackID)
 965:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 966:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 967:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 968:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
 969:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 970:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 971:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 972:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
 973:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 974:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 975:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 976:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
 977:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 978:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 979:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 980:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
 981:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 982:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
 983:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = pCallback;
 984:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
 985:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 986:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
 987:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = pCallback;
 988:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
 989:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 990:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
 991:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->EndOfSamplingCallback = pCallback;
 992:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
 993:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 994:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 995:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 996:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
 997:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 112


 998:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 999:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1000:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1001:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1002:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       default :
1003:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update the error code */
1004:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1005:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1006:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Return error status */
1007:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         status = HAL_ERROR;
1008:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1009:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1010:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1011:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1012:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1013:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     switch (CallbackID)
1014:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1015:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1016:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1017:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1018:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1019:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1020:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1021:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1022:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1023:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       default :
1024:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update the error code */
1025:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1026:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1027:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Return error status */
1028:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         status = HAL_ERROR;
1029:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1030:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1031:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1032:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
1033:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1034:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update the error code */
1035:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1036:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1037:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Return error status */
1038:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     status =  HAL_ERROR;
1039:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1040:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1041:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return status;
1042:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
1043:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1044:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1045:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
1046:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
1047:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1048:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *                the configuration information for the specified ADC.
1049:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
1050:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         This parameter can be one of the following values:
1051:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1052:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1053:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1054:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
ARM GAS  /tmp/ccPLPcMa.s 			page 113


1055:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1056:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1057:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1058:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1059:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1060:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
1061:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
1062:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
1063:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1064:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
1065:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
1066:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1067:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1068:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
1069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1070:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     switch (CallbackID)
1071:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1072:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1073:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
1074:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1075:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1076:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1077:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
1078:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1079:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1080:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1081:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
1082:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1083:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1084:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1085:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
1086:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1087:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1088:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1089:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = HAL_ADCEx_LevelOutOfWindow2Callback;
1090:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1091:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1092:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1093:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = HAL_ADCEx_LevelOutOfWindow3Callback;
1094:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1095:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1096:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1097:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->EndOfSamplingCallback = HAL_ADCEx_EndOfSamplingCallback;
1098:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1099:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1101:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
1102:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1103:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1104:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1105:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
1106:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1107:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       default :
1109:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update the error code */
1110:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1111:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 114


1112:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Return error status */
1113:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         status =  HAL_ERROR;
1114:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1115:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1116:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1117:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1118:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1119:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     switch (CallbackID)
1120:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1121:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1122:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
1123:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1124:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1125:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1126:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
1127:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1128:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1129:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       default :
1130:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update the error code */
1131:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1132:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1133:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Return error status */
1134:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         status =  HAL_ERROR;
1135:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         break;
1136:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1137:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1138:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
1139:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1140:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update the error code */
1141:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1142:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1143:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Return error status */
1144:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     status =  HAL_ERROR;
1145:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1146:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1147:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return status;
1148:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
1149:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1150:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1151:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1152:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1153:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @}
1154:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1155:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1156:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
1157:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *  @brief    ADC IO operation functions
1158:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *
1159:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** @verbatim
1160:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****  ===============================================================================
1161:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                       ##### IO operation functions #####
1162:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****  ===============================================================================
1163:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1164:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Start conversion of regular group.
1165:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Stop conversion of regular group.
1166:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1167:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Poll for conversion event.
1168:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
ARM GAS  /tmp/ccPLPcMa.s 			page 115


1169:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1170:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1171:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Handle ADC interrupt request
1172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1173:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1174:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** @endverbatim
1175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
1176:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1177:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1178:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1179:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
1180:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
1181:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1182:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
1183:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1184:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
1185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
1186:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1188:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1189:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1190:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1191:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1193:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1194:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Process locked */
1195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1196:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1197:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1199:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1202:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1203:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state                                                        */
1204:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1205:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1208:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1209:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1210:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC error code */
1211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Reset all ADC error code fields */
1212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1213:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1218:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Process unlocked */
1219:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1222:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1223:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1225:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
ARM GAS  /tmp/ccPLPcMa.s 			page 116


1226:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* trigger event.                                                       */
1227:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Start ADC group regular conversion */
1228:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1229:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1230:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
1231:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1232:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Process unlocked */
1233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1234:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1235:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1236:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
1237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1238:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1239:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1240:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1241:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
1242:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
1243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
1244:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1246:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1247:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1248:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
1249:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1250:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1251:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1252:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status.
1253:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
1255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
1256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1257:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1258:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1260:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1261:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process locked */
1262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1263:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1264:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
1265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1266:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1269:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1270:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1272:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1273:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1276:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state */
1277:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1278:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1279:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1280:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1281:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1282:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 117


1283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process unlocked */
1284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1285:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1286:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
1287:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
1288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
1289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1290:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1292:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1293:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1294:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are
1295:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1296:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1297:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured
1298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1299:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1301:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still
1302:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1305:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1306:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
1307:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1308:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
1309:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 727              		.loc 1 1309 1 is_stmt 1 view -0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              		.loc 1 1309 1 is_stmt 0 view .LVU203
 732 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 733              	.LCFI2:
 734              		.cfi_def_cfa_offset 24
 735              		.cfi_offset 3, -24
 736              		.cfi_offset 4, -20
 737              		.cfi_offset 5, -16
 738              		.cfi_offset 6, -12
 739              		.cfi_offset 7, -8
 740              		.cfi_offset 14, -4
 741 0002 0400     		movs	r4, r0
 742 0004 0D00     		movs	r5, r1
1310:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
 743              		.loc 1 1310 3 is_stmt 1 view .LVU204
1311:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_Flag_End;
 744              		.loc 1 1311 3 view .LVU205
1312:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1313:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 745              		.loc 1 1314 3 view .LVU206
1315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
1317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 746              		.loc 1 1317 3 view .LVU207
 747              		.loc 1 1317 17 is_stmt 0 view .LVU208
 748 0006 4669     		ldr	r6, [r0, #20]
ARM GAS  /tmp/ccPLPcMa.s 			page 118


 749              		.loc 1 1317 6 view .LVU209
 750 0008 082E     		cmp	r6, #8
 751 000a 04D0     		beq	.L39
1318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1319:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_Flag_End = ADC_FLAG_EOS;
1320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
1322:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
1323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1324:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
1325:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* each conversion:                                                       */
1326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1327:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
1328:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
1329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
1330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 752              		.loc 1 1330 5 is_stmt 1 view .LVU210
 753              		.loc 1 1330 14 is_stmt 0 view .LVU211
 754 000c 0368     		ldr	r3, [r0]
 755              		.loc 1 1330 24 view .LVU212
 756 000e DB68     		ldr	r3, [r3, #12]
 757              		.loc 1 1330 8 view .LVU213
 758 0010 DB07     		lsls	r3, r3, #31
 759 0012 19D4     		bmi	.L49
1331:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1332:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Update ADC state machine to error */
1333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1334:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       return HAL_ERROR;
1336:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1337:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
1338:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1339:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       tmp_Flag_End = (ADC_FLAG_EOC);
 760              		.loc 1 1339 20 view .LVU214
 761 0014 0426     		movs	r6, #4
 762              	.L39:
 763              	.LVL52:
1340:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1341:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1342:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1343:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Get tick count */
1344:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 764              		.loc 1 1344 3 is_stmt 1 view .LVU215
 765              		.loc 1 1344 15 is_stmt 0 view .LVU216
 766 0016 FFF7FEFF 		bl	HAL_GetTick
 767              	.LVL53:
 768              		.loc 1 1344 15 view .LVU217
 769 001a 0700     		movs	r7, r0
 770              	.LVL54:
1345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1346:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
1347:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 771              		.loc 1 1347 3 is_stmt 1 view .LVU218
 772              	.L42:
 773              		.loc 1 1347 9 view .LVU219
 774              		.loc 1 1347 15 is_stmt 0 view .LVU220
 775 001c 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccPLPcMa.s 			page 119


 776              		.loc 1 1347 25 view .LVU221
 777 001e 1A68     		ldr	r2, [r3]
 778              		.loc 1 1347 9 view .LVU222
 779 0020 1642     		tst	r6, r2
 780 0022 17D1     		bne	.L50
1348:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1349:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1350:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 781              		.loc 1 1350 5 is_stmt 1 view .LVU223
 782              		.loc 1 1350 8 is_stmt 0 view .LVU224
 783 0024 6B1C     		adds	r3, r5, #1
 784 0026 F9D0     		beq	.L42
1351:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1352:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 785              		.loc 1 1352 7 is_stmt 1 view .LVU225
 786              		.loc 1 1352 13 is_stmt 0 view .LVU226
 787 0028 FFF7FEFF 		bl	HAL_GetTick
 788              	.LVL55:
 789              		.loc 1 1352 27 view .LVU227
 790 002c C01B     		subs	r0, r0, r7
 791              		.loc 1 1352 10 view .LVU228
 792 002e A842     		cmp	r0, r5
 793 0030 01D8     		bhi	.L43
 794              		.loc 1 1352 51 discriminator 1 view .LVU229
 795 0032 002D     		cmp	r5, #0
 796 0034 F2D1     		bne	.L42
 797              	.L43:
1353:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1354:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1355:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 798              		.loc 1 1355 9 is_stmt 1 view .LVU230
 799 0036 A36D     		ldr	r3, [r4, #88]
 800 0038 0422     		movs	r2, #4
 801 003a 1343     		orrs	r3, r2
 802 003c A365     		str	r3, [r4, #88]
1356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1357:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Process unlocked */
1358:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 803              		.loc 1 1358 9 view .LVU231
 804              		.loc 1 1358 9 view .LVU232
 805 003e 5423     		movs	r3, #84
 806 0040 0022     		movs	r2, #0
 807 0042 E254     		strb	r2, [r4, r3]
 808              		.loc 1 1358 9 view .LVU233
1359:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         return HAL_TIMEOUT;
 809              		.loc 1 1360 9 view .LVU234
 810              		.loc 1 1360 16 is_stmt 0 view .LVU235
 811 0044 0320     		movs	r0, #3
 812 0046 29E0     		b	.L40
 813              	.LVL56:
 814              	.L49:
1333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 815              		.loc 1 1333 7 is_stmt 1 view .LVU236
 816 0048 836D     		ldr	r3, [r0, #88]
 817 004a 2022     		movs	r2, #32
 818 004c 1343     		orrs	r3, r2
ARM GAS  /tmp/ccPLPcMa.s 			page 120


 819 004e 8365     		str	r3, [r0, #88]
1335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 820              		.loc 1 1335 7 view .LVU237
1335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 821              		.loc 1 1335 14 is_stmt 0 view .LVU238
 822 0050 0120     		movs	r0, #1
 823              	.LVL57:
1335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 824              		.loc 1 1335 14 view .LVU239
 825 0052 23E0     		b	.L40
 826              	.LVL58:
 827              	.L50:
1361:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1362:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1363:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1364:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Update ADC state machine */
1366:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 828              		.loc 1 1366 3 is_stmt 1 view .LVU240
 829 0054 A16D     		ldr	r1, [r4, #88]
 830 0056 8022     		movs	r2, #128
 831 0058 9200     		lsls	r2, r2, #2
 832 005a 0A43     		orrs	r2, r1
 833 005c A265     		str	r2, [r4, #88]
1367:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1369:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 834              		.loc 1 1370 3 view .LVU241
 835              	.LVL59:
 836              	.LBB144:
 837              	.LBI144:
2396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 838              		.loc 2 2396 26 view .LVU242
 839              	.LBB145:
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 840              		.loc 2 2398 3 view .LVU243
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 841              		.loc 2 2398 12 is_stmt 0 view .LVU244
 842 005e D968     		ldr	r1, [r3, #12]
 843 0060 C022     		movs	r2, #192
 844 0062 1201     		lsls	r2, r2, #4
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 845              		.loc 2 2398 106 view .LVU245
 846 0064 1142     		tst	r1, r2
 847 0066 13D1     		bne	.L45
 848              	.LVL60:
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 849              		.loc 2 2398 106 view .LVU246
 850              	.LBE145:
 851              	.LBE144:
1371:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       && (hadc->Init.ContinuousConvMode == DISABLE)
 852              		.loc 1 1371 21 view .LVU247
 853 0068 A27E     		ldrb	r2, [r4, #26]
 854              		.loc 1 1371 7 view .LVU248
 855 006a 002A     		cmp	r2, #0
 856 006c 10D1     		bne	.L45
ARM GAS  /tmp/ccPLPcMa.s 			page 121


1372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      )
1373:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1374:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check whether end of sequence is reached */
1375:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 857              		.loc 1 1375 5 is_stmt 1 view .LVU249
 858              		.loc 1 1375 9 is_stmt 0 view .LVU250
 859 006e 1A68     		ldr	r2, [r3]
 860              		.loc 1 1375 8 view .LVU251
 861 0070 1207     		lsls	r2, r2, #28
 862 0072 0DD5     		bpl	.L45
1376:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1377:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
1378:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
1379:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 863              		.loc 1 1379 7 is_stmt 1 view .LVU252
 864              	.LVL61:
 865              	.LBB146:
 866              	.LBI146:
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 867              		.loc 2 4427 26 view .LVU253
 868              	.LBB147:
 869              		.loc 2 4429 3 view .LVU254
 870              		.loc 2 4429 12 is_stmt 0 view .LVU255
 871 0074 9A68     		ldr	r2, [r3, #8]
 872              		.loc 2 4429 74 view .LVU256
 873 0076 5207     		lsls	r2, r2, #29
 874 0078 11D4     		bmi	.L46
 875              	.LVL62:
 876              		.loc 2 4429 74 view .LVU257
 877              	.LBE147:
 878              	.LBE146:
1380:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1381:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
1382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1383:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
1384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
1385:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 879              		.loc 1 1385 9 is_stmt 1 view .LVU258
 880 007a 5A68     		ldr	r2, [r3, #4]
 881 007c 0C21     		movs	r1, #12
 882 007e 8A43     		bics	r2, r1
 883 0080 5A60     		str	r2, [r3, #4]
1386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1387:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set ADC state */
1388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 884              		.loc 1 1388 9 view .LVU259
 885 0082 A36D     		ldr	r3, [r4, #88]
 886 0084 0B4A     		ldr	r2, .L51
 887 0086 1340     		ands	r3, r2
 888 0088 0432     		adds	r2, r2, #4
 889 008a FF32     		adds	r2, r2, #255
 890 008c 1343     		orrs	r3, r2
 891 008e A365     		str	r3, [r4, #88]
 892              	.L45:
1389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
1390:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
1391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
ARM GAS  /tmp/ccPLPcMa.s 			page 122


1392:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       else
1393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Change ADC state to error state */
1395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1397:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
1398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1399:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1400:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1401:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1402:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1403:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
1404:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
1405:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
1406:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 893              		.loc 1 1406 3 view .LVU260
 894              		.loc 1 1406 17 is_stmt 0 view .LVU261
 895 0090 207E     		ldrb	r0, [r4, #24]
 896              		.loc 1 1406 6 view .LVU262
 897 0092 0028     		cmp	r0, #0
 898 0094 0CD1     		bne	.L48
1407:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1408:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1409:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 899              		.loc 1 1409 5 is_stmt 1 view .LVU263
 900 0096 2368     		ldr	r3, [r4]
 901 0098 0C22     		movs	r2, #12
 902 009a 1A60     		str	r2, [r3]
 903              	.LVL63:
 904              	.L40:
1410:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1411:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1412:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
1413:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return HAL_OK;
1414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 905              		.loc 1 1414 1 is_stmt 0 view .LVU264
 906              		@ sp needed
 907              	.LVL64:
 908              	.LVL65:
 909              		.loc 1 1414 1 view .LVU265
 910 009c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 911              	.LVL66:
 912              	.L46:
1395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 913              		.loc 1 1395 9 is_stmt 1 view .LVU266
 914 009e A36D     		ldr	r3, [r4, #88]
 915 00a0 2022     		movs	r2, #32
 916 00a2 1343     		orrs	r3, r2
 917 00a4 A365     		str	r3, [r4, #88]
1398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 918              		.loc 1 1398 9 view .LVU267
 919 00a6 E36D     		ldr	r3, [r4, #92]
 920 00a8 1F3A     		subs	r2, r2, #31
 921 00aa 1343     		orrs	r3, r2
 922 00ac E365     		str	r3, [r4, #92]
 923 00ae EFE7     		b	.L45
 924              	.L48:
ARM GAS  /tmp/ccPLPcMa.s 			page 123


1413:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 925              		.loc 1 1413 10 is_stmt 0 view .LVU268
 926 00b0 0020     		movs	r0, #0
 927 00b2 F3E7     		b	.L40
 928              	.L52:
 929              		.align	2
 930              	.L51:
 931 00b4 FEFEFFFF 		.word	-258
 932              		.cfi_endproc
 933              	.LFE458:
 935              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 936              		.align	1
 937              		.global	HAL_ADC_PollForEvent
 938              		.syntax unified
 939              		.code	16
 940              		.thumb_func
 941              		.fpu softvfp
 943              	HAL_ADC_PollForEvent:
 944              	.LVL67:
 945              	.LFB459:
1415:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1416:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1417:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Poll for ADC event.
1418:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1419:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param EventType the ADC event type.
1420:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          This parameter can be one of the following values:
1421:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *            @arg @ref ADC_EOSMP_EVENT  ADC End of Sampling event
1422:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *            @arg @ref ADC_AWD1_EVENT   ADC Analog watchdog 1 event (main analog watchdog, presen
1423:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *            @arg @ref ADC_AWD2_EVENT   ADC Analog watchdog 2 event (additional analog watchdog, 
1424:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *            @arg @ref ADC_AWD3_EVENT   ADC Analog watchdog 3 event (additional analog watchdog, 
1425:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *            @arg @ref ADC_OVR_EVENT    ADC Overrun event
1426:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1427:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1428:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set
1429:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten
1430:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1431:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1432:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1433:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
1434:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1435:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeou
1436:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 946              		.loc 1 1436 1 is_stmt 1 view -0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 0
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950              		.loc 1 1436 1 is_stmt 0 view .LVU270
 951 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 952              	.LCFI3:
 953              		.cfi_def_cfa_offset 24
 954              		.cfi_offset 3, -24
 955              		.cfi_offset 4, -20
 956              		.cfi_offset 5, -16
 957              		.cfi_offset 6, -12
 958              		.cfi_offset 7, -8
 959              		.cfi_offset 14, -4
 960 0002 0500     		movs	r5, r0
ARM GAS  /tmp/ccPLPcMa.s 			page 124


 961 0004 0C00     		movs	r4, r1
 962 0006 1600     		movs	r6, r2
1437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
 963              		.loc 1 1437 3 is_stmt 1 view .LVU271
1438:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1439:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1440:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 964              		.loc 1 1440 3 view .LVU272
1441:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 965              		.loc 1 1441 3 view .LVU273
1442:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1443:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Get tick count */
1444:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 966              		.loc 1 1444 3 view .LVU274
 967              		.loc 1 1444 15 is_stmt 0 view .LVU275
 968 0008 FFF7FEFF 		bl	HAL_GetTick
 969              	.LVL68:
 970              		.loc 1 1444 15 view .LVU276
 971 000c 0700     		movs	r7, r0
 972              	.LVL69:
1445:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1446:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check selected event flag */
1447:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   while (__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 973              		.loc 1 1447 3 is_stmt 1 view .LVU277
 974              	.L55:
 975              		.loc 1 1447 9 view .LVU278
 976              		.loc 1 1447 10 is_stmt 0 view .LVU279
 977 000e 2968     		ldr	r1, [r5]
 978 0010 0B68     		ldr	r3, [r1]
 979 0012 2340     		ands	r3, r4
 980              		.loc 1 1447 9 view .LVU280
 981 0014 A342     		cmp	r3, r4
 982 0016 11D0     		beq	.L66
1448:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1449:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1450:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 983              		.loc 1 1450 5 is_stmt 1 view .LVU281
 984              		.loc 1 1450 8 is_stmt 0 view .LVU282
 985 0018 731C     		adds	r3, r6, #1
 986 001a F8D0     		beq	.L55
1451:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1452:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 987              		.loc 1 1452 7 is_stmt 1 view .LVU283
 988              		.loc 1 1452 13 is_stmt 0 view .LVU284
 989 001c FFF7FEFF 		bl	HAL_GetTick
 990              	.LVL70:
 991              		.loc 1 1452 27 view .LVU285
 992 0020 C01B     		subs	r0, r0, r7
 993              		.loc 1 1452 10 view .LVU286
 994 0022 B042     		cmp	r0, r6
 995 0024 01D8     		bhi	.L56
 996              		.loc 1 1452 51 discriminator 1 view .LVU287
 997 0026 002E     		cmp	r6, #0
 998 0028 F1D1     		bne	.L55
 999              	.L56:
1453:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1454:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update ADC state machine to timeout */
ARM GAS  /tmp/ccPLPcMa.s 			page 125


1455:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1000              		.loc 1 1455 9 is_stmt 1 view .LVU288
 1001 002a AB6D     		ldr	r3, [r5, #88]
 1002 002c 0422     		movs	r2, #4
 1003 002e 1343     		orrs	r3, r2
 1004 0030 AB65     		str	r3, [r5, #88]
1456:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Process unlocked */
1458:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 1005              		.loc 1 1458 9 view .LVU289
 1006              		.loc 1 1458 9 view .LVU290
 1007 0032 5423     		movs	r3, #84
 1008 0034 0022     		movs	r2, #0
 1009 0036 EA54     		strb	r2, [r5, r3]
 1010              		.loc 1 1458 9 view .LVU291
1459:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1460:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         return HAL_TIMEOUT;
 1011              		.loc 1 1460 9 view .LVU292
 1012              		.loc 1 1460 16 is_stmt 0 view .LVU293
 1013 0038 0320     		movs	r0, #3
 1014 003a 27E0     		b	.L57
 1015              	.L66:
1461:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1462:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1463:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1464:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1465:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   switch (EventType)
 1016              		.loc 1 1465 3 is_stmt 1 view .LVU294
 1017 003c 8023     		movs	r3, #128
 1018 003e 5B00     		lsls	r3, r3, #1
 1019 0040 9C42     		cmp	r4, r3
 1020 0042 24D0     		beq	.L59
 1021 0044 0CD8     		bhi	.L60
 1022 0046 022C     		cmp	r4, #2
 1023 0048 18D0     		beq	.L61
 1024 004a 802C     		cmp	r4, #128
 1025 004c 29D1     		bne	.L63
1466:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1467:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* End Of Sampling event */
1468:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     case ADC_EOSMP_EVENT:
1469:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state */
1470:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
1471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1472:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Clear the End Of Sampling flag */
1473:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
1474:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1475:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       break;
1476:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1477:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Analog watchdog (level out of window) event */
1478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Note: In case of several analog watchdog enabled, if needed to know      */
1479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* which one triggered and on which ADCx, test ADC state of analog watchdog */
1480:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* flags HAL_ADC_STATE_AWD1/2/3 using function "HAL_ADC_GetState()".        */
1481:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* For example:                                                             */
1482:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "          */
1483:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD2) != 0UL) "          */
1484:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD3) != 0UL) "          */
1485:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 126


1486:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check analog watchdog 1 flag */
1487:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     case ADC_AWD_EVENT:
1488:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state */
1489:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1026              		.loc 1 1489 7 view .LVU295
 1027 004e AA6D     		ldr	r2, [r5, #88]
 1028 0050 8023     		movs	r3, #128
 1029 0052 5B02     		lsls	r3, r3, #9
 1030 0054 1343     		orrs	r3, r2
 1031 0056 AB65     		str	r3, [r5, #88]
1490:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1491:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1492:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 1032              		.loc 1 1492 7 view .LVU296
 1033 0058 8023     		movs	r3, #128
 1034 005a 0B60     		str	r3, [r1]
1493:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1494:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       break;
 1035              		.loc 1 1494 7 view .LVU297
1495:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1496:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check analog watchdog 2 flag */
1497:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     case ADC_AWD2_EVENT:
1498:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state */
1499:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
1500:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1501:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1502:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
1503:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1504:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       break;
1505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1506:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check analog watchdog 3 flag */
1507:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     case ADC_AWD3_EVENT:
1508:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state */
1509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
1510:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1511:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1512:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
1513:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       break;
1515:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Overrun event */
1517:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     default: /* Case ADC_OVR_EVENT */
1518:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If overrun is set to overwrite previous data, overrun event is not     */
1519:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* considered as an error.                                                */
1520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* (cf ref manual "Managing conversions without using the DMA and without */
1521:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* overrun ")                                                             */
1522:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1523:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1524:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set ADC state */
1525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1526:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1527:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set ADC error code to overrun */
1528:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1529:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1530:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       else
1531:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1532:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Clear ADC Overrun flag only if Overrun is set to ADC_OVR_DATA_OVERWRITTEN
ARM GAS  /tmp/ccPLPcMa.s 			page 127


1533:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****            otherwise, data register is potentially overwritten by new converted data as soon
1534:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****            as OVR is cleared. */
1535:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1536:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1537:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       break;
1538:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1539:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1540:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
1541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return HAL_OK;
 1036              		.loc 1 1541 10 is_stmt 0 view .LVU298
 1037 005c 0020     		movs	r0, #0
1494:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1038              		.loc 1 1494 7 view .LVU299
 1039 005e 15E0     		b	.L57
 1040              	.L60:
1465:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1041              		.loc 1 1465 3 view .LVU300
 1042 0060 8023     		movs	r3, #128
 1043 0062 9B00     		lsls	r3, r3, #2
 1044 0064 9C42     		cmp	r4, r3
 1045 0066 1CD1     		bne	.L63
1509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1046              		.loc 1 1509 7 is_stmt 1 view .LVU301
 1047 0068 AA6D     		ldr	r2, [r5, #88]
 1048 006a 8023     		movs	r3, #128
 1049 006c DB02     		lsls	r3, r3, #11
 1050 006e 1343     		orrs	r3, r2
 1051 0070 AB65     		str	r3, [r5, #88]
1512:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1052              		.loc 1 1512 7 view .LVU302
 1053 0072 8023     		movs	r3, #128
 1054 0074 9B00     		lsls	r3, r3, #2
 1055 0076 0B60     		str	r3, [r1]
1514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1056              		.loc 1 1514 7 view .LVU303
 1057              		.loc 1 1541 10 is_stmt 0 view .LVU304
 1058 0078 0020     		movs	r0, #0
1514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1059              		.loc 1 1514 7 view .LVU305
 1060 007a 07E0     		b	.L57
 1061              	.L61:
1470:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1062              		.loc 1 1470 7 is_stmt 1 view .LVU306
 1063 007c AA6D     		ldr	r2, [r5, #88]
 1064 007e 8023     		movs	r3, #128
 1065 0080 1B01     		lsls	r3, r3, #4
 1066 0082 1343     		orrs	r3, r2
 1067 0084 AB65     		str	r3, [r5, #88]
1473:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1068              		.loc 1 1473 7 view .LVU307
 1069 0086 0223     		movs	r3, #2
 1070 0088 0B60     		str	r3, [r1]
1475:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1071              		.loc 1 1475 7 view .LVU308
 1072              		.loc 1 1541 10 is_stmt 0 view .LVU309
 1073 008a 0020     		movs	r0, #0
 1074              	.L57:
ARM GAS  /tmp/ccPLPcMa.s 			page 128


1542:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1075              		.loc 1 1542 1 view .LVU310
 1076              		@ sp needed
 1077              	.LVL71:
 1078              	.LVL72:
 1079              	.LVL73:
 1080              	.LVL74:
 1081              		.loc 1 1542 1 view .LVU311
 1082 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1083              	.LVL75:
 1084              	.L59:
1499:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1085              		.loc 1 1499 7 is_stmt 1 view .LVU312
 1086 008e AA6D     		ldr	r2, [r5, #88]
 1087 0090 8023     		movs	r3, #128
 1088 0092 9B02     		lsls	r3, r3, #10
 1089 0094 1343     		orrs	r3, r2
 1090 0096 AB65     		str	r3, [r5, #88]
1502:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1091              		.loc 1 1502 7 view .LVU313
 1092 0098 8023     		movs	r3, #128
 1093 009a 5B00     		lsls	r3, r3, #1
 1094 009c 0B60     		str	r3, [r1]
1504:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1095              		.loc 1 1504 7 view .LVU314
1541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1096              		.loc 1 1541 10 is_stmt 0 view .LVU315
 1097 009e 0020     		movs	r0, #0
1504:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1098              		.loc 1 1504 7 view .LVU316
 1099 00a0 F4E7     		b	.L57
 1100              	.L63:
1522:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1101              		.loc 1 1522 7 is_stmt 1 view .LVU317
1522:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1102              		.loc 1 1522 10 is_stmt 0 view .LVU318
 1103 00a2 2B6B     		ldr	r3, [r5, #48]
 1104 00a4 002B     		cmp	r3, #0
 1105 00a6 0AD1     		bne	.L65
1525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1106              		.loc 1 1525 9 is_stmt 1 view .LVU319
 1107 00a8 AA6D     		ldr	r2, [r5, #88]
 1108 00aa 8023     		movs	r3, #128
 1109 00ac DB00     		lsls	r3, r3, #3
 1110 00ae 1343     		orrs	r3, r2
 1111 00b0 AB65     		str	r3, [r5, #88]
1528:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 1112              		.loc 1 1528 9 view .LVU320
 1113 00b2 EB6D     		ldr	r3, [r5, #92]
 1114 00b4 0222     		movs	r2, #2
 1115 00b6 1343     		orrs	r3, r2
 1116 00b8 EB65     		str	r3, [r5, #92]
1541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1117              		.loc 1 1541 10 is_stmt 0 view .LVU321
 1118 00ba 0020     		movs	r0, #0
 1119 00bc E6E7     		b	.L57
 1120              	.L65:
ARM GAS  /tmp/ccPLPcMa.s 			page 129


1535:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 1121              		.loc 1 1535 9 is_stmt 1 view .LVU322
 1122 00be 1023     		movs	r3, #16
 1123 00c0 0B60     		str	r3, [r1]
1541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1124              		.loc 1 1541 10 is_stmt 0 view .LVU323
 1125 00c2 0020     		movs	r0, #0
 1126 00c4 E2E7     		b	.L57
 1127              		.cfi_endproc
 1128              	.LFE459:
 1130              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1131              		.align	1
 1132              		.global	HAL_ADC_GetValue
 1133              		.syntax unified
 1134              		.code	16
 1135              		.thumb_func
 1136              		.fpu softvfp
 1138              	HAL_ADC_GetValue:
 1139              	.LVL76:
 1140              	.LFB464:
1543:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1544:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1545:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1546:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1547:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence),
1548:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         OVR overrun.
1549:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1550:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1551:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure
1552:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1553:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() does not enable the End Of Sampling
1554:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1555:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         mode), the user must:
1556:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1557:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP)
1558:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1559:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1560:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
1561:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1562:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
1563:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
1564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1565:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1566:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1568:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1569:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1570:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1571:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1572:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Process locked */
1573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1574:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1575:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1576:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1577:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1578:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1579:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
ARM GAS  /tmp/ccPLPcMa.s 			page 130


1580:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state                                                        */
1582:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1583:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1584:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1585:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1588:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1589:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC error code */
1590:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Reset all ADC error code fields */
1591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1592:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1593:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1594:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1596:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1597:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Process unlocked */
1598:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1599:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1601:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1602:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Disable all interruptions before enabling the desired ones */
1603:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1604:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1605:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1606:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       switch (hadc->Init.EOCSelection)
1607:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1608:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV:
1609:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
1610:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
1611:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1612:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         default:
1613:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
1614:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
1615:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1616:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1617:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1618:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
1619:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
1620:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****          behavior and no CPU time is lost for a non-processed interruption */
1621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1622:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1624:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1625:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1626:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1627:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1628:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1629:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* trigger event.                                                       */
1630:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Start ADC group regular conversion */
1631:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1632:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1633:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
1634:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1635:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Process unlocked */
1636:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
ARM GAS  /tmp/ccPLPcMa.s 			page 131


1637:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1638:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1639:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1640:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
1641:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1642:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1643:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1644:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1645:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
1646:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
1647:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
1648:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1649:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1650:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
1651:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of
1652:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1653:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1654:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status.
1655:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1656:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
1657:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
1658:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1659:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1660:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1661:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1662:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1663:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process locked */
1664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1665:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1666:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
1667:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1668:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1669:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1670:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1671:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1672:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1673:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1674:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1675:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1677:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1678:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1680:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1681:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1682:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state */
1683:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1684:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1685:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1686:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1687:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1688:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1689:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process unlocked */
1690:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1691:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1692:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
1693:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
ARM GAS  /tmp/ccPLPcMa.s 			page 132


1694:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
1695:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1696:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1697:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
1698:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
1699:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete.
1700:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1701:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1702:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param pData Destination Buffer address.
1703:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param Length Number of data to be transferred from ADC peripheral to memory
1704:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status.
1705:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1706:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
1707:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
1708:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1709:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1710:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1711:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1712:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1713:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1714:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1715:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1716:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Process locked */
1717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_LOCK(hadc);
1718:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1719:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Specific case for first call occurrence of this function (DMA transfer */
1720:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* not activated and ADC disabled), DMA transfer must be activated        */
1721:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* with ADC disabled.                                                     */
1722:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
1723:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1724:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
1725:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1726:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Disable ADC */
1727:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         LL_ADC_Disable(hadc->Instance);
1728:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1729:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1730:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1731:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
1732:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1733:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1734:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1735:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1736:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1737:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1738:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1739:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1740:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state                                                        */
1741:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1742:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1743:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1744:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1746:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1747:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC error code */
1748:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Reset all ADC error code fields */
1749:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1750:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 133


1751:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1752:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1753:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1754:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1755:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1756:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1757:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set the DMA error callback */
1758:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1759:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1760:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1761:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1762:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1763:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1764:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1765:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1766:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* operations)                                                          */
1767:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1768:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1769:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Process unlocked */
1770:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1771:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1772:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1773:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1774:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1775:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1776:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1777:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Start the DMA channel */
1778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)
1779:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1780:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1781:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1782:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1783:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* trigger event.                                                       */
1784:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Start ADC group regular conversion */
1785:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1786:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1787:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1788:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
1789:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1790:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1791:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1792:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1793:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
1794:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
1795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
1796:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1797:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1798:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
1799:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
1800:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         ADC peripheral.
1801:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1802:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status.
1803:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1804:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
1805:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
1806:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1807:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 134


1808:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1809:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1810:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1811:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process locked */
1812:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_LOCK(hadc);
1813:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1814:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
1815:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1816:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1817:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1818:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1819:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1820:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1821:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
1823:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1824:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1825:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1826:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
1827:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (tmp_hal_status != HAL_OK)
1828:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1829:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update ADC state machine to error */
1830:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1831:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1832:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1833:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1834:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1835:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1836:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1837:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1838:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
1839:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* to keep in memory a potential failing status.                          */
1840:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1841:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1842:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
1843:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1844:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
1845:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1846:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (void)ADC_Disable(hadc);
1847:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1848:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1849:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1850:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1851:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1852:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state */
1853:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1854:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1855:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1856:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1857:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1858:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
1859:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
1860:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1861:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1862:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process unlocked */
1863:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1864:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 135


1865:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
1866:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
1867:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
1868:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1869:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1870:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1871:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1872:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1873:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS
1874:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1875:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1876:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1877:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *            to flag EOC.
1878:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1879:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1880:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1881:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         To clear this flag, either use function:
1882:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1883:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
1884:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1885:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1886:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1887:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1888:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
1889:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 1141              		.loc 1 1889 1 is_stmt 1 view -0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              		@ link register save eliminated.
1890:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1891:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 1146              		.loc 1 1891 3 view .LVU325
1892:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1893:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1894:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1895:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1896:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return ADC converted value */
1897:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return hadc->Instance->DR;
 1147              		.loc 1 1897 3 view .LVU326
 1148              		.loc 1 1897 14 is_stmt 0 view .LVU327
 1149 0000 0368     		ldr	r3, [r0]
 1150              		.loc 1 1897 24 view .LVU328
 1151 0002 186C     		ldr	r0, [r3, #64]
 1152              	.LVL77:
1898:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1153              		.loc 1 1898 1 view .LVU329
 1154              		@ sp needed
 1155 0004 7047     		bx	lr
 1156              		.cfi_endproc
 1157              	.LFE464:
 1159              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1160              		.align	1
 1161              		.weak	HAL_ADC_ConvCpltCallback
 1162              		.syntax unified
 1163              		.code	16
 1164              		.thumb_func
ARM GAS  /tmp/ccPLPcMa.s 			page 136


 1165              		.fpu softvfp
 1167              	HAL_ADC_ConvCpltCallback:
 1168              	.LVL78:
 1169              	.LFB466:
1899:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1900:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
1901:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
1902:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
1903:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
1904:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
1905:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
1906:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
1907:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
1908:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
1909:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
1910:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1911:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
1912:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1913:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1914:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1915:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ========== Check End of Sampling flag for ADC group regular ========== */
1916:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
1917:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1918:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update state machine on end of sampling status if not in error state */
1919:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
1920:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1921:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state */
1922:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
1923:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1924:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1925:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* End Of Sampling callback */
1926:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1927:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->EndOfSamplingCallback(hadc);
1928:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
1929:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     HAL_ADCEx_EndOfSamplingCallback(hadc);
1930:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1931:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1932:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1933:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
1934:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
1935:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1936:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
1937:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
1938:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
1939:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
1940:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1941:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
1942:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1943:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC state */
1944:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1945:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1946:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1947:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1948:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
1949:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* to disable interruption.                                               */
1950:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
1951:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
ARM GAS  /tmp/ccPLPcMa.s 			page 137


1952:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        )
1953:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
1954:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1955:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
1956:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
1957:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1958:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1959:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1960:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
1961:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1962:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1963:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1964:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1965:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1966:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1967:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Set ADC state */
1968:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
1969:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1970:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1971:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
1972:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else
1973:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
1974:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Change ADC state to error state */
1975:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1976:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1977:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
1978:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1979:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
1980:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
1981:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
1982:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1983:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Conversion complete callback */
1984:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
1985:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       to determine if conversion has been triggered from EOC or EOS,   */
1986:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       possibility to use:                                              */
1987:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
1988:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1989:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
1990:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
1991:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1992:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1993:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
1994:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1995:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1996:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1997:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1998:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1999:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
2000:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2001:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2002:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ========== Check Analog watchdog 1 flag ========== */
2003:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
2004:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2005:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Set ADC state */
2006:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
2007:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2008:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Level out of window 1 callback */
ARM GAS  /tmp/ccPLPcMa.s 			page 138


2009:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2010:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback(hadc);
2011:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
2012:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
2013:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2014:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2015:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2016:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
2017:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2018:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2019:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ========== Check analog watchdog 2 flag ========== */
2020:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
2021:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2022:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Set ADC state */
2023:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
2024:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2025:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Level out of window 2 callback */
2026:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2027:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback(hadc);
2028:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
2029:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
2030:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2031:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2032:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2033:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
2034:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2035:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2036:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ========== Check analog watchdog 3 flag ========== */
2037:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
2038:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2039:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Set ADC state */
2040:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
2041:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2042:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Level out of window 3 callback */
2043:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2044:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback(hadc);
2045:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
2046:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
2047:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2048:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2049:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2050:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
2051:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2052:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2053:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
2054:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
2055:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2056:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
2057:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
2058:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
2059:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* overrun ")                                                             */
2060:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
2061:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* error.                                                                 */
2062:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
2063:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2064:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       overrun_error = 1UL;
2065:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
ARM GAS  /tmp/ccPLPcMa.s 			page 139


2066:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
2067:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2068:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Check DMA configuration */
2069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
2070:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2071:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         overrun_error = 1UL;
2072:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2073:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2074:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2075:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (overrun_error == 1UL)
2076:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2077:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Change ADC state to error state */
2078:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
2079:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2080:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC error code to overrun */
2081:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
2082:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2083:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Error callback */
2084:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Note: In case of overrun, ADC conversion data is preserved until     */
2085:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       flag OVR is reset.                                             */
2086:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       Therefore, old ADC conversion data can be retrieved in         */
2087:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       function "HAL_ADC_ErrorCallback()".                            */
2088:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2089:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
2090:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
2091:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
2092:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2093:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2094:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2095:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Clear ADC overrun flag */
2096:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
2097:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2098:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2099:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ========== Check channel configuration ready flag ========== */
2100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
2101:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2102:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Level out of window 1 callback */
2103:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     HAL_ADCEx_ChannelConfigReadyCallback(hadc);
2104:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2105:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2106:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
2107:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2109:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2110:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2111:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
2112:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2113:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
2114:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2115:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
2116:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 1170              		.loc 1 2116 1 is_stmt 1 view -0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 0
 1173              		@ frame_needed = 0, uses_anonymous_args = 0
 1174              		@ link register save eliminated.
2117:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccPLPcMa.s 			page 140


2118:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   UNUSED(hadc);
 1175              		.loc 1 2118 3 view .LVU331
2119:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2120:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2121:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
2122:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****    */
2123:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1176              		.loc 1 2123 1 is_stmt 0 view .LVU332
 1177              		@ sp needed
 1178 0000 7047     		bx	lr
 1179              		.cfi_endproc
 1180              	.LFE466:
 1182              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1183              		.align	1
 1184              		.weak	HAL_ADC_ConvHalfCpltCallback
 1185              		.syntax unified
 1186              		.code	16
 1187              		.thumb_func
 1188              		.fpu softvfp
 1190              	HAL_ADC_ConvHalfCpltCallback:
 1191              	.LVL79:
 1192              	.LFB467:
2124:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2125:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2126:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
2127:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2128:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
2129:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2130:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
2131:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 1193              		.loc 1 2131 1 is_stmt 1 view -0
 1194              		.cfi_startproc
 1195              		@ args = 0, pretend = 0, frame = 0
 1196              		@ frame_needed = 0, uses_anonymous_args = 0
 1197              		@ link register save eliminated.
2132:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2133:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   UNUSED(hadc);
 1198              		.loc 1 2133 3 view .LVU334
2134:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2135:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2136:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
2137:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2138:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1199              		.loc 1 2138 1 is_stmt 0 view .LVU335
 1200              		@ sp needed
 1201 0000 7047     		bx	lr
 1202              		.cfi_endproc
 1203              	.LFE467:
 1205              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1206              		.align	1
 1207              		.syntax unified
 1208              		.code	16
 1209              		.thumb_func
 1210              		.fpu softvfp
 1212              	ADC_DMAHalfConvCplt:
 1213              	.LVL80:
 1214              	.LFB478:
ARM GAS  /tmp/ccPLPcMa.s 			page 141


2139:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2140:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2141:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
2142:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2143:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
2144:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2145:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
2146:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
2147:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2148:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   UNUSED(hadc);
2149:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2150:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2151:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
2152:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2153:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2154:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2155:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2156:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
2157:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
2158:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer
2159:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         (HAL ADC handle parameter "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
2160:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
2161:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
2162:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
2163:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
2164:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2165:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
2166:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2167:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
2168:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
2169:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2170:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   UNUSED(hadc);
2171:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2172:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2173:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
2174:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2176:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2177:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2178:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @}
2179:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2180:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2181:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
2182:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief    Peripheral Control functions
2183:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *
2184:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** @verbatim
2185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****  ===============================================================================
2186:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****              ##### Peripheral Control functions #####
2187:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****  ===============================================================================
2188:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
2189:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Configure channels on regular group
2190:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Configure the analog watchdog
2191:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** @endverbatim
2193:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
2194:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 142


2196:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2197:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
2198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
2199:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
2200:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         These internal paths can be disabled using function
2201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
2202:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2203:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
2204:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
2205:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
2206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         without resetting the ADC.
2207:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
2208:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
2209:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2210:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param sConfig Structure of ADC channel assigned to ADC group regular.
2211:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
2212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2213:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
2214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
2217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
2218:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2219:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
2220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
2222:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));
2223:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
2225:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
2226:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2227:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_RANK_SEQ_FIXED(sConfig->Rank));
2228:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2229:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
2230:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2231:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
2232:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2234:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2235:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2236:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process locked */
2237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_LOCK(hadc);
2238:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2239:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2240:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2241:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
2242:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*  - Channel number                                                        */
2243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*  - Channel sampling time                                                 */
2244:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
2245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2246:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2247:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Configure channel: depending on rank setting, add it or remove it from */
2248:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* ADC sequencer.                                                         */
2249:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* If sequencer set to not fully configurable with channel rank set to    */
2250:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* none, remove the channel from the sequencer.                           */
2251:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Otherwise (sequencer set to fully configurable or to to not fully      */
2252:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* configurable with channel rank to be set), configure the selected      */
ARM GAS  /tmp/ccPLPcMa.s 			page 143


2253:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* channel.                                                               */
2254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (sConfig->Rank != ADC_RANK_NONE)
2255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Regular sequence configuration */
2257:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Note: ADC channel configuration requires few ADC clock cycles        */
2258:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       to be ready. Processing of ADC settings in this function       */
2259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       induce that a specific wait time is not necessary.             */
2260:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       For more details on ADC channel configuration ready,           */
2261:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
2262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
2263:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
2264:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Sequencer set to not fully configurable:                           */
2266:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set the channel by enabling the corresponding bitfield.            */
2267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
2268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2269:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       else
2270:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Sequencer set to fully configurable:                               */
2272:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set the channel by entering it into the selected rank.             */
2273:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Memorize the channel set into variable in HAL ADC handle */
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
2276:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
2277:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) << (sConfig->Rank & 0x1FUL));
2278:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2279:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* If the selected rank is below ADC group regular sequencer length,  */
2280:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* apply the configuration in ADC register.                           */
2281:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Note: Otherwise, configuration is not applied.                     */
2282:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*       To apply it, parameter'NbrOfConversion' must be increased.   */
2283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
2284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2285:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
2286:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2287:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2289:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set sampling time of the selected ADC channel */
2290:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
2291:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2292:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
2293:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* internal measurement paths enable: If internal channel selected,     */
2294:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* enable dedicated internal buffers and path.                          */
2295:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using         */
2296:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
2297:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       channel configuration parameter "Rank".                        */
2298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
2299:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc-
2301:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2302:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* If the requested internal measurement path has already been enabled,   */
2303:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* bypass the configuration processing.                                   */
2304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
2305:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
2306:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2307:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2308:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_chan
2309:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 144


2310:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
2311:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Wait loop initialization and execution */
2312:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Note: Variable divided by 2 to compensate partially              */
2313:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /*       CPU processing cycles, scaling in us split to not          */
2314:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /*       exceed 32 bits register capacity and handle low frequency. */
2315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000
2316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           while (wait_loop_index != 0UL)
2317:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
2318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             wait_loop_index--;
2319:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
2320:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_P
2322:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2324:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
2325:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
2327:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
2328:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2330:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel
2331:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2332:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else
2333:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2334:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* nothing to do */
2335:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2336:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2337:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2338:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
2339:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2340:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Regular sequencer configuration */
2341:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Note: Case of sequencer set to fully configurable:                   */
2342:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       Sequencer rank cannot be disabled, only affected to            */
2343:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       another channel.                                               */
2344:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       To remove a rank, use parameter 'NbrOfConversion".             */
2345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
2346:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
2347:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2348:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Sequencer set to not fully configurable:                           */
2349:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Reset the channel by disabling the corresponding bitfield.         */
2350:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
2351:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2352:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2353:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
2354:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If internal channel selected, enable dedicated internal buffers and    */
2355:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* paths.                                                                 */
2356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
2357:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2358:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc-
2359:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
2361:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2362:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2363:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_cha
2364:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else if (sConfig->Channel == ADC_CHANNEL_VBAT)
2366:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
ARM GAS  /tmp/ccPLPcMa.s 			page 145


2367:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2368:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
2369:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
2371:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2373:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channe
2374:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2375:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else
2376:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2377:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* nothing to do */
2378:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2379:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2380:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2381:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2382:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2383:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
2384:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
2385:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* parameters.                                                              */
2386:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
2387:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2388:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Update ADC state machine to error */
2389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2390:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
2392:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2393:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2394:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process unlocked */
2395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2396:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2397:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
2398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
2399:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2400:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2401:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2402:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
2403:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2404:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive
2405:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters
2406:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting
2407:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         the ADC.
2408:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
2409:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
2410:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
2411:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   On this STM32 series, analog watchdog thresholds can be modified
2412:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         while ADC conversion is on going.
2413:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2414:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2415:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2416:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2417:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
2418:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2419:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2420:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
2421:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status
2422:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2423:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *Analog
ARM GAS  /tmp/ccPLPcMa.s 			page 146


2424:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
2425:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2426:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
2427:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
2428:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2429:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
2430:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2431:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
2432:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2433:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
2434:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2435:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
2436:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
2438:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2439:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2440:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Verify thresholds range */
2441:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
2442:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2443:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Case of oversampling enabled: depending on ratio and shift configuration,
2444:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        analog watchdog thresholds can be higher than ADC resolution.
2445:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        Verify if thresholds are within maximum thresholds range. */
2446:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
2447:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
2448:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2449:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
2450:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2451:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Verify if thresholds are within the selected ADC resolution */
2452:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
2453:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
2454:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2455:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2456:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process locked */
2457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_LOCK(hadc);
2458:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2459:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2460:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2461:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* conversion on going on ADC group regular:                                */
2462:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
2463:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2464:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2465:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Analog watchdog configuration */
2466:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
2467:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2468:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Configuration of analog watchdog:                                    */
2469:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*  - Set the analog watchdog enable mode: one or overall group of      */
2470:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*    channels.                                                         */
2471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
2472:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2473:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
2474:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
2475:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                           __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
2476:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
2477:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2478:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
2479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG)
2480:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
ARM GAS  /tmp/ccPLPcMa.s 			page 147


2481:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2482:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
2483:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
2484:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
2485:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2486:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2487:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Update state, clear previous result related to AWD1 */
2488:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
2489:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2490:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Clear flag ADC analog watchdog */
2491:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
2492:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
2493:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* (in case left enabled by previous ADC operations).                 */
2494:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       LL_ADC_ClearFlag_AWD1(hadc->Instance);
2495:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2496:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Configure ADC analog watchdog interrupt */
2497:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (AnalogWDGConfig->ITMode == ENABLE)
2498:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2499:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         LL_ADC_EnableIT_AWD1(hadc->Instance);
2500:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2501:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       else
2502:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2503:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         LL_ADC_DisableIT_AWD1(hadc->Instance);
2504:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2505:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2506:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
2507:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
2508:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
2510:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2511:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
2512:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Update AWD by bitfield to keep the possibility to monitor        */
2513:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* several channels by successive calls of this function.           */
2514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
2515:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig-
2517:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
2518:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           else
2519:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig-
2521:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
2522:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
2523:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2524:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
2525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_A
2526:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
2527:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2528:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
2529:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_A
2530:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
2531:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2532:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2533:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
2534:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2535:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update state, clear previous result related to AWD2 */
2536:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
2537:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 148


2538:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
2539:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
2540:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
2541:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
2542:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD2(hadc->Instance);
2543:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2544:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
2545:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
2546:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2547:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_EnableIT_AWD2(hadc->Instance);
2548:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2549:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else
2550:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2551:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_DisableIT_AWD2(hadc->Instance);
2552:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2553:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2554:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
2555:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       else
2556:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2557:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update state, clear previous result related to AWD3 */
2558:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
2559:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2560:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
2561:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
2562:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
2563:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
2564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD3(hadc->Instance);
2565:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2566:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
2567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
2568:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2569:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_EnableIT_AWD3(hadc->Instance);
2570:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2571:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else
2572:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_DisableIT_AWD3(hadc->Instance);
2574:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2575:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2576:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2577:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2578:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2579:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2580:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Analog watchdog thresholds configuration */
2581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
2582:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2583:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Shift the offset with respect to the selected ADC resolution:        */
2584:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
2585:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* are set to 0.                                                        */
2586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
2587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
2588:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2589:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Case of ADC_ANALOGWATCHDOG_2 and ADC_ANALOGWATCHDOG_3 */
2590:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else
2591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2592:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* No need to shift the offset with respect to the selected ADC resolution: */
2593:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
2594:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* are set to 0.                                                        */
ARM GAS  /tmp/ccPLPcMa.s 			page 149


2595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = AnalogWDGConfig->HighThreshold;
2596:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
2597:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2598:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2599:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Set ADC analog watchdog thresholds value of both thresholds high and low */
2600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresh
2601:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                   tmpAWDLowThresholdShifted);
2602:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2603:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Process unlocked */
2604:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2605:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2606:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return function status */
2607:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return tmp_hal_status;
2608:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2609:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2610:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2611:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2612:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @}
2613:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2614:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2615:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
2616:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *  @brief    ADC Peripheral State functions
2617:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *
2618:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** @verbatim
2619:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****  ===============================================================================
2620:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
2621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****  ===============================================================================
2622:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     [..]
2623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the
2624:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     peripheral.
2625:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Check the ADC state
2626:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (+) Check the ADC error code
2627:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2628:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** @endverbatim
2629:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
2630:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2631:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2632:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2633:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Return the ADC handle state.
2634:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be
2635:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         compared with states bits.
2636:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         For example:
2637:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_REG_BUSY) != 0UL) "
2638:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
2639:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2640:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
2641:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2642:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
2643:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
2644:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
2645:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2646:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2647:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return ADC handle state */
2648:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return hadc->State;
2649:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2650:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2651:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
ARM GAS  /tmp/ccPLPcMa.s 			page 150


2652:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Return the ADC error code.
2653:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2654:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
2655:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2656:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
2657:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
2658:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
2659:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2660:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2661:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return hadc->ErrorCode;
2662:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2663:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2665:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @}
2666:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2667:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2668:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2669:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @}
2670:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2671:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2672:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
2673:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @{
2674:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2675:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2676:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2677:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2678:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2679:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         stopped to disable the ADC.
2680:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param  hadc ADC handle
2681:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status.
2682:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2683:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
2684:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
2685:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
2686:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2687:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
2688:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2689:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2690:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2691:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* this function if not needed.                                             */
2692:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
2693:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2694:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2695:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2696:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
2697:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2698:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Stop ADC group regular conversion */
2699:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       LL_ADC_REG_StopConversion(hadc->Instance);
2700:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2701:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2702:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2703:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Get tick count */
2704:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2705:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2706:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
2707:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2708:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
ARM GAS  /tmp/ccPLPcMa.s 			page 151


2709:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2710:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update ADC state machine to error */
2711:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2712:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2713:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
2714:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2715:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2716:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         return HAL_ERROR;
2717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2718:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2719:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2720:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2721:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2722:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return HAL status */
2723:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return HAL_OK;
2724:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2725:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2726:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2727:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
2728:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
2729:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
2730:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2731:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status.
2732:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2733:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
2734:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
2735:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
2736:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
2737:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2738:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
2739:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
2740:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
2741:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
2742:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2743:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2744:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
2745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR
2746:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2747:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Update ADC state machine to error */
2748:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2749:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2750:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
2751:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2752:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2753:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       return HAL_ERROR;
2754:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2755:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2756:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Enable the ADC peripheral */
2757:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     LL_ADC_Enable(hadc->Instance);
2758:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2759:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INT
2760:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2761:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Delay for temperature sensor buffer stabilization time */
2762:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Wait loop initialization and execution */
2763:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Note: Variable divided by 2 to compensate partially              */
2764:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       CPU processing cycles, scaling in us split to not          */
2765:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /*       exceed 32 bits register capacity and handle low frequency. */
ARM GAS  /tmp/ccPLPcMa.s 			page 152


2766:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100
2767:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       while (wait_loop_index != 0UL)
2768:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2769:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         wait_loop_index--;
2770:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2771:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2772:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2773:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
2774:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* performed automatically by hardware and flag ADC ready is not set.     */
2775:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
2776:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2777:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Wait for ADC effectively enabled */
2778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       tickstart = HAL_GetTick();
2779:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2780:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
2781:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2782:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*  If ADEN bit is set less than 4 ADC clock cycles after the ADCAL bit
2783:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             has been cleared (after a calibration), ADEN bit is reset by the
2784:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             calibration logic.
2785:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             The workaround is to continue setting ADEN until ADRDY is becomes 1.
2786:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
2787:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             4 ADC clock cycle duration */
2788:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Note: Test of ADC enabled required due to hardware constraint to     */
2789:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /*       not enable ADC if already enabled.                             */
2790:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2791:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2792:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           LL_ADC_Enable(hadc->Instance);
2793:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2794:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
2796:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2797:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Update ADC state machine to error */
2798:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2799:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2800:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
2801:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2802:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2803:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           return HAL_ERROR;
2804:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2805:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2806:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2807:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2808:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2809:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return HAL status */
2810:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return HAL_OK;
2811:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2812:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2813:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2814:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
2815:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2816:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   *         stopped.
2817:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hadc ADC handle
2818:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval HAL status.
2819:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2820:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
2821:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
2822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
ARM GAS  /tmp/ccPLPcMa.s 			page 153


2823:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
2824:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2825:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
2826:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
2827:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /*       disabled.                                                          */
2828:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
2829:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
2830:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      )
2831:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2832:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
2833:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
2834:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2835:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Disable the ADC peripheral */
2836:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       LL_ADC_Disable(hadc->Instance);
2837:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
2838:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2839:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
2840:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2841:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Update ADC state machine to error */
2842:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2843:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2844:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
2845:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2846:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2847:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       return HAL_ERROR;
2848:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2849:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2850:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2851:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Get tick count */
2852:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tickstart = HAL_GetTick();
2853:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2854:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
2855:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2856:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2857:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2858:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Update ADC state machine to error */
2859:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2860:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2861:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
2862:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2863:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2864:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         return HAL_ERROR;
2865:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2866:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2867:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2868:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2869:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Return HAL status */
2870:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   return HAL_OK;
2871:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2872:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2873:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2874:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  DMA transfer complete callback.
2875:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
2876:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
2877:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2878:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2879:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
ARM GAS  /tmp/ccPLPcMa.s 			page 154


2880:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2881:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2882:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2883:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2884:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
2885:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2886:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Set ADC state */
2887:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
2888:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2889:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2890:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
2891:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* to disable interruption.                                               */
2892:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
2893:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
2894:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        )
2895:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2896:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2897:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2898:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
2899:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2900:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2901:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2902:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2903:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2904:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2905:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2906:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
2907:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2908:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2909:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Set ADC state */
2910:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
2911:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2912:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2913:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2914:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         else
2915:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
2916:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Change ADC state to error state */
2917:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2918:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2919:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
2920:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2921:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
2922:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
2923:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2924:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2925:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     /* Conversion complete callback */
2926:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2927:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2928:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
2929:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
2930:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2931:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2932:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   else /* DMA and-or internal error occurred */
2933:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
2934:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
2935:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2936:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Call HAL ADC Error Callback function */
ARM GAS  /tmp/ccPLPcMa.s 			page 155


2937:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2938:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
2939:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
2940:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
2941:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2942:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2943:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     else
2944:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
2945:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       /* Call ADC DMA error callback */
2946:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback(hdma);
2947:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
2948:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
2949:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
2950:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2951:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2952:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback.
2953:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
2954:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
2955:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2956:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
2957:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 1215              		.loc 1 2957 1 is_stmt 1 view -0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 0
 1218              		@ frame_needed = 0, uses_anonymous_args = 0
 1219              		.loc 1 2957 1 is_stmt 0 view .LVU337
 1220 0000 10B5     		push	{r4, lr}
 1221              	.LCFI4:
 1222              		.cfi_def_cfa_offset 8
 1223              		.cfi_offset 4, -8
 1224              		.cfi_offset 14, -4
2958:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2959:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1225              		.loc 1 2959 3 is_stmt 1 view .LVU338
 1226              		.loc 1 2959 22 is_stmt 0 view .LVU339
 1227 0002 806A     		ldr	r0, [r0, #40]
 1228              	.LVL81:
2960:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2961:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Half conversion callback */
2962:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2963:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->ConvHalfCpltCallback(hadc);
2964:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
2965:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 1229              		.loc 1 2965 3 is_stmt 1 view .LVU340
 1230 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 1231              	.LVL82:
2966:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2967:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1232              		.loc 1 2967 1 is_stmt 0 view .LVU341
 1233              		@ sp needed
 1234 0008 10BD     		pop	{r4, pc}
 1235              		.cfi_endproc
 1236              	.LFE478:
 1238              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 1239              		.align	1
 1240              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1241              		.syntax unified
ARM GAS  /tmp/ccPLPcMa.s 			page 156


 1242              		.code	16
 1243              		.thumb_func
 1244              		.fpu softvfp
 1246              	HAL_ADC_LevelOutOfWindowCallback:
 1247              	.LVL83:
 1248              	.LFB468:
2146:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1249              		.loc 1 2146 1 is_stmt 1 view -0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253              		@ link register save eliminated.
2148:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1254              		.loc 1 2148 3 view .LVU343
2153:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1255              		.loc 1 2153 1 is_stmt 0 view .LVU344
 1256              		@ sp needed
 1257 0000 7047     		bx	lr
 1258              		.cfi_endproc
 1259              	.LFE468:
 1261              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 1262              		.align	1
 1263              		.weak	HAL_ADC_ErrorCallback
 1264              		.syntax unified
 1265              		.code	16
 1266              		.thumb_func
 1267              		.fpu softvfp
 1269              	HAL_ADC_ErrorCallback:
 1270              	.LVL84:
 1271              	.LFB469:
2168:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1272              		.loc 1 2168 1 is_stmt 1 view -0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 0
 1275              		@ frame_needed = 0, uses_anonymous_args = 0
 1276              		@ link register save eliminated.
2170:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1277              		.loc 1 2170 3 view .LVU346
2175:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1278              		.loc 1 2175 1 is_stmt 0 view .LVU347
 1279              		@ sp needed
 1280 0000 7047     		bx	lr
 1281              		.cfi_endproc
 1282              	.LFE469:
 1284              		.section	.text.ADC_DMAError,"ax",%progbits
 1285              		.align	1
 1286              		.syntax unified
 1287              		.code	16
 1288              		.thumb_func
 1289              		.fpu softvfp
 1291              	ADC_DMAError:
 1292              	.LVL85:
 1293              	.LFB479:
2968:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2969:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** /**
2970:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @brief  DMA error callback.
2971:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
ARM GAS  /tmp/ccPLPcMa.s 			page 157


2972:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   * @retval None
2973:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   */
2974:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)
2975:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** {
 1294              		.loc 1 2975 1 is_stmt 1 view -0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 0, uses_anonymous_args = 0
 1298              		.loc 1 2975 1 is_stmt 0 view .LVU349
 1299 0000 10B5     		push	{r4, lr}
 1300              	.LCFI5:
 1301              		.cfi_def_cfa_offset 8
 1302              		.cfi_offset 4, -8
 1303              		.cfi_offset 14, -4
2976:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2977:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1304              		.loc 1 2977 3 is_stmt 1 view .LVU350
 1305              		.loc 1 2977 22 is_stmt 0 view .LVU351
 1306 0002 806A     		ldr	r0, [r0, #40]
 1307              	.LVL86:
2978:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2979:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Set ADC state */
2980:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 1308              		.loc 1 2980 3 is_stmt 1 view .LVU352
 1309 0004 836D     		ldr	r3, [r0, #88]
 1310 0006 4022     		movs	r2, #64
 1311 0008 1343     		orrs	r3, r2
 1312 000a 8365     		str	r3, [r0, #88]
2981:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2982:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2983:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 1313              		.loc 1 2983 3 view .LVU353
 1314 000c C36D     		ldr	r3, [r0, #92]
 1315 000e 3C3A     		subs	r2, r2, #60
 1316 0010 1343     		orrs	r3, r2
 1317 0012 C365     		str	r3, [r0, #92]
2984:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
2985:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Error callback */
2986:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2987:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2988:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #else
2989:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 1318              		.loc 1 2989 3 view .LVU354
 1319 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1320              	.LVL87:
2990:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2991:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1321              		.loc 1 2991 1 is_stmt 0 view .LVU355
 1322              		@ sp needed
 1323 0018 10BD     		pop	{r4, pc}
 1324              		.cfi_endproc
 1325              	.LFE479:
 1327              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1328              		.align	1
 1329              		.syntax unified
 1330              		.code	16
 1331              		.thumb_func
ARM GAS  /tmp/ccPLPcMa.s 			page 158


 1332              		.fpu softvfp
 1334              	ADC_DMAConvCplt:
 1335              	.LVL88:
 1336              	.LFB477:
2879:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1337              		.loc 1 2879 1 is_stmt 1 view -0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 0
 1340              		@ frame_needed = 0, uses_anonymous_args = 0
2879:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1341              		.loc 1 2879 1 is_stmt 0 view .LVU357
 1342 0000 10B5     		push	{r4, lr}
 1343              	.LCFI6:
 1344              		.cfi_def_cfa_offset 8
 1345              		.cfi_offset 4, -8
 1346              		.cfi_offset 14, -4
 1347 0002 0300     		movs	r3, r0
2881:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1348              		.loc 1 2881 3 is_stmt 1 view .LVU358
2881:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1349              		.loc 1 2881 22 is_stmt 0 view .LVU359
 1350 0004 806A     		ldr	r0, [r0, #40]
 1351              	.LVL89:
2884:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1352              		.loc 1 2884 3 is_stmt 1 view .LVU360
2884:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1353              		.loc 1 2884 12 is_stmt 0 view .LVU361
 1354 0006 826D     		ldr	r2, [r0, #88]
2884:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1355              		.loc 1 2884 20 view .LVU362
 1356 0008 5021     		movs	r1, #80
2884:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1357              		.loc 1 2884 6 view .LVU363
 1358 000a 1142     		tst	r1, r2
 1359 000c 2AD1     		bne	.L75
2887:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1360              		.loc 1 2887 5 is_stmt 1 view .LVU364
 1361 000e 826D     		ldr	r2, [r0, #88]
 1362 0010 8023     		movs	r3, #128
 1363              	.LVL90:
2887:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1364              		.loc 1 2887 5 is_stmt 0 view .LVU365
 1365 0012 9B00     		lsls	r3, r3, #2
 1366 0014 1343     		orrs	r3, r2
 1367 0016 8365     		str	r3, [r0, #88]
2892:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
 1368              		.loc 1 2892 5 is_stmt 1 view .LVU366
2892:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
 1369              		.loc 1 2892 10 is_stmt 0 view .LVU367
 1370 0018 0368     		ldr	r3, [r0]
 1371              	.LVL91:
 1372              	.LBB148:
 1373              	.LBI148:
2396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 1374              		.loc 2 2396 26 is_stmt 1 view .LVU368
 1375              	.LBB149:
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
ARM GAS  /tmp/ccPLPcMa.s 			page 159


 1376              		.loc 2 2398 3 view .LVU369
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1377              		.loc 2 2398 12 is_stmt 0 view .LVU370
 1378 001a D968     		ldr	r1, [r3, #12]
 1379 001c C022     		movs	r2, #192
 1380 001e 1201     		lsls	r2, r2, #4
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1381              		.loc 2 2398 106 view .LVU371
 1382 0020 1142     		tst	r1, r2
 1383 0022 13D1     		bne	.L76
 1384              	.LVL92:
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1385              		.loc 2 2398 106 view .LVU372
 1386              	.LBE149:
 1387              	.LBE148:
2893:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        )
 1388              		.loc 1 2893 23 view .LVU373
 1389 0024 827E     		ldrb	r2, [r0, #26]
2893:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        )
 1390              		.loc 1 2893 9 view .LVU374
 1391 0026 002A     		cmp	r2, #0
 1392 0028 10D1     		bne	.L76
2897:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1393              		.loc 1 2897 7 is_stmt 1 view .LVU375
2897:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1394              		.loc 1 2897 11 is_stmt 0 view .LVU376
 1395 002a 1A68     		ldr	r2, [r3]
2897:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1396              		.loc 1 2897 10 view .LVU377
 1397 002c 1207     		lsls	r2, r2, #28
 1398 002e 0DD5     		bpl	.L76
2901:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 1399              		.loc 1 2901 9 is_stmt 1 view .LVU378
 1400              	.LVL93:
 1401              	.LBB150:
 1402              	.LBI150:
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 1403              		.loc 2 4427 26 view .LVU379
 1404              	.LBB151:
 1405              		.loc 2 4429 3 view .LVU380
 1406              		.loc 2 4429 12 is_stmt 0 view .LVU381
 1407 0030 9A68     		ldr	r2, [r3, #8]
 1408              		.loc 2 4429 74 view .LVU382
 1409 0032 5207     		lsls	r2, r2, #29
 1410 0034 0DD4     		bmi	.L77
 1411              	.LVL94:
 1412              		.loc 2 4429 74 view .LVU383
 1413              	.LBE151:
 1414              	.LBE150:
2907:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1415              		.loc 1 2907 11 is_stmt 1 view .LVU384
 1416 0036 5A68     		ldr	r2, [r3, #4]
 1417 0038 0C21     		movs	r1, #12
 1418 003a 8A43     		bics	r2, r1
 1419 003c 5A60     		str	r2, [r3, #4]
2910:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 1420              		.loc 1 2910 11 view .LVU385
ARM GAS  /tmp/ccPLPcMa.s 			page 160


 1421 003e 836D     		ldr	r3, [r0, #88]
 1422 0040 0E4A     		ldr	r2, .L81
 1423 0042 1340     		ands	r3, r2
 1424 0044 0432     		adds	r2, r2, #4
 1425 0046 FF32     		adds	r2, r2, #255
 1426 0048 1343     		orrs	r3, r2
 1427 004a 8365     		str	r3, [r0, #88]
 1428              	.L76:
2929:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1429              		.loc 1 2929 5 view .LVU386
 1430 004c FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1431              	.LVL95:
 1432              	.L74:
2949:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1433              		.loc 1 2949 1 is_stmt 0 view .LVU387
 1434              		@ sp needed
 1435 0050 10BD     		pop	{r4, pc}
 1436              	.LVL96:
 1437              	.L77:
2917:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1438              		.loc 1 2917 11 is_stmt 1 view .LVU388
 1439 0052 836D     		ldr	r3, [r0, #88]
 1440 0054 2022     		movs	r2, #32
 1441 0056 1343     		orrs	r3, r2
 1442 0058 8365     		str	r3, [r0, #88]
2920:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 1443              		.loc 1 2920 11 view .LVU389
 1444 005a C36D     		ldr	r3, [r0, #92]
 1445 005c 1F3A     		subs	r2, r2, #31
 1446 005e 1343     		orrs	r3, r2
 1447 0060 C365     		str	r3, [r0, #92]
 1448 0062 F3E7     		b	.L76
 1449              	.LVL97:
 1450              	.L75:
2934:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1451              		.loc 1 2934 5 view .LVU390
2934:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1452              		.loc 1 2934 14 is_stmt 0 view .LVU391
 1453 0064 826D     		ldr	r2, [r0, #88]
2934:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1454              		.loc 1 2934 8 view .LVU392
 1455 0066 D206     		lsls	r2, r2, #27
 1456 0068 04D4     		bmi	.L80
2946:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 1457              		.loc 1 2946 7 is_stmt 1 view .LVU393
2946:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 1458              		.loc 1 2946 11 is_stmt 0 view .LVU394
 1459 006a 026D     		ldr	r2, [r0, #80]
2946:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 1460              		.loc 1 2946 23 view .LVU395
 1461 006c 526B     		ldr	r2, [r2, #52]
2946:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 1462              		.loc 1 2946 7 view .LVU396
 1463 006e 1800     		movs	r0, r3
 1464              	.LVL98:
2946:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 1465              		.loc 1 2946 7 view .LVU397
ARM GAS  /tmp/ccPLPcMa.s 			page 161


 1466 0070 9047     		blx	r2
 1467              	.LVL99:
2949:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1468              		.loc 1 2949 1 view .LVU398
 1469 0072 EDE7     		b	.L74
 1470              	.LVL100:
 1471              	.L80:
2940:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1472              		.loc 1 2940 7 is_stmt 1 view .LVU399
 1473 0074 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1474              	.LVL101:
2940:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1475              		.loc 1 2940 7 is_stmt 0 view .LVU400
 1476 0078 EAE7     		b	.L74
 1477              	.L82:
 1478 007a C046     		.align	2
 1479              	.L81:
 1480 007c FEFEFFFF 		.word	-258
 1481              		.cfi_endproc
 1482              	.LFE477:
 1484              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1485              		.align	1
 1486              		.global	HAL_ADC_IRQHandler
 1487              		.syntax unified
 1488              		.code	16
 1489              		.thumb_func
 1490              		.fpu softvfp
 1492              	HAL_ADC_IRQHandler:
 1493              	.LVL102:
 1494              	.LFB465:
1906:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 1495              		.loc 1 1906 1 is_stmt 1 view -0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 0
 1498              		@ frame_needed = 0, uses_anonymous_args = 0
1906:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 1499              		.loc 1 1906 1 is_stmt 0 view .LVU402
 1500 0000 70B5     		push	{r4, r5, r6, lr}
 1501              	.LCFI7:
 1502              		.cfi_def_cfa_offset 16
 1503              		.cfi_offset 4, -16
 1504              		.cfi_offset 5, -12
 1505              		.cfi_offset 6, -8
 1506              		.cfi_offset 14, -4
 1507 0002 0400     		movs	r4, r0
1907:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
 1508              		.loc 1 1907 3 is_stmt 1 view .LVU403
 1509              	.LVL103:
1908:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 1510              		.loc 1 1908 3 view .LVU404
1908:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 1511              		.loc 1 1908 26 is_stmt 0 view .LVU405
 1512 0004 0368     		ldr	r3, [r0]
1908:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 1513              		.loc 1 1908 12 view .LVU406
 1514 0006 1E68     		ldr	r6, [r3]
 1515              	.LVL104:
ARM GAS  /tmp/ccPLPcMa.s 			page 162


1909:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1516              		.loc 1 1909 3 is_stmt 1 view .LVU407
1909:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1517              		.loc 1 1909 12 is_stmt 0 view .LVU408
 1518 0008 5D68     		ldr	r5, [r3, #4]
 1519              	.LVL105:
1912:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 1520              		.loc 1 1912 3 is_stmt 1 view .LVU409
1913:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1521              		.loc 1 1913 3 view .LVU410
1916:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1522              		.loc 1 1916 3 view .LVU411
1916:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1523              		.loc 1 1916 6 is_stmt 0 view .LVU412
 1524 000a B307     		lsls	r3, r6, #30
 1525 000c 0FD5     		bpl	.L84
1916:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1526              		.loc 1 1916 54 discriminator 1 view .LVU413
 1527 000e AB07     		lsls	r3, r5, #30
 1528 0010 0DD5     		bpl	.L84
1919:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1529              		.loc 1 1919 5 is_stmt 1 view .LVU414
1919:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1530              		.loc 1 1919 14 is_stmt 0 view .LVU415
 1531 0012 836D     		ldr	r3, [r0, #88]
1919:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1532              		.loc 1 1919 8 view .LVU416
 1533 0014 DB06     		lsls	r3, r3, #27
 1534 0016 04D4     		bmi	.L85
1922:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 1535              		.loc 1 1922 7 is_stmt 1 view .LVU417
 1536 0018 826D     		ldr	r2, [r0, #88]
 1537 001a 8023     		movs	r3, #128
 1538 001c 1B01     		lsls	r3, r3, #4
 1539 001e 1343     		orrs	r3, r2
 1540 0020 8365     		str	r3, [r0, #88]
 1541              	.L85:
1929:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1542              		.loc 1 1929 5 view .LVU418
 1543 0022 2000     		movs	r0, r4
 1544              	.LVL106:
1929:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1545              		.loc 1 1929 5 is_stmt 0 view .LVU419
 1546 0024 FFF7FEFF 		bl	HAL_ADCEx_EndOfSamplingCallback
 1547              	.LVL107:
1933:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 1548              		.loc 1 1933 5 is_stmt 1 view .LVU420
 1549 0028 2368     		ldr	r3, [r4]
 1550 002a 0222     		movs	r2, #2
 1551 002c 1A60     		str	r2, [r3]
 1552              	.L84:
1937:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1553              		.loc 1 1937 3 view .LVU421
1937:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1554              		.loc 1 1937 6 is_stmt 0 view .LVU422
 1555 002e 7307     		lsls	r3, r6, #29
 1556 0030 01D5     		bpl	.L86
ARM GAS  /tmp/ccPLPcMa.s 			page 163


1937:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1557              		.loc 1 1937 51 discriminator 1 view .LVU423
 1558 0032 6B07     		lsls	r3, r5, #29
 1559 0034 03D4     		bmi	.L87
 1560              	.L86:
1937:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1561              		.loc 1 1937 94 discriminator 3 view .LVU424
 1562 0036 3307     		lsls	r3, r6, #28
 1563 0038 29D5     		bpl	.L88
1938:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1564              		.loc 1 1938 51 view .LVU425
 1565 003a 2B07     		lsls	r3, r5, #28
 1566 003c 27D5     		bpl	.L88
 1567              	.L87:
1941:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1568              		.loc 1 1941 5 is_stmt 1 view .LVU426
1941:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1569              		.loc 1 1941 14 is_stmt 0 view .LVU427
 1570 003e A36D     		ldr	r3, [r4, #88]
1941:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1571              		.loc 1 1941 8 view .LVU428
 1572 0040 DB06     		lsls	r3, r3, #27
 1573 0042 04D4     		bmi	.L89
1944:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 1574              		.loc 1 1944 7 is_stmt 1 view .LVU429
 1575 0044 A26D     		ldr	r2, [r4, #88]
 1576 0046 8023     		movs	r3, #128
 1577 0048 9B00     		lsls	r3, r3, #2
 1578 004a 1343     		orrs	r3, r2
 1579 004c A365     		str	r3, [r4, #88]
 1580              	.L89:
1950:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
 1581              		.loc 1 1950 5 view .LVU430
1950:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
 1582              		.loc 1 1950 10 is_stmt 0 view .LVU431
 1583 004e 2368     		ldr	r3, [r4]
 1584              	.LVL108:
 1585              	.LBB152:
 1586              	.LBI152:
2396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 1587              		.loc 2 2396 26 is_stmt 1 view .LVU432
 1588              	.LBB153:
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1589              		.loc 2 2398 3 view .LVU433
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1590              		.loc 2 2398 12 is_stmt 0 view .LVU434
 1591 0050 D968     		ldr	r1, [r3, #12]
 1592 0052 C022     		movs	r2, #192
 1593 0054 1201     		lsls	r2, r2, #4
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1594              		.loc 2 2398 106 view .LVU435
 1595 0056 1142     		tst	r1, r2
 1596 0058 13D1     		bne	.L90
 1597              	.LVL109:
2398:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1598              		.loc 2 2398 106 view .LVU436
 1599              	.LBE153:
ARM GAS  /tmp/ccPLPcMa.s 			page 164


 1600              	.LBE152:
1951:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        )
 1601              		.loc 1 1951 23 view .LVU437
 1602 005a A27E     		ldrb	r2, [r4, #26]
1951:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****        )
 1603              		.loc 1 1951 9 view .LVU438
 1604 005c 002A     		cmp	r2, #0
 1605 005e 10D1     		bne	.L90
1955:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1606              		.loc 1 1955 7 is_stmt 1 view .LVU439
1955:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1607              		.loc 1 1955 11 is_stmt 0 view .LVU440
 1608 0060 1A68     		ldr	r2, [r3]
1955:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1609              		.loc 1 1955 10 view .LVU441
 1610 0062 1207     		lsls	r2, r2, #28
 1611 0064 0DD5     		bpl	.L90
1959:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 1612              		.loc 1 1959 9 is_stmt 1 view .LVU442
 1613              	.LVL110:
 1614              	.LBB154:
 1615              	.LBI154:
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 1616              		.loc 2 4427 26 view .LVU443
 1617              	.LBB155:
 1618              		.loc 2 4429 3 view .LVU444
 1619              		.loc 2 4429 12 is_stmt 0 view .LVU445
 1620 0066 9A68     		ldr	r2, [r3, #8]
 1621              		.loc 2 4429 74 view .LVU446
 1622 0068 5207     		lsls	r2, r2, #29
 1623 006a 3BD4     		bmi	.L91
 1624              	.LVL111:
 1625              		.loc 2 4429 74 view .LVU447
 1626              	.LBE155:
 1627              	.LBE154:
1965:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1628              		.loc 1 1965 11 is_stmt 1 view .LVU448
 1629 006c 5A68     		ldr	r2, [r3, #4]
 1630 006e 0C21     		movs	r1, #12
 1631 0070 8A43     		bics	r2, r1
 1632 0072 5A60     		str	r2, [r3, #4]
1968:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 1633              		.loc 1 1968 11 view .LVU449
 1634 0074 A36D     		ldr	r3, [r4, #88]
 1635 0076 374A     		ldr	r2, .L103
 1636 0078 1340     		ands	r3, r2
 1637 007a 0432     		adds	r2, r2, #4
 1638 007c FF32     		adds	r2, r2, #255
 1639 007e 1343     		orrs	r3, r2
 1640 0080 A365     		str	r3, [r4, #88]
 1641              	.L90:
1991:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1642              		.loc 1 1991 5 view .LVU450
 1643 0082 2000     		movs	r0, r4
 1644 0084 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1645              	.LVL112:
1999:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
ARM GAS  /tmp/ccPLPcMa.s 			page 165


 1646              		.loc 1 1999 5 view .LVU451
 1647 0088 2368     		ldr	r3, [r4]
 1648 008a 0C22     		movs	r2, #12
 1649 008c 1A60     		str	r2, [r3]
 1650              	.L88:
2003:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1651              		.loc 1 2003 3 view .LVU452
2003:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1652              		.loc 1 2003 6 is_stmt 0 view .LVU453
 1653 008e 3306     		lsls	r3, r6, #24
 1654 0090 01D5     		bpl	.L92
2003:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1655              		.loc 1 2003 52 discriminator 1 view .LVU454
 1656 0092 2B06     		lsls	r3, r5, #24
 1657 0094 2FD4     		bmi	.L99
 1658              	.L92:
2020:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1659              		.loc 1 2020 3 is_stmt 1 view .LVU455
2020:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1660              		.loc 1 2020 6 is_stmt 0 view .LVU456
 1661 0096 F305     		lsls	r3, r6, #23
 1662 0098 01D5     		bpl	.L93
2020:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1663              		.loc 1 2020 52 discriminator 1 view .LVU457
 1664 009a EB05     		lsls	r3, r5, #23
 1665 009c 37D4     		bmi	.L100
 1666              	.L93:
2037:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1667              		.loc 1 2037 3 is_stmt 1 view .LVU458
2037:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1668              		.loc 1 2037 6 is_stmt 0 view .LVU459
 1669 009e B305     		lsls	r3, r6, #22
 1670 00a0 01D5     		bpl	.L94
2037:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1671              		.loc 1 2037 52 discriminator 1 view .LVU460
 1672 00a2 AB05     		lsls	r3, r5, #22
 1673 00a4 40D4     		bmi	.L101
 1674              	.L94:
2054:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1675              		.loc 1 2054 3 is_stmt 1 view .LVU461
2054:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1676              		.loc 1 2054 6 is_stmt 0 view .LVU462
 1677 00a6 F306     		lsls	r3, r6, #27
 1678 00a8 17D5     		bpl	.L95
2054:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1679              		.loc 1 2054 50 discriminator 1 view .LVU463
 1680 00aa EB06     		lsls	r3, r5, #27
 1681 00ac 15D5     		bpl	.L95
2062:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1682              		.loc 1 2062 5 is_stmt 1 view .LVU464
2062:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1683              		.loc 1 2062 8 is_stmt 0 view .LVU465
 1684 00ae 236B     		ldr	r3, [r4, #48]
 1685 00b0 002B     		cmp	r3, #0
 1686 00b2 03D0     		beq	.L96
2069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1687              		.loc 1 2069 7 is_stmt 1 view .LVU466
ARM GAS  /tmp/ccPLPcMa.s 			page 166


2069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1688              		.loc 1 2069 11 is_stmt 0 view .LVU467
 1689 00b4 2368     		ldr	r3, [r4]
 1690              	.LVL113:
 1691              	.LBB156:
 1692              	.LBI156:
3380:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 1693              		.loc 2 3380 26 is_stmt 1 view .LVU468
 1694              	.LBB157:
3382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1695              		.loc 2 3382 3 view .LVU469
3382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1696              		.loc 2 3382 21 is_stmt 0 view .LVU470
 1697 00b6 DB68     		ldr	r3, [r3, #12]
 1698              	.LVL114:
3382:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 1699              		.loc 2 3382 21 view .LVU471
 1700              	.LBE157:
 1701              	.LBE156:
2069:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 1702              		.loc 1 2069 10 view .LVU472
 1703 00b8 9B07     		lsls	r3, r3, #30
 1704 00ba 0BD0     		beq	.L97
 1705              	.L96:
 1706              	.LVL115:
2078:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1707              		.loc 1 2078 7 is_stmt 1 view .LVU473
 1708 00bc A26D     		ldr	r2, [r4, #88]
 1709 00be 8023     		movs	r3, #128
 1710 00c0 DB00     		lsls	r3, r3, #3
 1711 00c2 1343     		orrs	r3, r2
 1712 00c4 A365     		str	r3, [r4, #88]
2081:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1713              		.loc 1 2081 7 view .LVU474
 1714 00c6 E36D     		ldr	r3, [r4, #92]
 1715 00c8 0222     		movs	r2, #2
 1716 00ca 1343     		orrs	r3, r2
 1717 00cc E365     		str	r3, [r4, #92]
2091:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1718              		.loc 1 2091 7 view .LVU475
 1719 00ce 2000     		movs	r0, r4
 1720 00d0 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1721              	.LVL116:
 1722              	.L97:
2096:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 1723              		.loc 1 2096 5 view .LVU476
 1724 00d4 2368     		ldr	r3, [r4]
 1725 00d6 1022     		movs	r2, #16
 1726 00d8 1A60     		str	r2, [r3]
 1727              	.L95:
2100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1728              		.loc 1 2100 3 view .LVU477
2100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1729              		.loc 1 2100 6 is_stmt 0 view .LVU478
 1730 00da B304     		lsls	r3, r6, #18
 1731 00dc 01D5     		bpl	.L83
2100:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
ARM GAS  /tmp/ccPLPcMa.s 			page 167


 1732              		.loc 1 2100 54 discriminator 1 view .LVU479
 1733 00de AB04     		lsls	r3, r5, #18
 1734 00e0 2FD4     		bmi	.L102
 1735              	.L83:
2108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1736              		.loc 1 2108 1 view .LVU480
 1737              		@ sp needed
 1738              	.LVL117:
 1739              	.LVL118:
 1740              	.LVL119:
2108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1741              		.loc 1 2108 1 view .LVU481
 1742 00e2 70BD     		pop	{r4, r5, r6, pc}
 1743              	.LVL120:
 1744              	.L91:
1975:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1745              		.loc 1 1975 11 is_stmt 1 view .LVU482
 1746 00e4 A36D     		ldr	r3, [r4, #88]
 1747 00e6 2022     		movs	r2, #32
 1748 00e8 1343     		orrs	r3, r2
 1749 00ea A365     		str	r3, [r4, #88]
1978:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 1750              		.loc 1 1978 11 view .LVU483
 1751 00ec E36D     		ldr	r3, [r4, #92]
 1752 00ee 1F3A     		subs	r2, r2, #31
 1753 00f0 1343     		orrs	r3, r2
 1754 00f2 E365     		str	r3, [r4, #92]
 1755 00f4 C5E7     		b	.L90
 1756              	.L99:
2006:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1757              		.loc 1 2006 5 view .LVU484
 1758 00f6 A26D     		ldr	r2, [r4, #88]
 1759 00f8 8023     		movs	r3, #128
 1760 00fa 5B02     		lsls	r3, r3, #9
 1761 00fc 1343     		orrs	r3, r2
 1762 00fe A365     		str	r3, [r4, #88]
2012:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1763              		.loc 1 2012 5 view .LVU485
 1764 0100 2000     		movs	r0, r4
 1765 0102 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1766              	.LVL121:
2016:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 1767              		.loc 1 2016 5 view .LVU486
 1768 0106 2368     		ldr	r3, [r4]
 1769 0108 8022     		movs	r2, #128
 1770 010a 1A60     		str	r2, [r3]
 1771 010c C3E7     		b	.L92
 1772              	.L100:
2023:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1773              		.loc 1 2023 5 view .LVU487
 1774 010e A26D     		ldr	r2, [r4, #88]
 1775 0110 8023     		movs	r3, #128
 1776 0112 9B02     		lsls	r3, r3, #10
 1777 0114 1343     		orrs	r3, r2
 1778 0116 A365     		str	r3, [r4, #88]
2029:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1779              		.loc 1 2029 5 view .LVU488
ARM GAS  /tmp/ccPLPcMa.s 			page 168


 1780 0118 2000     		movs	r0, r4
 1781 011a FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow2Callback
 1782              	.LVL122:
2033:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 1783              		.loc 1 2033 5 view .LVU489
 1784 011e 2368     		ldr	r3, [r4]
 1785 0120 8022     		movs	r2, #128
 1786 0122 5200     		lsls	r2, r2, #1
 1787 0124 1A60     		str	r2, [r3]
 1788 0126 BAE7     		b	.L93
 1789              	.L101:
2040:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1790              		.loc 1 2040 5 view .LVU490
 1791 0128 A26D     		ldr	r2, [r4, #88]
 1792 012a 8023     		movs	r3, #128
 1793 012c DB02     		lsls	r3, r3, #11
 1794 012e 1343     		orrs	r3, r2
 1795 0130 A365     		str	r3, [r4, #88]
2046:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1796              		.loc 1 2046 5 view .LVU491
 1797 0132 2000     		movs	r0, r4
 1798 0134 FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow3Callback
 1799              	.LVL123:
2050:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 1800              		.loc 1 2050 5 view .LVU492
 1801 0138 2368     		ldr	r3, [r4]
 1802 013a 8022     		movs	r2, #128
 1803 013c 9200     		lsls	r2, r2, #2
 1804 013e 1A60     		str	r2, [r3]
 1805 0140 B1E7     		b	.L94
 1806              	.LVL124:
 1807              	.L102:
2103:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1808              		.loc 1 2103 5 view .LVU493
 1809 0142 2000     		movs	r0, r4
 1810 0144 FFF7FEFF 		bl	HAL_ADCEx_ChannelConfigReadyCallback
 1811              	.LVL125:
2106:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 1812              		.loc 1 2106 5 view .LVU494
 1813 0148 2368     		ldr	r3, [r4]
 1814 014a 8022     		movs	r2, #128
 1815 014c 9201     		lsls	r2, r2, #6
 1816 014e 1A60     		str	r2, [r3]
2108:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1817              		.loc 1 2108 1 is_stmt 0 view .LVU495
 1818 0150 C7E7     		b	.L83
 1819              	.L104:
 1820 0152 C046     		.align	2
 1821              	.L103:
 1822 0154 FEFEFFFF 		.word	-258
 1823              		.cfi_endproc
 1824              	.LFE465:
 1826              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 1827              		.align	1
 1828              		.global	HAL_ADC_ConfigChannel
 1829              		.syntax unified
 1830              		.code	16
ARM GAS  /tmp/ccPLPcMa.s 			page 169


 1831              		.thumb_func
 1832              		.fpu softvfp
 1834              	HAL_ADC_ConfigChannel:
 1835              	.LVL126:
 1836              	.LFB470:
2214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1837              		.loc 1 2214 1 is_stmt 1 view -0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 8
 1840              		@ frame_needed = 0, uses_anonymous_args = 0
2214:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1841              		.loc 1 2214 1 is_stmt 0 view .LVU497
 1842 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1843              	.LCFI8:
 1844              		.cfi_def_cfa_offset 20
 1845              		.cfi_offset 4, -20
 1846              		.cfi_offset 5, -16
 1847              		.cfi_offset 6, -12
 1848              		.cfi_offset 7, -8
 1849              		.cfi_offset 14, -4
 1850 0002 83B0     		sub	sp, sp, #12
 1851              	.LCFI9:
 1852              		.cfi_def_cfa_offset 32
 1853 0004 0400     		movs	r4, r0
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 1854              		.loc 1 2215 3 is_stmt 1 view .LVU498
 1855              	.LVL127:
2216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 1856              		.loc 1 2216 3 view .LVU499
2217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1857              		.loc 1 2217 3 view .LVU500
2217:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1858              		.loc 1 2217 17 is_stmt 0 view .LVU501
 1859 0006 0023     		movs	r3, #0
 1860 0008 0193     		str	r3, [sp, #4]
2220:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 1861              		.loc 1 2220 3 is_stmt 1 view .LVU502
2221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));
 1862              		.loc 1 2221 3 view .LVU503
2222:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1863              		.loc 1 2222 3 view .LVU504
2224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1864              		.loc 1 2224 3 view .LVU505
2224:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1865              		.loc 1 2224 18 is_stmt 0 view .LVU506
 1866 000a 0569     		ldr	r5, [r0, #16]
2231:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1867              		.loc 1 2231 5 is_stmt 1 view .LVU507
2233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 1868              		.loc 1 2233 5 view .LVU508
2237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1869              		.loc 1 2237 3 view .LVU509
2237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1870              		.loc 1 2237 3 view .LVU510
 1871 000c 5433     		adds	r3, r3, #84
 1872 000e C35C     		ldrb	r3, [r0, r3]
 1873 0010 012B     		cmp	r3, #1
ARM GAS  /tmp/ccPLPcMa.s 			page 170


 1874 0012 00D1     		bne	.LCB1754
 1875 0014 30E1     		b	.L123	@long jump
 1876              	.LCB1754:
2237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1877              		.loc 1 2237 3 discriminator 2 view .LVU511
 1878 0016 5423     		movs	r3, #84
 1879 0018 0122     		movs	r2, #1
 1880 001a C254     		strb	r2, [r0, r3]
2237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1881              		.loc 1 2237 3 discriminator 2 view .LVU512
2245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1882              		.loc 1 2245 3 discriminator 2 view .LVU513
2245:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 1883              		.loc 1 2245 7 is_stmt 0 discriminator 2 view .LVU514
 1884 001c 0068     		ldr	r0, [r0]
 1885              	.LVL128:
 1886              	.LBB158:
 1887              	.LBI158:
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 1888              		.loc 2 4427 26 is_stmt 1 discriminator 2 view .LVU515
 1889              	.LBB159:
 1890              		.loc 2 4429 3 discriminator 2 view .LVU516
 1891              		.loc 2 4429 12 is_stmt 0 discriminator 2 view .LVU517
 1892 001e 8368     		ldr	r3, [r0, #8]
 1893 0020 0332     		adds	r2, r2, #3
 1894 0022 1600     		movs	r6, r2
 1895 0024 1E40     		ands	r6, r3
 1896              		.loc 2 4429 74 discriminator 2 view .LVU518
 1897 0026 1A42     		tst	r2, r3
 1898 0028 09D0     		beq	.L107
 1899              	.LVL129:
 1900              		.loc 2 4429 74 discriminator 2 view .LVU519
 1901              	.LBE159:
 1902              	.LBE158:
2389:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1903              		.loc 1 2389 5 is_stmt 1 view .LVU520
 1904 002a A36D     		ldr	r3, [r4, #88]
 1905 002c 1C32     		adds	r2, r2, #28
 1906 002e 1343     		orrs	r3, r2
 1907 0030 A365     		str	r3, [r4, #88]
2391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 1908              		.loc 1 2391 5 view .LVU521
 1909              	.LVL130:
2391:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 1910              		.loc 1 2391 20 is_stmt 0 view .LVU522
 1911 0032 0120     		movs	r0, #1
 1912              	.LVL131:
 1913              	.L108:
2395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1914              		.loc 1 2395 3 is_stmt 1 view .LVU523
2395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1915              		.loc 1 2395 3 view .LVU524
 1916 0034 5423     		movs	r3, #84
 1917 0036 0022     		movs	r2, #0
 1918 0038 E254     		strb	r2, [r4, r3]
2395:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1919              		.loc 1 2395 3 view .LVU525
ARM GAS  /tmp/ccPLPcMa.s 			page 171


2398:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 1920              		.loc 1 2398 3 view .LVU526
 1921              	.LVL132:
 1922              	.L106:
2399:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1923              		.loc 1 2399 1 is_stmt 0 view .LVU527
 1924 003a 03B0     		add	sp, sp, #12
 1925              		@ sp needed
 1926              	.LVL133:
2399:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 1927              		.loc 1 2399 1 view .LVU528
 1928 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 1929              	.LVL134:
 1930              	.L107:
2254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1931              		.loc 1 2254 5 is_stmt 1 view .LVU529
2254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1932              		.loc 1 2254 16 is_stmt 0 view .LVU530
 1933 003e 4B68     		ldr	r3, [r1, #4]
2254:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 1934              		.loc 1 2254 8 view .LVU531
 1935 0040 022B     		cmp	r3, #2
 1936 0042 00D1     		bne	.LCB1823
 1937 0044 D6E0     		b	.L109	@long jump
 1938              	.LCB1823:
2262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1939              		.loc 1 2262 7 is_stmt 1 view .LVU532
2262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1940              		.loc 1 2262 10 is_stmt 0 view .LVU533
 1941 0046 8022     		movs	r2, #128
 1942 0048 1206     		lsls	r2, r2, #24
 1943 004a 9542     		cmp	r5, r2
 1944 004c 26D0     		beq	.L110
2262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1945              		.loc 1 2262 65 discriminator 1 view .LVU534
 1946 004e 8B4A     		ldr	r2, .L154
 1947 0050 9542     		cmp	r5, r2
 1948 0052 23D0     		beq	.L110
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 1949              		.loc 1 2275 9 is_stmt 1 view .LVU535
 1950 0054 1F22     		movs	r2, #31
 1951 0056 1340     		ands	r3, r2
 1952 0058 103A     		subs	r2, r2, #16
 1953 005a 9A40     		lsls	r2, r2, r3
 1954 005c 256E     		ldr	r5, [r4, #96]
 1955 005e 9543     		bics	r5, r2
 1956 0060 2A00     		movs	r2, r5
 1957 0062 0D68     		ldr	r5, [r1]
 1958 0064 6F03     		lsls	r7, r5, #13
 1959 0066 2FD1     		bne	.L113
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 1960              		.loc 1 2275 9 is_stmt 0 discriminator 1 view .LVU536
 1961 0068 AD0E     		lsrs	r5, r5, #26
 1962 006a 1F26     		movs	r6, #31
 1963 006c 2E40     		ands	r6, r5
 1964              	.L114:
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
ARM GAS  /tmp/ccPLPcMa.s 			page 172


 1965              		.loc 1 2275 9 discriminator 80 view .LVU537
 1966 006e 9E40     		lsls	r6, r6, r3
 1967 0070 1643     		orrs	r6, r2
 1968 0072 2666     		str	r6, [r4, #96]
2283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 1969              		.loc 1 2283 9 is_stmt 1 discriminator 80 view .LVU538
2283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 1970              		.loc 1 2283 22 is_stmt 0 discriminator 80 view .LVU539
 1971 0074 4D68     		ldr	r5, [r1, #4]
2283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 1972              		.loc 1 2283 29 discriminator 80 view .LVU540
 1973 0076 AB08     		lsrs	r3, r5, #2
2283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 1974              		.loc 1 2283 37 discriminator 80 view .LVU541
 1975 0078 0133     		adds	r3, r3, #1
2283:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 1976              		.loc 1 2283 12 discriminator 80 view .LVU542
 1977 007a E269     		ldr	r2, [r4, #28]
 1978 007c 9342     		cmp	r3, r2
 1979 007e 13D8     		bhi	.L112
2285:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 1980              		.loc 1 2285 11 is_stmt 1 view .LVU543
 1981              	.LVL135:
 1982              	.LBB160:
 1983              	.LBI160:
2806:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 1984              		.loc 2 2806 22 view .LVU544
 1985              	.LBB161:
2812:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 1986              		.loc 2 2812 3 view .LVU545
 1987 0080 826A     		ldr	r2, [r0, #40]
 1988 0082 1F23     		movs	r3, #31
 1989 0084 1D40     		ands	r5, r3
 1990              	.LVL136:
2812:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 1991              		.loc 2 2812 3 is_stmt 0 view .LVU546
 1992 0086 103B     		subs	r3, r3, #16
 1993 0088 1E00     		movs	r6, r3
 1994 008a AE40     		lsls	r6, r6, r5
 1995 008c B243     		bics	r2, r6
 1996 008e 0E68     		ldr	r6, [r1]
 1997 0090 B60E     		lsrs	r6, r6, #26
 1998 0092 3340     		ands	r3, r6
 1999 0094 AB40     		lsls	r3, r3, r5
 2000 0096 1343     		orrs	r3, r2
 2001 0098 8362     		str	r3, [r0, #40]
 2002              	.LVL137:
2815:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2003              		.loc 2 2815 1 view .LVU547
 2004 009a 05E0     		b	.L112
 2005              	.LVL138:
 2006              	.L110:
2815:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2007              		.loc 2 2815 1 view .LVU548
 2008              	.LBE161:
 2009              	.LBE160:
2267:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
ARM GAS  /tmp/ccPLPcMa.s 			page 173


 2010              		.loc 1 2267 9 is_stmt 1 view .LVU549
 2011              	.LBB162:
 2012              	.LBI162:
3072:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2013              		.loc 2 3072 22 view .LVU550
 2014              	.LBB163:
3076:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2015              		.loc 2 3076 3 view .LVU551
 2016 009c 826A     		ldr	r2, [r0, #40]
 2017 009e 0B68     		ldr	r3, [r1]
 2018 00a0 5B03     		lsls	r3, r3, #13
 2019 00a2 5B0B     		lsrs	r3, r3, #13
 2020 00a4 1343     		orrs	r3, r2
 2021 00a6 8362     		str	r3, [r0, #40]
 2022              	.LVL139:
 2023              	.L112:
3076:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2024              		.loc 2 3076 3 is_stmt 0 view .LVU552
 2025              	.LBE163:
 2026              	.LBE162:
2290:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2027              		.loc 1 2290 7 is_stmt 1 view .LVU553
 2028 00a8 2068     		ldr	r0, [r4]
 2029              	.LVL140:
 2030              	.LBB164:
 2031              	.LBI164:
3507:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2032              		.loc 2 3507 22 view .LVU554
 2033              	.LBB165:
3511:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
 2034              		.loc 2 3511 3 view .LVU555
 2035 00aa 4269     		ldr	r2, [r0, #20]
 2036 00ac 0B68     		ldr	r3, [r1]
 2037 00ae 1B02     		lsls	r3, r3, #8
 2038 00b0 9A43     		bics	r2, r3
 2039 00b2 8D68     		ldr	r5, [r1, #8]
 2040 00b4 2B40     		ands	r3, r5
 2041 00b6 724D     		ldr	r5, .L154+4
 2042 00b8 2B40     		ands	r3, r5
 2043 00ba 1343     		orrs	r3, r2
 2044 00bc 4361     		str	r3, [r0, #20]
 2045              	.LVL141:
3511:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
 2046              		.loc 2 3511 3 is_stmt 0 view .LVU556
 2047              	.LBE165:
 2048              	.LBE164:
2298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2049              		.loc 1 2298 7 is_stmt 1 view .LVU557
2298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2050              		.loc 1 2298 11 is_stmt 0 view .LVU558
 2051 00be 0B68     		ldr	r3, [r1]
2298:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2052              		.loc 1 2298 10 view .LVU559
 2053 00c0 002B     		cmp	r3, #0
 2054 00c2 4FDB     		blt	.L146
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2055              		.loc 1 2215 21 view .LVU560
ARM GAS  /tmp/ccPLPcMa.s 			page 174


 2056 00c4 0020     		movs	r0, #0
 2057 00c6 B5E7     		b	.L108
 2058              	.L113:
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2059              		.loc 1 2275 9 discriminator 2 view .LVU561
 2060 00c8 EF07     		lsls	r7, r5, #31
 2061 00ca D0D4     		bmi	.L114
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2062              		.loc 1 2275 9 discriminator 4 view .LVU562
 2063 00cc AE07     		lsls	r6, r5, #30
 2064 00ce 27D4     		bmi	.L124
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2065              		.loc 1 2275 9 discriminator 6 view .LVU563
 2066 00d0 6E07     		lsls	r6, r5, #29
 2067 00d2 27D4     		bmi	.L125
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2068              		.loc 1 2275 9 discriminator 8 view .LVU564
 2069 00d4 2E07     		lsls	r6, r5, #28
 2070 00d6 27D4     		bmi	.L126
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2071              		.loc 1 2275 9 discriminator 10 view .LVU565
 2072 00d8 EE06     		lsls	r6, r5, #27
 2073 00da 27D4     		bmi	.L127
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2074              		.loc 1 2275 9 discriminator 12 view .LVU566
 2075 00dc AE06     		lsls	r6, r5, #26
 2076 00de 27D4     		bmi	.L128
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2077              		.loc 1 2275 9 discriminator 14 view .LVU567
 2078 00e0 6E06     		lsls	r6, r5, #25
 2079 00e2 27D4     		bmi	.L129
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2080              		.loc 1 2275 9 discriminator 16 view .LVU568
 2081 00e4 2E06     		lsls	r6, r5, #24
 2082 00e6 27D4     		bmi	.L130
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2083              		.loc 1 2275 9 discriminator 18 view .LVU569
 2084 00e8 EE05     		lsls	r6, r5, #23
 2085 00ea 27D4     		bmi	.L131
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2086              		.loc 1 2275 9 discriminator 20 view .LVU570
 2087 00ec AE05     		lsls	r6, r5, #22
 2088 00ee 27D4     		bmi	.L132
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2089              		.loc 1 2275 9 discriminator 22 view .LVU571
 2090 00f0 6E05     		lsls	r6, r5, #21
 2091 00f2 27D4     		bmi	.L133
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2092              		.loc 1 2275 9 discriminator 24 view .LVU572
 2093 00f4 2E05     		lsls	r6, r5, #20
 2094 00f6 27D4     		bmi	.L134
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2095              		.loc 1 2275 9 discriminator 26 view .LVU573
 2096 00f8 EE04     		lsls	r6, r5, #19
 2097 00fa 27D4     		bmi	.L135
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2098              		.loc 1 2275 9 discriminator 28 view .LVU574
ARM GAS  /tmp/ccPLPcMa.s 			page 175


 2099 00fc AE04     		lsls	r6, r5, #18
 2100 00fe 27D4     		bmi	.L136
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2101              		.loc 1 2275 9 discriminator 30 view .LVU575
 2102 0100 6E04     		lsls	r6, r5, #17
 2103 0102 27D4     		bmi	.L137
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2104              		.loc 1 2275 9 discriminator 32 view .LVU576
 2105 0104 2E04     		lsls	r6, r5, #16
 2106 0106 27D4     		bmi	.L138
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2107              		.loc 1 2275 9 discriminator 34 view .LVU577
 2108 0108 EE03     		lsls	r6, r5, #15
 2109 010a 27D4     		bmi	.L139
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2110              		.loc 1 2275 9 discriminator 36 view .LVU578
 2111 010c AE03     		lsls	r6, r5, #14
 2112 010e 27D4     		bmi	.L140
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2113              		.loc 1 2275 9 discriminator 38 view .LVU579
 2114 0110 8027     		movs	r7, #128
 2115 0112 FF02     		lsls	r7, r7, #11
 2116 0114 2E00     		movs	r6, r5
 2117 0116 3E40     		ands	r6, r7
 2118 0118 3D42     		tst	r5, r7
 2119 011a A8D0     		beq	.L114
2275:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (sConfig->Rank & 0x1FUL),
 2120              		.loc 1 2275 9 view .LVU580
 2121 011c 1226     		movs	r6, #18
 2122 011e A6E7     		b	.L114
 2123              	.L124:
 2124 0120 0126     		movs	r6, #1
 2125 0122 A4E7     		b	.L114
 2126              	.L125:
 2127 0124 0226     		movs	r6, #2
 2128 0126 A2E7     		b	.L114
 2129              	.L126:
 2130 0128 0326     		movs	r6, #3
 2131 012a A0E7     		b	.L114
 2132              	.L127:
 2133 012c 0426     		movs	r6, #4
 2134 012e 9EE7     		b	.L114
 2135              	.L128:
 2136 0130 0526     		movs	r6, #5
 2137 0132 9CE7     		b	.L114
 2138              	.L129:
 2139 0134 0626     		movs	r6, #6
 2140 0136 9AE7     		b	.L114
 2141              	.L130:
 2142 0138 0726     		movs	r6, #7
 2143 013a 98E7     		b	.L114
 2144              	.L131:
 2145 013c 0826     		movs	r6, #8
 2146 013e 96E7     		b	.L114
 2147              	.L132:
 2148 0140 0926     		movs	r6, #9
 2149 0142 94E7     		b	.L114
ARM GAS  /tmp/ccPLPcMa.s 			page 176


 2150              	.L133:
 2151 0144 0A26     		movs	r6, #10
 2152 0146 92E7     		b	.L114
 2153              	.L134:
 2154 0148 0B26     		movs	r6, #11
 2155 014a 90E7     		b	.L114
 2156              	.L135:
 2157 014c 0C26     		movs	r6, #12
 2158 014e 8EE7     		b	.L114
 2159              	.L136:
 2160 0150 0D26     		movs	r6, #13
 2161 0152 8CE7     		b	.L114
 2162              	.L137:
 2163 0154 0E26     		movs	r6, #14
 2164 0156 8AE7     		b	.L114
 2165              	.L138:
 2166 0158 0F26     		movs	r6, #15
 2167 015a 88E7     		b	.L114
 2168              	.L139:
 2169 015c 1026     		movs	r6, #16
 2170 015e 86E7     		b	.L114
 2171              	.L140:
 2172 0160 1126     		movs	r6, #17
 2173 0162 84E7     		b	.L114
 2174              	.L146:
2300:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2175              		.loc 1 2300 9 is_stmt 1 view .LVU581
 2176              	.LVL142:
 2177              	.LBB166:
 2178              	.LBI166:
1881:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2179              		.loc 2 1881 26 view .LVU582
 2180              	.LBB167:
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2181              		.loc 2 1883 3 view .LVU583
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2182              		.loc 2 1883 21 is_stmt 0 view .LVU584
 2183 0164 474A     		ldr	r2, .L154+8
 2184 0166 1168     		ldr	r1, [r2]
 2185              	.LVL143:
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2186              		.loc 2 1883 10 view .LVU585
 2187 0168 E022     		movs	r2, #224
 2188 016a 5204     		lsls	r2, r2, #17
 2189 016c 0A40     		ands	r2, r1
 2190              	.LVL144:
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2191              		.loc 2 1883 10 view .LVU586
 2192              	.LBE167:
 2193              	.LBE166:
2304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 2194              		.loc 1 2304 9 is_stmt 1 view .LVU587
2304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 2195              		.loc 1 2304 12 is_stmt 0 view .LVU588
 2196 016e 4648     		ldr	r0, .L154+12
 2197 0170 8342     		cmp	r3, r0
 2198 0172 07D0     		beq	.L147
ARM GAS  /tmp/ccPLPcMa.s 			page 177


 2199              	.L115:
2321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2200              		.loc 1 2321 14 is_stmt 1 view .LVU589
2321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2201              		.loc 1 2321 17 is_stmt 0 view .LVU590
 2202 0174 4548     		ldr	r0, .L154+16
 2203 0176 8342     		cmp	r3, r0
 2204 0178 22D0     		beq	.L148
 2205              	.L118:
2326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 2206              		.loc 1 2326 14 is_stmt 1 view .LVU591
2326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 2207              		.loc 1 2326 17 is_stmt 0 view .LVU592
 2208 017a 4548     		ldr	r0, .L154+20
 2209 017c 8342     		cmp	r3, r0
 2210 017e 2CD0     		beq	.L149
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2211              		.loc 1 2215 21 view .LVU593
 2212 0180 0020     		movs	r0, #0
 2213 0182 57E7     		b	.L108
 2214              	.L147:
2304:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****             ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 2215              		.loc 1 2304 58 discriminator 1 view .LVU594
 2216 0184 0802     		lsls	r0, r1, #8
 2217 0186 F5D4     		bmi	.L115
2307:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_chan
 2218              		.loc 1 2307 11 is_stmt 1 view .LVU595
 2219 0188 8023     		movs	r3, #128
 2220 018a 1B04     		lsls	r3, r3, #16
 2221 018c 1A43     		orrs	r2, r3
 2222              	.LVL145:
 2223              	.LBB168:
 2224              	.LBI168:
1787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2225              		.loc 2 1787 22 view .LVU596
 2226              	.LBB169:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2227              		.loc 2 1789 3 view .LVU597
 2228 018e 3D49     		ldr	r1, .L154+8
 2229              	.LVL146:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2230              		.loc 2 1789 3 is_stmt 0 view .LVU598
 2231 0190 0B68     		ldr	r3, [r1]
 2232 0192 4048     		ldr	r0, .L154+24
 2233 0194 0340     		ands	r3, r0
 2234 0196 1A43     		orrs	r2, r3
 2235              	.LVL147:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2236              		.loc 2 1789 3 view .LVU599
 2237 0198 0A60     		str	r2, [r1]
 2238              	.LVL148:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2239              		.loc 2 1789 3 view .LVU600
 2240              	.LBE169:
 2241              	.LBE168:
2315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2242              		.loc 1 2315 11 is_stmt 1 view .LVU601
ARM GAS  /tmp/ccPLPcMa.s 			page 178


2315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2243              		.loc 1 2315 91 is_stmt 0 view .LVU602
 2244 019a 3F4B     		ldr	r3, .L154+28
 2245 019c 1868     		ldr	r0, [r3]
 2246 019e 3F49     		ldr	r1, .L154+32
 2247 01a0 FFF7FEFF 		bl	__aeabi_uidiv
 2248              	.LVL149:
2315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2249              		.loc 1 2315 72 view .LVU603
 2250 01a4 4300     		lsls	r3, r0, #1
 2251 01a6 1B18     		adds	r3, r3, r0
 2252 01a8 9B00     		lsls	r3, r3, #2
2315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2253              		.loc 1 2315 112 view .LVU604
 2254 01aa 0133     		adds	r3, r3, #1
2315:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2255              		.loc 1 2315 27 view .LVU605
 2256 01ac 0193     		str	r3, [sp, #4]
2316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
 2257              		.loc 1 2316 11 is_stmt 1 view .LVU606
2316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
 2258              		.loc 1 2316 17 is_stmt 0 view .LVU607
 2259 01ae 02E0     		b	.L116
 2260              	.L117:
2318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2261              		.loc 1 2318 13 is_stmt 1 view .LVU608
2318:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2262              		.loc 1 2318 28 is_stmt 0 view .LVU609
 2263 01b0 019B     		ldr	r3, [sp, #4]
 2264 01b2 013B     		subs	r3, r3, #1
 2265 01b4 0193     		str	r3, [sp, #4]
 2266              	.L116:
2316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
 2267              		.loc 1 2316 17 is_stmt 1 view .LVU610
2316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
 2268              		.loc 1 2316 34 is_stmt 0 view .LVU611
 2269 01b6 019B     		ldr	r3, [sp, #4]
2316:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
 2270              		.loc 1 2316 17 view .LVU612
 2271 01b8 002B     		cmp	r3, #0
 2272 01ba F9D1     		bne	.L117
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2273              		.loc 1 2215 21 view .LVU613
 2274 01bc 0020     		movs	r0, #0
 2275 01be 39E7     		b	.L108
 2276              	.LVL150:
 2277              	.L148:
2321:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2278              		.loc 1 2321 57 discriminator 1 view .LVU614
 2279 01c0 C801     		lsls	r0, r1, #7
 2280 01c2 DAD4     		bmi	.L118
2323:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 2281              		.loc 1 2323 11 is_stmt 1 view .LVU615
 2282 01c4 8023     		movs	r3, #128
 2283 01c6 5B04     		lsls	r3, r3, #17
 2284 01c8 1A43     		orrs	r2, r3
 2285              	.LVL151:
ARM GAS  /tmp/ccPLPcMa.s 			page 179


 2286              	.LBB170:
 2287              	.LBI170:
1787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2288              		.loc 2 1787 22 view .LVU616
 2289              	.LBB171:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2290              		.loc 2 1789 3 view .LVU617
 2291 01ca 2E49     		ldr	r1, .L154+8
 2292              	.LVL152:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2293              		.loc 2 1789 3 is_stmt 0 view .LVU618
 2294 01cc 0B68     		ldr	r3, [r1]
 2295 01ce 3148     		ldr	r0, .L154+24
 2296 01d0 0340     		ands	r3, r0
 2297 01d2 1A43     		orrs	r2, r3
 2298              	.LVL153:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2299              		.loc 2 1789 3 view .LVU619
 2300 01d4 0A60     		str	r2, [r1]
 2301              	.LBE171:
 2302              	.LBE170:
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2303              		.loc 1 2215 21 view .LVU620
 2304 01d6 0020     		movs	r0, #0
 2305              	.LBB173:
 2306              	.LBB172:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2307              		.loc 2 1790 1 view .LVU621
 2308 01d8 2CE7     		b	.L108
 2309              	.LVL154:
 2310              	.L149:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2311              		.loc 2 1790 1 view .LVU622
 2312              	.LBE172:
 2313              	.LBE173:
2326:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                  ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 2314              		.loc 1 2326 60 discriminator 1 view .LVU623
 2315 01da 4B02     		lsls	r3, r1, #9
 2316 01dc 4AD4     		bmi	.L143
2329:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel
 2317              		.loc 1 2329 11 is_stmt 1 view .LVU624
 2318 01de 8023     		movs	r3, #128
 2319 01e0 DB03     		lsls	r3, r3, #15
 2320 01e2 1A43     		orrs	r2, r3
 2321              	.LVL155:
 2322              	.LBB174:
 2323              	.LBI174:
1787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2324              		.loc 2 1787 22 view .LVU625
 2325              	.LBB175:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2326              		.loc 2 1789 3 view .LVU626
 2327 01e4 2749     		ldr	r1, .L154+8
 2328              	.LVL156:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2329              		.loc 2 1789 3 is_stmt 0 view .LVU627
 2330 01e6 0B68     		ldr	r3, [r1]
ARM GAS  /tmp/ccPLPcMa.s 			page 180


 2331 01e8 2A48     		ldr	r0, .L154+24
 2332 01ea 0340     		ands	r3, r0
 2333 01ec 1A43     		orrs	r2, r3
 2334              	.LVL157:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2335              		.loc 2 1789 3 view .LVU628
 2336 01ee 0A60     		str	r2, [r1]
 2337              	.LBE175:
 2338              	.LBE174:
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2339              		.loc 1 2215 21 view .LVU629
 2340 01f0 0020     		movs	r0, #0
 2341              	.LBB177:
 2342              	.LBB176:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2343              		.loc 2 1790 1 view .LVU630
 2344 01f2 1FE7     		b	.L108
 2345              	.LVL158:
 2346              	.L109:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2347              		.loc 2 1790 1 view .LVU631
 2348              	.LBE176:
 2349              	.LBE177:
2345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 2350              		.loc 1 2345 7 is_stmt 1 view .LVU632
2345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 2351              		.loc 1 2345 10 is_stmt 0 view .LVU633
 2352 01f4 8023     		movs	r3, #128
 2353 01f6 1B06     		lsls	r3, r3, #24
 2354 01f8 9D42     		cmp	r5, r3
 2355 01fa 02D0     		beq	.L119
2345:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 2356              		.loc 1 2345 65 discriminator 1 view .LVU634
 2357 01fc 1F4B     		ldr	r3, .L154
 2358 01fe 9D42     		cmp	r5, r3
 2359 0200 05D1     		bne	.L120
 2360              	.L119:
2350:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 2361              		.loc 1 2350 9 is_stmt 1 view .LVU635
 2362              	.LVL159:
 2363              	.LBB178:
 2364              	.LBI178:
3164:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2365              		.loc 2 3164 22 view .LVU636
 2366              	.LBB179:
3168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2367              		.loc 2 3168 3 view .LVU637
 2368 0202 826A     		ldr	r2, [r0, #40]
 2369 0204 0B68     		ldr	r3, [r1]
 2370 0206 5B03     		lsls	r3, r3, #13
 2371 0208 5B0B     		lsrs	r3, r3, #13
 2372 020a 9A43     		bics	r2, r3
 2373 020c 8262     		str	r2, [r0, #40]
 2374              	.LVL160:
 2375              	.L120:
3168:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2376              		.loc 2 3168 3 is_stmt 0 view .LVU638
ARM GAS  /tmp/ccPLPcMa.s 			page 181


 2377              	.LBE179:
 2378              	.LBE178:
2356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2379              		.loc 1 2356 7 is_stmt 1 view .LVU639
2356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2380              		.loc 1 2356 11 is_stmt 0 view .LVU640
 2381 020e 0B68     		ldr	r3, [r1]
2356:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2382              		.loc 1 2356 10 view .LVU641
 2383 0210 002B     		cmp	r3, #0
 2384 0212 01DB     		blt	.L150
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2385              		.loc 1 2215 21 view .LVU642
 2386 0214 0020     		movs	r0, #0
 2387 0216 0DE7     		b	.L108
 2388              	.L150:
2358:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2389              		.loc 1 2358 9 is_stmt 1 view .LVU643
 2390              	.LVL161:
 2391              	.LBB180:
 2392              	.LBI180:
1881:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2393              		.loc 2 1881 26 view .LVU644
 2394              	.LBB181:
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2395              		.loc 2 1883 3 view .LVU645
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2396              		.loc 2 1883 21 is_stmt 0 view .LVU646
 2397 0218 1A4A     		ldr	r2, .L154+8
 2398 021a 1268     		ldr	r2, [r2]
 2399              	.LVL162:
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2400              		.loc 2 1883 21 view .LVU647
 2401              	.LBE181:
 2402              	.LBE180:
2360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2403              		.loc 1 2360 9 is_stmt 1 view .LVU648
2360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2404              		.loc 1 2360 12 is_stmt 0 view .LVU649
 2405 021c 1A49     		ldr	r1, .L154+12
 2406              	.LVL163:
2360:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2407              		.loc 1 2360 12 view .LVU650
 2408 021e 8B42     		cmp	r3, r1
 2409 0220 07D0     		beq	.L151
2365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2410              		.loc 1 2365 14 is_stmt 1 view .LVU651
2365:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2411              		.loc 1 2365 17 is_stmt 0 view .LVU652
 2412 0222 1A49     		ldr	r1, .L154+16
 2413 0224 8B42     		cmp	r3, r1
 2414 0226 0FD0     		beq	.L152
2370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2415              		.loc 1 2370 14 is_stmt 1 view .LVU653
2370:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 2416              		.loc 1 2370 17 is_stmt 0 view .LVU654
 2417 0228 1949     		ldr	r1, .L154+20
ARM GAS  /tmp/ccPLPcMa.s 			page 182


 2418 022a 8B42     		cmp	r3, r1
 2419 022c 17D0     		beq	.L153
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2420              		.loc 1 2215 21 view .LVU655
 2421 022e 0020     		movs	r0, #0
 2422 0230 00E7     		b	.L108
 2423              	.L151:
2362:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_cha
 2424              		.loc 1 2362 11 is_stmt 1 view .LVU656
 2425 0232 A023     		movs	r3, #160
 2426 0234 5B04     		lsls	r3, r3, #17
 2427 0236 1A40     		ands	r2, r3
 2428              	.LVL164:
 2429              	.LBB182:
 2430              	.LBI182:
1787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2431              		.loc 2 1787 22 view .LVU657
 2432              	.LBB183:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2433              		.loc 2 1789 3 view .LVU658
 2434 0238 1249     		ldr	r1, .L154+8
 2435 023a 0B68     		ldr	r3, [r1]
 2436 023c 1548     		ldr	r0, .L154+24
 2437 023e 0340     		ands	r3, r0
 2438 0240 1A43     		orrs	r2, r3
 2439              	.LVL165:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2440              		.loc 2 1789 3 is_stmt 0 view .LVU659
 2441 0242 0A60     		str	r2, [r1]
 2442              	.LBE183:
 2443              	.LBE182:
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2444              		.loc 1 2215 21 view .LVU660
 2445 0244 0020     		movs	r0, #0
 2446              	.LBB185:
 2447              	.LBB184:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2448              		.loc 2 1790 1 view .LVU661
 2449 0246 F5E6     		b	.L108
 2450              	.LVL166:
 2451              	.L152:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2452              		.loc 2 1790 1 view .LVU662
 2453              	.LBE184:
 2454              	.LBE185:
2367:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 2455              		.loc 1 2367 11 is_stmt 1 view .LVU663
 2456 0248 C023     		movs	r3, #192
 2457 024a 1B04     		lsls	r3, r3, #16
 2458 024c 1A40     		ands	r2, r3
 2459              	.LVL167:
 2460              	.LBB186:
 2461              	.LBI186:
1787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2462              		.loc 2 1787 22 view .LVU664
 2463              	.LBB187:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
ARM GAS  /tmp/ccPLPcMa.s 			page 183


 2464              		.loc 2 1789 3 view .LVU665
 2465 024e 0D49     		ldr	r1, .L154+8
 2466 0250 0B68     		ldr	r3, [r1]
 2467 0252 1048     		ldr	r0, .L154+24
 2468 0254 0340     		ands	r3, r0
 2469 0256 1A43     		orrs	r2, r3
 2470              	.LVL168:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2471              		.loc 2 1789 3 is_stmt 0 view .LVU666
 2472 0258 0A60     		str	r2, [r1]
 2473              	.LBE187:
 2474              	.LBE186:
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2475              		.loc 1 2215 21 view .LVU667
 2476 025a 0020     		movs	r0, #0
 2477              	.LBB189:
 2478              	.LBB188:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2479              		.loc 2 1790 1 view .LVU668
 2480 025c EAE6     		b	.L108
 2481              	.LVL169:
 2482              	.L153:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2483              		.loc 2 1790 1 view .LVU669
 2484              	.LBE188:
 2485              	.LBE189:
2372:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channe
 2486              		.loc 1 2372 11 is_stmt 1 view .LVU670
 2487 025e C023     		movs	r3, #192
 2488 0260 5B04     		lsls	r3, r3, #17
 2489 0262 1A40     		ands	r2, r3
 2490              	.LVL170:
 2491              	.LBB190:
 2492              	.LBI190:
1787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2493              		.loc 2 1787 22 view .LVU671
 2494              	.LBB191:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2495              		.loc 2 1789 3 view .LVU672
 2496 0264 0749     		ldr	r1, .L154+8
 2497 0266 0B68     		ldr	r3, [r1]
 2498 0268 0A48     		ldr	r0, .L154+24
 2499 026a 0340     		ands	r3, r0
 2500 026c 1A43     		orrs	r2, r3
 2501              	.LVL171:
1789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2502              		.loc 2 1789 3 is_stmt 0 view .LVU673
 2503 026e 0A60     		str	r2, [r1]
 2504              	.LBE191:
 2505              	.LBE190:
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2506              		.loc 1 2215 21 view .LVU674
 2507 0270 0020     		movs	r0, #0
 2508              	.LBB193:
 2509              	.LBB192:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2510              		.loc 2 1790 1 view .LVU675
ARM GAS  /tmp/ccPLPcMa.s 			page 184


 2511 0272 DFE6     		b	.L108
 2512              	.LVL172:
 2513              	.L143:
1790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2514              		.loc 2 1790 1 view .LVU676
 2515              	.LBE192:
 2516              	.LBE193:
2215:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2517              		.loc 1 2215 21 view .LVU677
 2518 0274 0020     		movs	r0, #0
 2519 0276 DDE6     		b	.L108
 2520              	.LVL173:
 2521              	.L123:
2237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2522              		.loc 1 2237 3 view .LVU678
 2523 0278 0220     		movs	r0, #2
 2524              	.LVL174:
2237:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2525              		.loc 1 2237 3 view .LVU679
 2526 027a DEE6     		b	.L106
 2527              	.L155:
 2528              		.align	2
 2529              	.L154:
 2530 027c 04000080 		.word	-2147483644
 2531 0280 00FFFF07 		.word	134217472
 2532 0284 08270140 		.word	1073817352
 2533 0288 001000B0 		.word	-1342173184
 2534 028c 004000B8 		.word	-1207943168
 2535 0290 002000B4 		.word	-1275060224
 2536 0294 FFFF3FFE 		.word	-29360129
 2537 0298 00000000 		.word	SystemCoreClock
 2538 029c 400D0300 		.word	200000
 2539              		.cfi_endproc
 2540              	.LFE470:
 2542              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2543              		.align	1
 2544              		.global	HAL_ADC_AnalogWDGConfig
 2545              		.syntax unified
 2546              		.code	16
 2547              		.thumb_func
 2548              		.fpu softvfp
 2550              	HAL_ADC_AnalogWDGConfig:
 2551              	.LVL175:
 2552              	.LFB471:
2424:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2553              		.loc 1 2424 1 is_stmt 1 view -0
 2554              		.cfi_startproc
 2555              		@ args = 0, pretend = 0, frame = 0
 2556              		@ frame_needed = 0, uses_anonymous_args = 0
2424:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2557              		.loc 1 2424 1 is_stmt 0 view .LVU681
 2558 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2559              	.LCFI10:
 2560              		.cfi_def_cfa_offset 20
 2561              		.cfi_offset 4, -20
 2562              		.cfi_offset 5, -16
 2563              		.cfi_offset 6, -12
ARM GAS  /tmp/ccPLPcMa.s 			page 185


 2564              		.cfi_offset 7, -8
 2565              		.cfi_offset 14, -4
2425:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
 2566              		.loc 1 2425 3 is_stmt 1 view .LVU682
 2567              	.LVL176:
2426:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
 2568              		.loc 1 2426 3 view .LVU683
2427:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2569              		.loc 1 2427 3 view .LVU684
2430:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
 2570              		.loc 1 2430 3 view .LVU685
2431:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
 2571              		.loc 1 2431 3 view .LVU686
2432:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
 2572              		.loc 1 2432 3 view .LVU687
2433:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2573              		.loc 1 2433 3 view .LVU688
2435:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 2574              		.loc 1 2435 3 view .LVU689
2437:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 2575              		.loc 1 2437 5 view .LVU690
2441:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 2576              		.loc 1 2441 3 view .LVU691
2452:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
 2577              		.loc 1 2452 5 view .LVU692
2453:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 2578              		.loc 1 2453 5 view .LVU693
2457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2579              		.loc 1 2457 3 view .LVU694
2457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2580              		.loc 1 2457 3 view .LVU695
 2581 0002 5423     		movs	r3, #84
 2582 0004 C35C     		ldrb	r3, [r0, r3]
 2583 0006 012B     		cmp	r3, #1
 2584 0008 00D1     		bne	.LCB2529
 2585 000a A1E1     		b	.L177	@long jump
 2586              	.LCB2529:
2457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2587              		.loc 1 2457 3 discriminator 2 view .LVU696
 2588 000c 5423     		movs	r3, #84
 2589 000e 0122     		movs	r2, #1
 2590 0010 C254     		strb	r2, [r0, r3]
2457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2591              		.loc 1 2457 3 discriminator 2 view .LVU697
2463:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 2592              		.loc 1 2463 3 discriminator 2 view .LVU698
2463:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 2593              		.loc 1 2463 7 is_stmt 0 discriminator 2 view .LVU699
 2594 0012 0368     		ldr	r3, [r0]
 2595              	.LVL177:
 2596              	.LBB194:
 2597              	.LBI194:
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2598              		.loc 2 4427 26 is_stmt 1 discriminator 2 view .LVU700
 2599              	.LBB195:
 2600              		.loc 2 4429 3 discriminator 2 view .LVU701
 2601              		.loc 2 4429 12 is_stmt 0 discriminator 2 view .LVU702
ARM GAS  /tmp/ccPLPcMa.s 			page 186


 2602 0014 9A68     		ldr	r2, [r3, #8]
 2603              		.loc 2 4429 74 discriminator 2 view .LVU703
 2604 0016 5207     		lsls	r2, r2, #29
 2605 0018 00D5     		bpl	.LCB2546
 2606 001a 43E1     		b	.L158	@long jump
 2607              	.LCB2546:
 2608              	.LVL178:
 2609              		.loc 2 4429 74 discriminator 2 view .LVU704
 2610              	.LBE195:
 2611              	.LBE194:
2466:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 2612              		.loc 1 2466 5 is_stmt 1 view .LVU705
2466:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 2613              		.loc 1 2466 24 is_stmt 0 view .LVU706
 2614 001c 0A68     		ldr	r2, [r1]
2466:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 2615              		.loc 1 2466 8 view .LVU707
 2616 001e 8C4C     		ldr	r4, .L223
 2617 0020 A242     		cmp	r2, r4
 2618 0022 1CD0     		beq	.L216
2509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2619              		.loc 1 2509 7 is_stmt 1 view .LVU708
2509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2620              		.loc 1 2509 30 is_stmt 0 view .LVU709
 2621 0024 4C68     		ldr	r4, [r1, #4]
2509:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2622              		.loc 1 2509 7 view .LVU710
 2623 0026 8025     		movs	r5, #128
 2624 0028 2D04     		lsls	r5, r5, #16
 2625 002a AC42     		cmp	r4, r5
 2626 002c 00D1     		bne	.LCB2560
 2627 002e 17E1     		b	.L164	@long jump
 2628              	.LCB2560:
 2629 0030 C025     		movs	r5, #192
 2630 0032 2D04     		lsls	r5, r5, #16
 2631 0034 AC42     		cmp	r4, r5
 2632 0036 00D0     		beq	.LCB2564
 2633 0038 51E1     		b	.L165	@long jump
 2634              	.LCB2564:
2514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
 2635              		.loc 1 2514 11 is_stmt 1 view .LVU711
2514:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           {
 2636              		.loc 1 2514 14 is_stmt 0 view .LVU712
 2637 003a 864C     		ldr	r4, .L223+4
 2638 003c A242     		cmp	r2, r4
 2639 003e 46D0     		beq	.L217
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2640              		.loc 1 2520 13 is_stmt 1 view .LVU713
 2641 0040 A422     		movs	r2, #164
 2642 0042 9C58     		ldr	r4, [r3, r2]
 2643 0044 8A68     		ldr	r2, [r1, #8]
 2644 0046 5503     		lsls	r5, r2, #13
 2645 0048 00D0     		beq	.LCB2576
 2646 004a A7E0     		b	.L170	@long jump
 2647              	.LCB2576:
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2648              		.loc 1 2520 13 is_stmt 0 discriminator 1 view .LVU714
ARM GAS  /tmp/ccPLPcMa.s 			page 187


 2649 004c 920E     		lsrs	r2, r2, #26
 2650 004e 1F35     		adds	r5, r5, #31
 2651 0050 1540     		ands	r5, r2
 2652 0052 0122     		movs	r2, #1
 2653 0054 AA40     		lsls	r2, r2, r5
 2654              	.L171:
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2655              		.loc 1 2520 13 discriminator 80 view .LVU715
 2656 0056 2243     		orrs	r2, r4
 2657 0058 A424     		movs	r4, #164
 2658 005a 1A51     		str	r2, [r3, r4]
 2659 005c 0EE1     		b	.L169
 2660              	.L216:
2471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2661              		.loc 1 2471 7 is_stmt 1 view .LVU716
2471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2662              		.loc 1 2471 30 is_stmt 0 view .LVU717
 2663 005e 4A68     		ldr	r2, [r1, #4]
2471:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2664              		.loc 1 2471 7 view .LVU718
 2665 0060 8024     		movs	r4, #128
 2666 0062 2404     		lsls	r4, r4, #16
 2667 0064 A242     		cmp	r2, r4
 2668 0066 1FD0     		beq	.L160
 2669 0068 C024     		movs	r4, #192
 2670 006a 2404     		lsls	r4, r4, #16
 2671 006c A242     		cmp	r2, r4
 2672 006e 23D1     		bne	.L161
2474:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                           __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 2673              		.loc 1 2474 11 is_stmt 1 view .LVU719
 2674              	.LVL179:
 2675              	.LBB196:
 2676              	.LBI196:
3669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2677              		.loc 2 3669 22 view .LVU720
 2678              	.LBB197:
3675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2679              		.loc 2 3675 3 view .LVU721
3677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   {
 2680              		.loc 2 3677 3 view .LVU722
3679:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
 2681              		.loc 2 3679 5 view .LVU723
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 2682              		.loc 2 3686 3 view .LVU724
 2683 0070 DA68     		ldr	r2, [r3, #12]
 2684 0072 794C     		ldr	r4, .L223+8
 2685 0074 2240     		ands	r2, r4
 2686 0076 F825     		movs	r5, #248
 2687 0078 ED05     		lsls	r5, r5, #23
 2688 007a 8C68     		ldr	r4, [r1, #8]
 2689 007c 2540     		ands	r5, r4
 2690 007e C024     		movs	r4, #192
 2691 0080 2404     		lsls	r4, r4, #16
 2692 0082 2C43     		orrs	r4, r5
 2693 0084 2243     		orrs	r2, r4
 2694 0086 DA60     		str	r2, [r3, #12]
 2695              	.LVL180:
ARM GAS  /tmp/ccPLPcMa.s 			page 188


 2696              	.L162:
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 2697              		.loc 2 3686 3 is_stmt 0 view .LVU725
 2698              	.LBE197:
 2699              	.LBE196:
2488:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2700              		.loc 1 2488 7 is_stmt 1 view .LVU726
 2701 0088 836D     		ldr	r3, [r0, #88]
 2702 008a 744A     		ldr	r2, .L223+12
 2703 008c 1340     		ands	r3, r2
 2704 008e 8365     		str	r3, [r0, #88]
2494:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 2705              		.loc 1 2494 7 view .LVU727
 2706 0090 0368     		ldr	r3, [r0]
 2707              	.LVL181:
 2708              	.LBB198:
 2709              	.LBI198:
4430:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4431:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4432:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4433:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
4434:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
4435:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4436:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
4437:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4438:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
4439:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4440:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
4441:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4442:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4443:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4444:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4445:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
4446:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         all oversampling increased data width (for devices
4447:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         with feature oversampling).
4448:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData32
4449:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4450:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
4451:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4452:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
4453:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4454:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
4455:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4456:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4457:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4458:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4459:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC resolution 12 bits.
4460:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
4461:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         can increase data width, function for extended range
4462:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
4463:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
4464:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4465:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
4466:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4467:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
4468:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4469:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
ARM GAS  /tmp/ccPLPcMa.s 			page 189


4470:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4471:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4472:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4473:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4474:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC resolution 10 bits.
4475:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
4476:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         can increase data width, function for extended range
4477:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
4478:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData10
4479:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4480:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
4481:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4482:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
4483:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4484:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
4485:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4486:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4487:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4488:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4489:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC resolution 8 bits.
4490:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
4491:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         can increase data width, function for extended range
4492:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
4493:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData8
4494:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4495:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
4496:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4497:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
4498:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4499:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
4500:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4501:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4502:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4503:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4504:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC resolution 6 bits.
4505:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
4506:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         can increase data width, function for extended range
4507:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
4508:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData6
4509:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4510:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3F
4511:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4512:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData6(ADC_TypeDef *ADCx)
4513:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4514:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
4515:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4516:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4517:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4518:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
4519:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4520:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4521:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_FLAG_Management ADC flag management
4522:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
4523:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4524:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4525:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4526:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC ready.
ARM GAS  /tmp/ccPLPcMa.s 			page 190


4527:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
4528:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
4529:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
4530:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
4531:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4532:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4533:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4534:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
4535:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4536:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
4537:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4538:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4539:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4540:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC channel configuration ready.
4541:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer
4542:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
4543:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
4544:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Otherwise, performing some actions (configuration update,
4545:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         ADC conversion start, ... ) will be ignored.
4546:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         Functions requiring wait for CCRDY flag are:
4547:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
4548:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks()
4549:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerChannels()
4550:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerChAdd()
4551:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerChRem()
4552:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerScanDirection()
4553:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerConfigurable()
4554:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   Duration of ADC channel configuration ready: CCRDY handshake
4555:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         requires 1APB + 2 ADC + 3 APB cycles after the channel configuration
4556:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         has been changed.
4557:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
4558:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4559:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4560:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4561:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
4562:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4563:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
4564:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4565:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4566:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4567:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of unitary conversion.
4568:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
4569:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4570:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4571:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4572:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
4573:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4574:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
4575:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4576:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4577:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4578:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sequence conversions.
4579:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_IsActiveFlag_EOS
4580:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4581:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4582:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4583:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccPLPcMa.s 			page 191


4584:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4585:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
4586:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4587:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4588:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4589:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC group regular overrun.
4590:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_IsActiveFlag_OVR
4591:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4592:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4593:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4594:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
4595:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4596:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
4597:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4598:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4599:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4600:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sampling phase.
4601:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_IsActiveFlag_EOSMP
4602:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4603:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4604:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4605:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
4606:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4607:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP)) ? 1UL : 0UL);
4608:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4609:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4610:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4611:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 1 flag
4612:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_IsActiveFlag_AWD1
4613:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4614:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4615:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4616:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
4617:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4618:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1)) ? 1UL : 0UL);
4619:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4620:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4621:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4622:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 2.
4623:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_IsActiveFlag_AWD2
4624:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4625:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4626:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4627:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
4628:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4629:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD2) == (LL_ADC_FLAG_AWD2)) ? 1UL : 0UL);
4630:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4631:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4632:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4633:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 3.
4634:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_IsActiveFlag_AWD3
4635:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4636:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4637:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4638:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
4639:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4640:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD3) == (LL_ADC_FLAG_AWD3)) ? 1UL : 0UL);
ARM GAS  /tmp/ccPLPcMa.s 			page 192


4641:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4642:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4643:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4644:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Get flag ADC end of calibration.
4645:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      EOCAL          LL_ADC_IsActiveFlag_EOCAL
4646:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4647:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4648:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4649:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCAL(ADC_TypeDef *ADCx)
4650:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4651:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOCAL) == (LL_ADC_FLAG_EOCAL)) ? 1UL : 0UL);
4652:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4653:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4654:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4655:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC ready.
4656:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
4657:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
4658:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
4659:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_ClearFlag_ADRDY
4660:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4661:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4662:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4663:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
4664:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4665:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
4666:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4667:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4668:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC channel configuration ready.
4670:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
4671:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4672:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4673:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4674:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
4675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4676:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
4677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4678:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4679:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4680:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of unitary conversion.
4681:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
4682:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4684:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4685:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
4686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4687:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
4688:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4690:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4691:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sequence conversions.
4692:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
4693:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4694:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4695:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4696:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
4697:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
ARM GAS  /tmp/ccPLPcMa.s 			page 193


4698:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
4699:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4700:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4701:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4702:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC group regular overrun.
4703:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_ClearFlag_OVR
4704:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4705:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4706:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4707:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
4708:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4709:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
4710:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4711:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4712:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4713:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sampling phase.
4714:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_ClearFlag_EOSMP
4715:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4716:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4717:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4718:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
4719:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4720:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOSMP);
4721:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4722:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4723:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4724:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 1.
4725:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
4726:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4727:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4728:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4729:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
 2710              		.loc 2 4729 22 view .LVU728
 2711              	.LBB199:
4730:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4731:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 2712              		.loc 2 4731 3 view .LVU729
 2713 0092 8022     		movs	r2, #128
 2714 0094 1A60     		str	r2, [r3]
 2715              	.LVL182:
 2716              		.loc 2 4731 3 is_stmt 0 view .LVU730
 2717              	.LBE199:
 2718              	.LBE198:
2497:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2719              		.loc 1 2497 7 is_stmt 1 view .LVU731
2497:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2720              		.loc 1 2497 26 is_stmt 0 view .LVU732
 2721 0096 0B7B     		ldrb	r3, [r1, #12]
2497:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 2722              		.loc 1 2497 10 view .LVU733
 2723 0098 012B     		cmp	r3, #1
 2724 009a 12D0     		beq	.L218
2503:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 2725              		.loc 1 2503 9 is_stmt 1 view .LVU734
 2726 009c 0268     		ldr	r2, [r0]
 2727              	.LVL183:
 2728              	.LBB200:
ARM GAS  /tmp/ccPLPcMa.s 			page 194


 2729              	.LBI200:
4732:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4733:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4734:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4735:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 2.
4736:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
4737:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4738:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4739:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4740:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
4741:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4742:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
4743:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4744:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4745:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4746:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 3.
4747:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
4748:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4749:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4750:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4751:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
4752:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
4754:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4755:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4756:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4757:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Clear flag ADC end of calibration.
4758:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll ISR      EOCAL          LL_ADC_ClearFlag_EOCAL
4759:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4760:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4761:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4762:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOCAL(ADC_TypeDef *ADCx)
4763:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4764:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOCAL);
4765:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4766:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4767:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4768:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @}
4769:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4770:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4771:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /** @defgroup ADC_LL_EF_IT_Management ADC IT management
4772:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @{
4773:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4774:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4775:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4776:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable ADC ready.
4777:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_EnableIT_ADRDY
4778:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4779:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4780:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4781:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
4782:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4783:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
4784:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4785:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4786:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4787:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable interruption ADC channel configuration ready.
ARM GAS  /tmp/ccPLPcMa.s 			page 195


4788:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_EnableIT_CCRDY
4789:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4790:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4791:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4792:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_CCRDY(ADC_TypeDef *ADCx)
4793:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4794:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_FLAG_CCRDY);
4795:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4796:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4797:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4798:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of unitary conversion.
4799:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
4800:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4801:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4802:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4803:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
4804:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4805:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
4806:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4807:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4808:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4809:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sequence conversions.
4810:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_EnableIT_EOS
4811:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4812:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4813:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4814:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
4815:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4816:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOS);
4817:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4818:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4819:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4820:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable ADC group regular interruption overrun.
4821:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
4822:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4823:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4824:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4825:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
4826:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4827:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
4828:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4829:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4830:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4831:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sampling.
4832:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_EnableIT_EOSMP
4833:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4834:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4835:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4836:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
4837:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4838:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
4839:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4840:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4841:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4842:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 1.
4843:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
4844:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccPLPcMa.s 			page 196


4845:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4846:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4847:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
4848:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4849:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
4850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4851:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4852:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4853:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 2.
4854:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
4855:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4856:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4857:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4858:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
4859:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4860:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
4861:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4862:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4863:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4864:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 3.
4865:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
4866:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4867:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4868:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4869:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
4870:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4871:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
4872:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4873:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4874:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4875:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Enable interruption ADC end of calibration.
4876:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      EOCALIE        LL_ADC_EnableIT_EOCAL
4877:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4878:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4879:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4880:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOCAL(ADC_TypeDef *ADCx)
4881:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4882:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOCAL);
4883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4884:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4885:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4886:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable interruption ADC ready.
4887:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_DisableIT_ADRDY
4888:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4889:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4890:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4891:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
4892:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4893:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
4894:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4895:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4897:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable interruption ADC channel configuration ready.
4898:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_DisableIT_CCRDY
4899:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4900:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval State of bit (1 or 0).
4901:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
ARM GAS  /tmp/ccPLPcMa.s 			page 197


4902:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_CCRDY(ADC_TypeDef *ADCx)
4903:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4904:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_FLAG_CCRDY);
4905:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4906:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4907:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4908:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
4909:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
4910:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4911:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4912:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4913:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
4914:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4915:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
4916:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4917:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4918:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4919:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sequence conversions.
4920:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
4921:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4922:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4923:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4924:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
4925:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4926:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
4927:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4928:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4929:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4930:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular overrun.
4931:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_DisableIT_OVR
4932:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4933:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4934:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4935:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
4936:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4937:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_OVR);
4938:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4939:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4940:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4941:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sampling.
4942:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_DisableIT_EOSMP
4943:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4944:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4945:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4946:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
4947:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4948:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
4949:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4950:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4951:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4952:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 1.
4953:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
4954:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4955:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4956:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4957:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
 2730              		.loc 2 4957 22 view .LVU735
ARM GAS  /tmp/ccPLPcMa.s 			page 198


 2731              	.LBB201:
4958:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4959:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 2732              		.loc 2 4959 3 view .LVU736
 2733 009e 5368     		ldr	r3, [r2, #4]
 2734 00a0 8024     		movs	r4, #128
 2735 00a2 A343     		bics	r3, r4
 2736 00a4 5360     		str	r3, [r2, #4]
4960:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2737              		.loc 2 4960 1 is_stmt 0 view .LVU737
 2738 00a6 FDE0     		b	.L158
 2739              	.LVL184:
 2740              	.L160:
 2741              		.loc 2 4960 1 view .LVU738
 2742              	.LBE201:
 2743              	.LBE200:
2479:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
 2744              		.loc 1 2479 11 is_stmt 1 view .LVU739
 2745              	.LBB202:
 2746              	.LBI202:
3669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2747              		.loc 2 3669 22 view .LVU740
 2748              	.LBB203:
3675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2749              		.loc 2 3675 3 view .LVU741
3677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   {
 2750              		.loc 2 3677 3 view .LVU742
3679:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
 2751              		.loc 2 3679 5 view .LVU743
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 2752              		.loc 2 3686 3 view .LVU744
 2753 00a8 DA68     		ldr	r2, [r3, #12]
 2754 00aa 6B4C     		ldr	r4, .L223+8
 2755 00ac 1440     		ands	r4, r2
 2756 00ae 8022     		movs	r2, #128
 2757 00b0 1204     		lsls	r2, r2, #16
 2758 00b2 2243     		orrs	r2, r4
 2759 00b4 DA60     		str	r2, [r3, #12]
3689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2760              		.loc 2 3689 1 is_stmt 0 view .LVU745
 2761 00b6 E7E7     		b	.L162
 2762              	.LVL185:
 2763              	.L161:
3689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2764              		.loc 2 3689 1 view .LVU746
 2765              	.LBE203:
 2766              	.LBE202:
2483:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
 2767              		.loc 1 2483 11 is_stmt 1 view .LVU747
 2768              	.LBB204:
 2769              	.LBI204:
3669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2770              		.loc 2 3669 22 view .LVU748
 2771              	.LBB205:
3675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2772              		.loc 2 3675 3 view .LVU749
3677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   {
ARM GAS  /tmp/ccPLPcMa.s 			page 199


 2773              		.loc 2 3677 3 view .LVU750
3679:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
 2774              		.loc 2 3679 5 view .LVU751
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 2775              		.loc 2 3686 3 view .LVU752
 2776 00b8 DA68     		ldr	r2, [r3, #12]
 2777 00ba 674C     		ldr	r4, .L223+8
 2778 00bc 2240     		ands	r2, r4
 2779 00be DA60     		str	r2, [r3, #12]
3689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2780              		.loc 2 3689 1 is_stmt 0 view .LVU753
 2781 00c0 E2E7     		b	.L162
 2782              	.LVL186:
 2783              	.L218:
3689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2784              		.loc 2 3689 1 view .LVU754
 2785              	.LBE205:
 2786              	.LBE204:
2499:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 2787              		.loc 1 2499 9 is_stmt 1 view .LVU755
 2788 00c2 0268     		ldr	r2, [r0]
 2789              	.LVL187:
 2790              	.LBB206:
 2791              	.LBI206:
4847:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 2792              		.loc 2 4847 22 view .LVU756
 2793              	.LBB207:
4849:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 2794              		.loc 2 4849 3 view .LVU757
 2795 00c4 5368     		ldr	r3, [r2, #4]
 2796 00c6 8024     		movs	r4, #128
 2797 00c8 2343     		orrs	r3, r4
 2798 00ca 5360     		str	r3, [r2, #4]
4850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2799              		.loc 2 4850 1 is_stmt 0 view .LVU758
 2800 00cc EAE0     		b	.L158
 2801              	.LVL188:
 2802              	.L217:
4850:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 2803              		.loc 2 4850 1 view .LVU759
 2804              	.LBE207:
 2805              	.LBE206:
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2806              		.loc 1 2516 13 is_stmt 1 view .LVU760
 2807 00ce A022     		movs	r2, #160
 2808 00d0 9C58     		ldr	r4, [r3, r2]
 2809 00d2 8A68     		ldr	r2, [r1, #8]
 2810 00d4 5503     		lsls	r5, r2, #13
 2811 00d6 08D1     		bne	.L167
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2812              		.loc 1 2516 13 is_stmt 0 discriminator 1 view .LVU761
 2813 00d8 920E     		lsrs	r2, r2, #26
 2814 00da 1F35     		adds	r5, r5, #31
 2815 00dc 1540     		ands	r5, r2
 2816 00de 0122     		movs	r2, #1
 2817 00e0 AA40     		lsls	r2, r2, r5
 2818              	.L168:
ARM GAS  /tmp/ccPLPcMa.s 			page 200


2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2819              		.loc 1 2516 13 discriminator 80 view .LVU762
 2820 00e2 2243     		orrs	r2, r4
 2821 00e4 A024     		movs	r4, #160
 2822 00e6 1A51     		str	r2, [r3, r4]
 2823 00e8 C8E0     		b	.L169
 2824              	.L167:
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2825              		.loc 1 2516 13 discriminator 2 view .LVU763
 2826 00ea D507     		lsls	r5, r2, #31
 2827 00ec 26D4     		bmi	.L178
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2828              		.loc 1 2516 13 discriminator 4 view .LVU764
 2829 00ee 9507     		lsls	r5, r2, #30
 2830 00f0 26D4     		bmi	.L179
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2831              		.loc 1 2516 13 discriminator 6 view .LVU765
 2832 00f2 5507     		lsls	r5, r2, #29
 2833 00f4 26D4     		bmi	.L180
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2834              		.loc 1 2516 13 discriminator 8 view .LVU766
 2835 00f6 1507     		lsls	r5, r2, #28
 2836 00f8 26D4     		bmi	.L181
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2837              		.loc 1 2516 13 discriminator 10 view .LVU767
 2838 00fa D506     		lsls	r5, r2, #27
 2839 00fc 26D4     		bmi	.L182
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2840              		.loc 1 2516 13 discriminator 12 view .LVU768
 2841 00fe 9506     		lsls	r5, r2, #26
 2842 0100 26D4     		bmi	.L183
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2843              		.loc 1 2516 13 discriminator 14 view .LVU769
 2844 0102 5506     		lsls	r5, r2, #25
 2845 0104 26D4     		bmi	.L184
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2846              		.loc 1 2516 13 discriminator 16 view .LVU770
 2847 0106 1506     		lsls	r5, r2, #24
 2848 0108 26D4     		bmi	.L185
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2849              		.loc 1 2516 13 discriminator 18 view .LVU771
 2850 010a D505     		lsls	r5, r2, #23
 2851 010c 26D4     		bmi	.L186
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2852              		.loc 1 2516 13 discriminator 20 view .LVU772
 2853 010e 9505     		lsls	r5, r2, #22
 2854 0110 27D4     		bmi	.L187
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2855              		.loc 1 2516 13 discriminator 22 view .LVU773
 2856 0112 5505     		lsls	r5, r2, #21
 2857 0114 28D4     		bmi	.L188
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2858              		.loc 1 2516 13 discriminator 24 view .LVU774
 2859 0116 1505     		lsls	r5, r2, #20
 2860 0118 29D4     		bmi	.L189
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2861              		.loc 1 2516 13 discriminator 26 view .LVU775
ARM GAS  /tmp/ccPLPcMa.s 			page 201


 2862 011a D504     		lsls	r5, r2, #19
 2863 011c 2AD4     		bmi	.L190
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2864              		.loc 1 2516 13 discriminator 28 view .LVU776
 2865 011e 9504     		lsls	r5, r2, #18
 2866 0120 2BD4     		bmi	.L191
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2867              		.loc 1 2516 13 discriminator 30 view .LVU777
 2868 0122 5504     		lsls	r5, r2, #17
 2869 0124 2CD4     		bmi	.L192
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2870              		.loc 1 2516 13 discriminator 32 view .LVU778
 2871 0126 1504     		lsls	r5, r2, #16
 2872 0128 2DD4     		bmi	.L193
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2873              		.loc 1 2516 13 discriminator 34 view .LVU779
 2874 012a D503     		lsls	r5, r2, #15
 2875 012c 2ED4     		bmi	.L194
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2876              		.loc 1 2516 13 discriminator 36 view .LVU780
 2877 012e 9503     		lsls	r5, r2, #14
 2878 0130 2FD4     		bmi	.L195
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2879              		.loc 1 2516 13 discriminator 38 view .LVU781
 2880 0132 5203     		lsls	r2, r2, #13
 2881 0134 30D5     		bpl	.L196
2516:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2882              		.loc 1 2516 13 view .LVU782
 2883 0136 8022     		movs	r2, #128
 2884 0138 D202     		lsls	r2, r2, #11
 2885 013a D2E7     		b	.L168
 2886              	.L178:
 2887 013c 0122     		movs	r2, #1
 2888 013e D0E7     		b	.L168
 2889              	.L179:
 2890 0140 0222     		movs	r2, #2
 2891 0142 CEE7     		b	.L168
 2892              	.L180:
 2893 0144 0422     		movs	r2, #4
 2894 0146 CCE7     		b	.L168
 2895              	.L181:
 2896 0148 0822     		movs	r2, #8
 2897 014a CAE7     		b	.L168
 2898              	.L182:
 2899 014c 1022     		movs	r2, #16
 2900 014e C8E7     		b	.L168
 2901              	.L183:
 2902 0150 2022     		movs	r2, #32
 2903 0152 C6E7     		b	.L168
 2904              	.L184:
 2905 0154 4022     		movs	r2, #64
 2906 0156 C4E7     		b	.L168
 2907              	.L185:
 2908 0158 8022     		movs	r2, #128
 2909 015a C2E7     		b	.L168
 2910              	.L186:
 2911 015c 8022     		movs	r2, #128
ARM GAS  /tmp/ccPLPcMa.s 			page 202


 2912 015e 5200     		lsls	r2, r2, #1
 2913 0160 BFE7     		b	.L168
 2914              	.L187:
 2915 0162 8022     		movs	r2, #128
 2916 0164 9200     		lsls	r2, r2, #2
 2917 0166 BCE7     		b	.L168
 2918              	.L188:
 2919 0168 8022     		movs	r2, #128
 2920 016a D200     		lsls	r2, r2, #3
 2921 016c B9E7     		b	.L168
 2922              	.L189:
 2923 016e 8022     		movs	r2, #128
 2924 0170 1201     		lsls	r2, r2, #4
 2925 0172 B6E7     		b	.L168
 2926              	.L190:
 2927 0174 8022     		movs	r2, #128
 2928 0176 5201     		lsls	r2, r2, #5
 2929 0178 B3E7     		b	.L168
 2930              	.L191:
 2931 017a 8022     		movs	r2, #128
 2932 017c 9201     		lsls	r2, r2, #6
 2933 017e B0E7     		b	.L168
 2934              	.L192:
 2935 0180 8022     		movs	r2, #128
 2936 0182 D201     		lsls	r2, r2, #7
 2937 0184 ADE7     		b	.L168
 2938              	.L193:
 2939 0186 8022     		movs	r2, #128
 2940 0188 1202     		lsls	r2, r2, #8
 2941 018a AAE7     		b	.L168
 2942              	.L194:
 2943 018c 8022     		movs	r2, #128
 2944 018e 5202     		lsls	r2, r2, #9
 2945 0190 A7E7     		b	.L168
 2946              	.L195:
 2947 0192 8022     		movs	r2, #128
 2948 0194 9202     		lsls	r2, r2, #10
 2949 0196 A4E7     		b	.L168
 2950              	.L196:
 2951 0198 0122     		movs	r2, #1
 2952 019a A2E7     		b	.L168
 2953              	.L170:
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2954              		.loc 1 2520 13 discriminator 2 view .LVU783
 2955 019c D507     		lsls	r5, r2, #31
 2956 019e 26D4     		bmi	.L197
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2957              		.loc 1 2520 13 discriminator 4 view .LVU784
 2958 01a0 9507     		lsls	r5, r2, #30
 2959 01a2 26D4     		bmi	.L198
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2960              		.loc 1 2520 13 discriminator 6 view .LVU785
 2961 01a4 5507     		lsls	r5, r2, #29
 2962 01a6 26D4     		bmi	.L199
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2963              		.loc 1 2520 13 discriminator 8 view .LVU786
 2964 01a8 1507     		lsls	r5, r2, #28
ARM GAS  /tmp/ccPLPcMa.s 			page 203


 2965 01aa 26D4     		bmi	.L200
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2966              		.loc 1 2520 13 discriminator 10 view .LVU787
 2967 01ac D506     		lsls	r5, r2, #27
 2968 01ae 26D4     		bmi	.L201
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2969              		.loc 1 2520 13 discriminator 12 view .LVU788
 2970 01b0 9506     		lsls	r5, r2, #26
 2971 01b2 26D4     		bmi	.L202
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2972              		.loc 1 2520 13 discriminator 14 view .LVU789
 2973 01b4 5506     		lsls	r5, r2, #25
 2974 01b6 26D4     		bmi	.L203
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2975              		.loc 1 2520 13 discriminator 16 view .LVU790
 2976 01b8 1506     		lsls	r5, r2, #24
 2977 01ba 26D4     		bmi	.L204
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2978              		.loc 1 2520 13 discriminator 18 view .LVU791
 2979 01bc D505     		lsls	r5, r2, #23
 2980 01be 26D4     		bmi	.L205
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2981              		.loc 1 2520 13 discriminator 20 view .LVU792
 2982 01c0 9505     		lsls	r5, r2, #22
 2983 01c2 27D4     		bmi	.L206
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2984              		.loc 1 2520 13 discriminator 22 view .LVU793
 2985 01c4 5505     		lsls	r5, r2, #21
 2986 01c6 28D4     		bmi	.L207
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2987              		.loc 1 2520 13 discriminator 24 view .LVU794
 2988 01c8 1505     		lsls	r5, r2, #20
 2989 01ca 29D4     		bmi	.L208
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2990              		.loc 1 2520 13 discriminator 26 view .LVU795
 2991 01cc D504     		lsls	r5, r2, #19
 2992 01ce 2AD4     		bmi	.L209
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2993              		.loc 1 2520 13 discriminator 28 view .LVU796
 2994 01d0 9504     		lsls	r5, r2, #18
 2995 01d2 2BD4     		bmi	.L210
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2996              		.loc 1 2520 13 discriminator 30 view .LVU797
 2997 01d4 5504     		lsls	r5, r2, #17
 2998 01d6 2CD4     		bmi	.L211
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 2999              		.loc 1 2520 13 discriminator 32 view .LVU798
 3000 01d8 1504     		lsls	r5, r2, #16
 3001 01da 2DD4     		bmi	.L212
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 3002              		.loc 1 2520 13 discriminator 34 view .LVU799
 3003 01dc D503     		lsls	r5, r2, #15
 3004 01de 2ED4     		bmi	.L213
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 3005              		.loc 1 2520 13 discriminator 36 view .LVU800
 3006 01e0 9503     		lsls	r5, r2, #14
 3007 01e2 2FD4     		bmi	.L214
ARM GAS  /tmp/ccPLPcMa.s 			page 204


2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 3008              		.loc 1 2520 13 discriminator 38 view .LVU801
 3009 01e4 5203     		lsls	r2, r2, #13
 3010 01e6 30D5     		bpl	.L215
2520:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           }
 3011              		.loc 1 2520 13 view .LVU802
 3012 01e8 8022     		movs	r2, #128
 3013 01ea D202     		lsls	r2, r2, #11
 3014 01ec 33E7     		b	.L171
 3015              	.L197:
 3016 01ee 0122     		movs	r2, #1
 3017 01f0 31E7     		b	.L171
 3018              	.L198:
 3019 01f2 0222     		movs	r2, #2
 3020 01f4 2FE7     		b	.L171
 3021              	.L199:
 3022 01f6 0422     		movs	r2, #4
 3023 01f8 2DE7     		b	.L171
 3024              	.L200:
 3025 01fa 0822     		movs	r2, #8
 3026 01fc 2BE7     		b	.L171
 3027              	.L201:
 3028 01fe 1022     		movs	r2, #16
 3029 0200 29E7     		b	.L171
 3030              	.L202:
 3031 0202 2022     		movs	r2, #32
 3032 0204 27E7     		b	.L171
 3033              	.L203:
 3034 0206 4022     		movs	r2, #64
 3035 0208 25E7     		b	.L171
 3036              	.L204:
 3037 020a 8022     		movs	r2, #128
 3038 020c 23E7     		b	.L171
 3039              	.L205:
 3040 020e 8022     		movs	r2, #128
 3041 0210 5200     		lsls	r2, r2, #1
 3042 0212 20E7     		b	.L171
 3043              	.L206:
 3044 0214 8022     		movs	r2, #128
 3045 0216 9200     		lsls	r2, r2, #2
 3046 0218 1DE7     		b	.L171
 3047              	.L207:
 3048 021a 8022     		movs	r2, #128
 3049 021c D200     		lsls	r2, r2, #3
 3050 021e 1AE7     		b	.L171
 3051              	.L208:
 3052 0220 8022     		movs	r2, #128
 3053 0222 1201     		lsls	r2, r2, #4
 3054 0224 17E7     		b	.L171
 3055              	.L209:
 3056 0226 8022     		movs	r2, #128
 3057 0228 5201     		lsls	r2, r2, #5
 3058 022a 14E7     		b	.L171
 3059              	.L210:
 3060 022c 8022     		movs	r2, #128
 3061 022e 9201     		lsls	r2, r2, #6
 3062 0230 11E7     		b	.L171
ARM GAS  /tmp/ccPLPcMa.s 			page 205


 3063              	.L211:
 3064 0232 8022     		movs	r2, #128
 3065 0234 D201     		lsls	r2, r2, #7
 3066 0236 0EE7     		b	.L171
 3067              	.L212:
 3068 0238 8022     		movs	r2, #128
 3069 023a 1202     		lsls	r2, r2, #8
 3070 023c 0BE7     		b	.L171
 3071              	.L213:
 3072 023e 8022     		movs	r2, #128
 3073 0240 5202     		lsls	r2, r2, #9
 3074 0242 08E7     		b	.L171
 3075              	.L214:
 3076 0244 8022     		movs	r2, #128
 3077 0246 9202     		lsls	r2, r2, #10
 3078 0248 05E7     		b	.L171
 3079              	.L215:
 3080 024a 0122     		movs	r2, #1
 3081 024c 03E7     		b	.L171
 3082              	.L224:
 3083 024e C046     		.align	2
 3084              	.L223:
 3085 0250 0000C07C 		.word	2092957696
 3086 0254 FFFF1700 		.word	1572863
 3087 0258 FFFF3F83 		.word	-2092957697
 3088 025c FFFFFEFF 		.word	-65537
 3089              	.L164:
2525:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
 3090              		.loc 1 2525 11 is_stmt 1 view .LVU803
 3091              	.LVL189:
 3092              	.LBB208:
 3093              	.LBI208:
3669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3094              		.loc 2 3669 22 view .LVU804
 3095              	.LBB209:
3675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3096              		.loc 2 3675 3 view .LVU805
3677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   {
 3097              		.loc 2 3677 3 view .LVU806
3683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
 3098              		.loc 2 3683 5 view .LVU807
3683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
 3099              		.loc 2 3683 12 is_stmt 0 view .LVU808
 3100 0260 A033     		adds	r3, r3, #160
 3101              	.LVL190:
3683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
 3102              		.loc 2 3683 12 view .LVU809
 3103 0262 550D     		lsrs	r5, r2, #21
 3104 0264 AD00     		lsls	r5, r5, #2
 3105 0266 0424     		movs	r4, #4
 3106 0268 2C40     		ands	r4, r5
 3107 026a 1B19     		adds	r3, r3, r4
 3108              	.LVL191:
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 3109              		.loc 2 3686 3 is_stmt 1 view .LVU810
 3110 026c 1C68     		ldr	r4, [r3]
 3111 026e 394D     		ldr	r5, .L225
ARM GAS  /tmp/ccPLPcMa.s 			page 206


 3112 0270 1540     		ands	r5, r2
 3113 0272 AC43     		bics	r4, r5
 3114 0274 384D     		ldr	r5, .L225+4
 3115 0276 2A40     		ands	r2, r5
 3116              	.LVL192:
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 3117              		.loc 2 3686 3 is_stmt 0 view .LVU811
 3118 0278 2243     		orrs	r2, r4
 3119 027a 1A60     		str	r2, [r3]
 3120              	.LVL193:
 3121              	.L169:
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 3122              		.loc 2 3686 3 view .LVU812
 3123              	.LBE209:
 3124              	.LBE208:
2533:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3125              		.loc 1 2533 7 is_stmt 1 view .LVU813
2533:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3126              		.loc 1 2533 10 is_stmt 0 view .LVU814
 3127 027c 374B     		ldr	r3, .L225+8
 3128 027e 0A68     		ldr	r2, [r1]
 3129 0280 9A42     		cmp	r2, r3
 3130 0282 38D0     		beq	.L219
2558:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3131              		.loc 1 2558 9 is_stmt 1 view .LVU815
 3132 0284 836D     		ldr	r3, [r0, #88]
 3133 0286 364A     		ldr	r2, .L225+12
 3134 0288 1340     		ands	r3, r2
 3135 028a 8365     		str	r3, [r0, #88]
2564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3136              		.loc 1 2564 9 view .LVU816
 3137 028c 0368     		ldr	r3, [r0]
 3138              	.LVL194:
 3139              	.LBB210:
 3140              	.LBI210:
4751:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3141              		.loc 2 4751 22 view .LVU817
 3142              	.LBB211:
4753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3143              		.loc 2 4753 3 view .LVU818
 3144 028e 8022     		movs	r2, #128
 3145 0290 9200     		lsls	r2, r2, #2
 3146 0292 1A60     		str	r2, [r3]
 3147              	.LVL195:
4753:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3148              		.loc 2 4753 3 is_stmt 0 view .LVU819
 3149              	.LBE211:
 3150              	.LBE210:
2567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3151              		.loc 1 2567 9 is_stmt 1 view .LVU820
2567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3152              		.loc 1 2567 28 is_stmt 0 view .LVU821
 3153 0294 0B7B     		ldrb	r3, [r1, #12]
2567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3154              		.loc 1 2567 12 view .LVU822
 3155 0296 012B     		cmp	r3, #1
 3156 0298 44D0     		beq	.L220
ARM GAS  /tmp/ccPLPcMa.s 			page 207


2573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 3157              		.loc 1 2573 11 is_stmt 1 view .LVU823
 3158 029a 0268     		ldr	r2, [r0]
 3159              	.LVL196:
 3160              	.LBB212:
 3161              	.LBI212:
4961:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4962:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4963:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 2.
4964:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
4965:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4966:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4967:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4968:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
4969:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4970:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
4971:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
4972:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
4973:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** /**
4974:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 3.
4975:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
4976:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @param  ADCx ADC instance
4977:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   * @retval None
4978:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   */
4979:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
 3162              		.loc 2 4979 22 view .LVU824
 3163              	.LBB213:
4980:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
4981:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 3164              		.loc 2 4981 3 view .LVU825
 3165 029c 5368     		ldr	r3, [r2, #4]
 3166 029e 314C     		ldr	r4, .L225+16
 3167 02a0 2340     		ands	r3, r4
 3168 02a2 5360     		str	r3, [r2, #4]
 3169              	.LVL197:
 3170              	.L158:
 3171              		.loc 2 4981 3 is_stmt 0 view .LVU826
 3172              	.LBE213:
 3173              	.LBE212:
2581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 3174              		.loc 1 2581 3 is_stmt 1 view .LVU827
2581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 3175              		.loc 1 2581 22 is_stmt 0 view .LVU828
 3176 02a4 0C68     		ldr	r4, [r1]
2581:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 3177              		.loc 1 2581 6 view .LVU829
 3178 02a6 304B     		ldr	r3, .L225+20
 3179 02a8 9C42     		cmp	r4, r3
 3180 02aa 42D0     		beq	.L221
2595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 3181              		.loc 1 2595 5 is_stmt 1 view .LVU830
2595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = AnalogWDGConfig->LowThreshold;
 3182              		.loc 1 2595 32 is_stmt 0 view .LVU831
 3183 02ac 0D69     		ldr	r5, [r1, #16]
 3184              	.LVL198:
2596:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 3185              		.loc 1 2596 5 is_stmt 1 view .LVU832
ARM GAS  /tmp/ccPLPcMa.s 			page 208


2596:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 3186              		.loc 1 2596 32 is_stmt 0 view .LVU833
 3187 02ae 4969     		ldr	r1, [r1, #20]
 3188              	.LVL199:
 3189              	.L176:
2600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                                   tmpAWDLowThresholdShifted);
 3190              		.loc 1 2600 3 is_stmt 1 view .LVU834
 3191              	.LBB214:
 3192              	.LBI214:
3886:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****                                                      uint32_t AWDThresholdLowValue)
 3193              		.loc 2 3886 22 view .LVU835
 3194              	.LBB215:
3894:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3195              		.loc 2 3894 3 view .LVU836
3894:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3196              		.loc 2 3894 25 is_stmt 0 view .LVU837
 3197 02b0 0268     		ldr	r2, [r0]
 3198 02b2 2032     		adds	r2, r2, #32
 3199 02b4 260D     		lsrs	r6, r4, #20
 3200 02b6 0323     		movs	r3, #3
 3201 02b8 3340     		ands	r3, r6
 3202 02ba 640D     		lsrs	r4, r4, #21
 3203              	.LVL200:
3894:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3204              		.loc 2 3894 25 view .LVU838
 3205 02bc 0126     		movs	r6, #1
 3206 02be 3440     		ands	r4, r6
 3207 02c0 1B19     		adds	r3, r3, r4
 3208 02c2 9B00     		lsls	r3, r3, #2
 3209 02c4 D318     		adds	r3, r2, r3
 3210              	.LVL201:
3896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
 3211              		.loc 2 3896 3 is_stmt 1 view .LVU839
 3212 02c6 1A68     		ldr	r2, [r3]
 3213 02c8 284C     		ldr	r4, .L225+24
 3214 02ca 2240     		ands	r2, r4
 3215 02cc 2D04     		lsls	r5, r5, #16
 3216              	.LVL202:
3896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
 3217              		.loc 2 3896 3 is_stmt 0 view .LVU840
 3218 02ce 2943     		orrs	r1, r5
 3219              	.LVL203:
3896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
 3220              		.loc 2 3896 3 view .LVU841
 3221 02d0 0A43     		orrs	r2, r1
 3222 02d2 1A60     		str	r2, [r3]
 3223              	.LVL204:
3896:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
 3224              		.loc 2 3896 3 view .LVU842
 3225              	.LBE215:
 3226              	.LBE214:
2604:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3227              		.loc 1 2604 3 is_stmt 1 view .LVU843
2604:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3228              		.loc 1 2604 3 view .LVU844
 3229 02d4 5423     		movs	r3, #84
 3230 02d6 0022     		movs	r2, #0
ARM GAS  /tmp/ccPLPcMa.s 			page 209


 3231 02d8 C254     		strb	r2, [r0, r3]
2604:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3232              		.loc 1 2604 3 view .LVU845
2607:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3233              		.loc 1 2607 3 view .LVU846
2607:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3234              		.loc 1 2607 10 is_stmt 0 view .LVU847
 3235 02da 0020     		movs	r0, #0
 3236              	.LVL205:
 3237              	.L157:
2608:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3238              		.loc 1 2608 1 view .LVU848
 3239              		@ sp needed
 3240 02dc F0BD     		pop	{r4, r5, r6, r7, pc}
 3241              	.LVL206:
 3242              	.L165:
2529:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
 3243              		.loc 1 2529 11 is_stmt 1 view .LVU849
 3244              	.LBB216:
 3245              	.LBI216:
3669:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3246              		.loc 2 3669 22 view .LVU850
 3247              	.LBB217:
3675:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3248              		.loc 2 3675 3 view .LVU851
3677:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   {
 3249              		.loc 2 3677 3 view .LVU852
3683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
 3250              		.loc 2 3683 5 view .LVU853
3683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
 3251              		.loc 2 3683 12 is_stmt 0 view .LVU854
 3252 02de A033     		adds	r3, r3, #160
 3253              	.LVL207:
3683:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****   }
 3254              		.loc 2 3683 12 view .LVU855
 3255 02e0 550D     		lsrs	r5, r2, #21
 3256 02e2 AD00     		lsls	r5, r5, #2
 3257 02e4 0424     		movs	r4, #4
 3258 02e6 2C40     		ands	r4, r5
 3259 02e8 1B19     		adds	r3, r3, r4
 3260              	.LVL208:
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 3261              		.loc 2 3686 3 is_stmt 1 view .LVU856
 3262 02ea 1C68     		ldr	r4, [r3]
 3263 02ec 194D     		ldr	r5, .L225
 3264 02ee 2A40     		ands	r2, r5
 3265              	.LVL209:
3686:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 3266              		.loc 2 3686 3 is_stmt 0 view .LVU857
 3267 02f0 9443     		bics	r4, r2
 3268 02f2 1C60     		str	r4, [r3]
 3269              	.LVL210:
3689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3270              		.loc 2 3689 1 view .LVU858
 3271 02f4 C2E7     		b	.L169
 3272              	.LVL211:
 3273              	.L219:
ARM GAS  /tmp/ccPLPcMa.s 			page 210


3689:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3274              		.loc 2 3689 1 view .LVU859
 3275              	.LBE217:
 3276              	.LBE216:
2536:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3277              		.loc 1 2536 9 is_stmt 1 view .LVU860
 3278 02f6 836D     		ldr	r3, [r0, #88]
 3279 02f8 1D4A     		ldr	r2, .L225+28
 3280 02fa 1340     		ands	r3, r2
 3281 02fc 8365     		str	r3, [r0, #88]
2542:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3282              		.loc 1 2542 9 view .LVU861
 3283 02fe 0368     		ldr	r3, [r0]
 3284              	.LVL212:
 3285              	.LBB218:
 3286              	.LBI218:
4740:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3287              		.loc 2 4740 22 view .LVU862
 3288              	.LBB219:
4742:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3289              		.loc 2 4742 3 view .LVU863
 3290 0300 8022     		movs	r2, #128
 3291 0302 5200     		lsls	r2, r2, #1
 3292 0304 1A60     		str	r2, [r3]
 3293              	.LVL213:
4742:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3294              		.loc 2 4742 3 is_stmt 0 view .LVU864
 3295              	.LBE219:
 3296              	.LBE218:
2545:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3297              		.loc 1 2545 9 is_stmt 1 view .LVU865
2545:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3298              		.loc 1 2545 28 is_stmt 0 view .LVU866
 3299 0306 0B7B     		ldrb	r3, [r1, #12]
2545:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3300              		.loc 1 2545 12 view .LVU867
 3301 0308 012B     		cmp	r3, #1
 3302 030a 05D0     		beq	.L222
2551:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 3303              		.loc 1 2551 11 is_stmt 1 view .LVU868
 3304 030c 0268     		ldr	r2, [r0]
 3305              	.LVL214:
 3306              	.LBB220:
 3307              	.LBI220:
4968:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3308              		.loc 2 4968 22 view .LVU869
 3309              	.LBB221:
4970:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3310              		.loc 2 4970 3 view .LVU870
 3311 030e 5368     		ldr	r3, [r2, #4]
 3312 0310 184C     		ldr	r4, .L225+32
 3313 0312 2340     		ands	r3, r4
 3314 0314 5360     		str	r3, [r2, #4]
4971:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3315              		.loc 2 4971 1 is_stmt 0 view .LVU871
 3316 0316 C5E7     		b	.L158
 3317              	.LVL215:
ARM GAS  /tmp/ccPLPcMa.s 			page 211


 3318              	.L222:
4971:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3319              		.loc 2 4971 1 view .LVU872
 3320              	.LBE221:
 3321              	.LBE220:
2547:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 3322              		.loc 1 2547 11 is_stmt 1 view .LVU873
 3323 0318 0268     		ldr	r2, [r0]
 3324              	.LVL216:
 3325              	.LBB222:
 3326              	.LBI222:
4858:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3327              		.loc 2 4858 22 view .LVU874
 3328              	.LBB223:
4860:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3329              		.loc 2 4860 3 view .LVU875
 3330 031a 5468     		ldr	r4, [r2, #4]
 3331 031c FF33     		adds	r3, r3, #255
 3332 031e 2343     		orrs	r3, r4
 3333 0320 5360     		str	r3, [r2, #4]
4861:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3334              		.loc 2 4861 1 is_stmt 0 view .LVU876
 3335 0322 BFE7     		b	.L158
 3336              	.LVL217:
 3337              	.L220:
4861:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3338              		.loc 2 4861 1 view .LVU877
 3339              	.LBE223:
 3340              	.LBE222:
2569:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 3341              		.loc 1 2569 11 is_stmt 1 view .LVU878
 3342 0324 0268     		ldr	r2, [r0]
 3343              	.LVL218:
 3344              	.LBB224:
 3345              	.LBI224:
4869:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3346              		.loc 2 4869 22 view .LVU879
 3347              	.LBB225:
4871:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3348              		.loc 2 4871 3 view .LVU880
 3349 0326 5468     		ldr	r4, [r2, #4]
 3350 0328 8023     		movs	r3, #128
 3351 032a 9B00     		lsls	r3, r3, #2
 3352 032c 2343     		orrs	r3, r4
 3353 032e 5360     		str	r3, [r2, #4]
4872:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3354              		.loc 2 4872 1 is_stmt 0 view .LVU881
 3355 0330 B8E7     		b	.L158
 3356              	.LVL219:
 3357              	.L221:
4872:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3358              		.loc 2 4872 1 view .LVU882
 3359              	.LBE225:
 3360              	.LBE224:
2586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 3361              		.loc 1 2586 5 is_stmt 1 view .LVU883
2586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
ARM GAS  /tmp/ccPLPcMa.s 			page 212


 3362              		.loc 1 2586 34 is_stmt 0 view .LVU884
 3363 0332 0768     		ldr	r7, [r0]
 3364 0334 FB68     		ldr	r3, [r7, #12]
 3365 0336 DB08     		lsrs	r3, r3, #3
 3366 0338 0326     		movs	r6, #3
 3367 033a 3340     		ands	r3, r6
 3368 033c 5B00     		lsls	r3, r3, #1
2586:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 3369              		.loc 1 2586 32 view .LVU885
 3370 033e 0D69     		ldr	r5, [r1, #16]
 3371 0340 9D40     		lsls	r5, r5, r3
 3372              	.LVL220:
2587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 3373              		.loc 1 2587 5 is_stmt 1 view .LVU886
2587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 3374              		.loc 1 2587 34 is_stmt 0 view .LVU887
 3375 0342 4969     		ldr	r1, [r1, #20]
 3376              	.LVL221:
2587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 3377              		.loc 1 2587 34 view .LVU888
 3378 0344 FB68     		ldr	r3, [r7, #12]
 3379 0346 DB08     		lsrs	r3, r3, #3
 3380 0348 1E40     		ands	r6, r3
 3381 034a 7600     		lsls	r6, r6, #1
2587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 3382              		.loc 1 2587 32 view .LVU889
 3383 034c B140     		lsls	r1, r1, r6
 3384              	.LVL222:
2587:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 3385              		.loc 1 2587 32 view .LVU890
 3386 034e AFE7     		b	.L176
 3387              	.LVL223:
 3388              	.L177:
2457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3389              		.loc 1 2457 3 view .LVU891
 3390 0350 0220     		movs	r0, #2
 3391              	.LVL224:
2457:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3392              		.loc 1 2457 3 view .LVU892
 3393 0352 C3E7     		b	.L157
 3394              	.L226:
 3395              		.align	2
 3396              	.L225:
 3397 0354 FFFFC77C 		.word	2093481983
 3398 0358 FFFF8700 		.word	8912895
 3399 035c FFFF1700 		.word	1572863
 3400 0360 FFFFFBFF 		.word	-262145
 3401 0364 FFFDFFFF 		.word	-513
 3402 0368 0000C07C 		.word	2092957696
 3403 036c 00F000F0 		.word	-268374016
 3404 0370 FFFFFDFF 		.word	-131073
 3405 0374 FFFEFFFF 		.word	-257
 3406              		.cfi_endproc
 3407              	.LFE471:
 3409              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 3410              		.align	1
 3411              		.global	HAL_ADC_GetState
ARM GAS  /tmp/ccPLPcMa.s 			page 213


 3412              		.syntax unified
 3413              		.code	16
 3414              		.thumb_func
 3415              		.fpu softvfp
 3417              	HAL_ADC_GetState:
 3418              	.LVL225:
 3419              	.LFB472:
2643:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
 3420              		.loc 1 2643 1 is_stmt 1 view -0
 3421              		.cfi_startproc
 3422              		@ args = 0, pretend = 0, frame = 0
 3423              		@ frame_needed = 0, uses_anonymous_args = 0
 3424              		@ link register save eliminated.
2645:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3425              		.loc 1 2645 3 view .LVU894
2648:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3426              		.loc 1 2648 3 view .LVU895
2648:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3427              		.loc 1 2648 14 is_stmt 0 view .LVU896
 3428 0000 806D     		ldr	r0, [r0, #88]
 3429              	.LVL226:
2649:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3430              		.loc 1 2649 1 view .LVU897
 3431              		@ sp needed
 3432 0002 7047     		bx	lr
 3433              		.cfi_endproc
 3434              	.LFE472:
 3436              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 3437              		.align	1
 3438              		.global	HAL_ADC_GetError
 3439              		.syntax unified
 3440              		.code	16
 3441              		.thumb_func
 3442              		.fpu softvfp
 3444              	HAL_ADC_GetError:
 3445              	.LVL227:
 3446              	.LFB473:
2657:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   /* Check the parameters */
 3447              		.loc 1 2657 1 is_stmt 1 view -0
 3448              		.cfi_startproc
 3449              		@ args = 0, pretend = 0, frame = 0
 3450              		@ frame_needed = 0, uses_anonymous_args = 0
 3451              		@ link register save eliminated.
2659:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3452              		.loc 1 2659 3 view .LVU899
2661:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3453              		.loc 1 2661 3 view .LVU900
2661:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3454              		.loc 1 2661 14 is_stmt 0 view .LVU901
 3455 0000 C06D     		ldr	r0, [r0, #92]
 3456              	.LVL228:
2662:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3457              		.loc 1 2662 1 view .LVU902
 3458              		@ sp needed
 3459 0002 7047     		bx	lr
 3460              		.cfi_endproc
 3461              	.LFE473:
ARM GAS  /tmp/ccPLPcMa.s 			page 214


 3463              		.section	.text.ADC_ConversionStop,"ax",%progbits
 3464              		.align	1
 3465              		.global	ADC_ConversionStop
 3466              		.syntax unified
 3467              		.code	16
 3468              		.thumb_func
 3469              		.fpu softvfp
 3471              	ADC_ConversionStop:
 3472              	.LVL229:
 3473              	.LFB474:
2684:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
 3474              		.loc 1 2684 1 is_stmt 1 view -0
 3475              		.cfi_startproc
 3476              		@ args = 0, pretend = 0, frame = 0
 3477              		@ frame_needed = 0, uses_anonymous_args = 0
2684:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
 3478              		.loc 1 2684 1 is_stmt 0 view .LVU904
 3479 0000 70B5     		push	{r4, r5, r6, lr}
 3480              	.LCFI11:
 3481              		.cfi_def_cfa_offset 16
 3482              		.cfi_offset 4, -16
 3483              		.cfi_offset 5, -12
 3484              		.cfi_offset 6, -8
 3485              		.cfi_offset 14, -4
 3486 0002 0400     		movs	r4, r0
2685:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3487              		.loc 1 2685 3 is_stmt 1 view .LVU905
2688:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3488              		.loc 1 2688 3 view .LVU906
2692:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 3489              		.loc 1 2692 3 view .LVU907
2692:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 3490              		.loc 1 2692 7 is_stmt 0 view .LVU908
 3491 0004 0368     		ldr	r3, [r0]
 3492              	.LVL230:
 3493              	.LBB226:
 3494              	.LBI226:
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3495              		.loc 2 4427 26 is_stmt 1 view .LVU909
 3496              	.LBB227:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3497              		.loc 2 4429 3 view .LVU910
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3498              		.loc 2 4429 12 is_stmt 0 view .LVU911
 3499 0006 9A68     		ldr	r2, [r3, #8]
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3500              		.loc 2 4429 74 view .LVU912
 3501 0008 5207     		lsls	r2, r2, #29
 3502 000a 20D5     		bpl	.L234
 3503              	.LVL231:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3504              		.loc 2 4429 74 view .LVU913
 3505              	.LBE227:
 3506              	.LBE226:
2696:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3507              		.loc 1 2696 5 is_stmt 1 view .LVU914
 3508              	.LBB228:
ARM GAS  /tmp/ccPLPcMa.s 			page 215


 3509              	.LBI228:
4314:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3510              		.loc 2 4314 26 view .LVU915
 3511              	.LBB229:
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3512              		.loc 2 4316 3 view .LVU916
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3513              		.loc 2 4316 12 is_stmt 0 view .LVU917
 3514 000c 9A68     		ldr	r2, [r3, #8]
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3515              		.loc 2 4316 70 view .LVU918
 3516 000e 9207     		lsls	r2, r2, #30
 3517 0010 05D4     		bmi	.L231
 3518              	.LVL232:
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3519              		.loc 2 4316 70 view .LVU919
 3520              	.LBE229:
 3521              	.LBE228:
2699:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 3522              		.loc 1 2699 7 is_stmt 1 view .LVU920
 3523              	.LBB230:
 3524              	.LBI230:
4411:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3525              		.loc 2 4411 22 view .LVU921
 3526              	.LBB231:
4416:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3527              		.loc 2 4416 3 view .LVU922
 3528 0012 9A68     		ldr	r2, [r3, #8]
 3529 0014 0F49     		ldr	r1, .L236
 3530 0016 0A40     		ands	r2, r1
 3531 0018 1021     		movs	r1, #16
 3532 001a 0A43     		orrs	r2, r1
 3533 001c 9A60     		str	r2, [r3, #8]
 3534              	.LVL233:
 3535              	.L231:
4416:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3536              		.loc 2 4416 3 is_stmt 0 view .LVU923
 3537              	.LBE231:
 3538              	.LBE230:
2704:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3539              		.loc 1 2704 5 is_stmt 1 view .LVU924
2704:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3540              		.loc 1 2704 17 is_stmt 0 view .LVU925
 3541 001e FFF7FEFF 		bl	HAL_GetTick
 3542              	.LVL234:
2704:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3543              		.loc 1 2704 17 view .LVU926
 3544 0022 0500     		movs	r5, r0
 3545              	.LVL235:
2706:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3546              		.loc 1 2706 5 is_stmt 1 view .LVU927
 3547              	.L232:
2706:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3548              		.loc 1 2706 11 view .LVU928
2706:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3549              		.loc 1 2706 17 is_stmt 0 view .LVU929
 3550 0024 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccPLPcMa.s 			page 216


2706:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3551              		.loc 1 2706 27 view .LVU930
 3552 0026 9B68     		ldr	r3, [r3, #8]
2706:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3553              		.loc 1 2706 11 view .LVU931
 3554 0028 5B07     		lsls	r3, r3, #29
 3555 002a 0ED5     		bpl	.L235
2708:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3556              		.loc 1 2708 7 is_stmt 1 view .LVU932
2708:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3557              		.loc 1 2708 12 is_stmt 0 view .LVU933
 3558 002c FFF7FEFF 		bl	HAL_GetTick
 3559              	.LVL236:
2708:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3560              		.loc 1 2708 26 view .LVU934
 3561 0030 401B     		subs	r0, r0, r5
2708:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3562              		.loc 1 2708 10 view .LVU935
 3563 0032 0228     		cmp	r0, #2
 3564 0034 F6D9     		bls	.L232
2711:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3565              		.loc 1 2711 9 is_stmt 1 view .LVU936
 3566 0036 A36D     		ldr	r3, [r4, #88]
 3567 0038 1022     		movs	r2, #16
 3568 003a 1343     		orrs	r3, r2
 3569 003c A365     		str	r3, [r4, #88]
2714:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3570              		.loc 1 2714 9 view .LVU937
 3571 003e E36D     		ldr	r3, [r4, #92]
 3572 0040 0F3A     		subs	r2, r2, #15
 3573 0042 1343     		orrs	r3, r2
 3574 0044 E365     		str	r3, [r4, #92]
2716:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 3575              		.loc 1 2716 9 view .LVU938
2716:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 3576              		.loc 1 2716 16 is_stmt 0 view .LVU939
 3577 0046 0120     		movs	r0, #1
 3578 0048 02E0     		b	.L230
 3579              	.L235:
2723:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3580              		.loc 1 2723 10 view .LVU940
 3581 004a 0020     		movs	r0, #0
 3582 004c 00E0     		b	.L230
 3583              	.LVL237:
 3584              	.L234:
2723:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3585              		.loc 1 2723 10 view .LVU941
 3586 004e 0020     		movs	r0, #0
 3587              	.LVL238:
 3588              	.L230:
2724:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3589              		.loc 1 2724 1 view .LVU942
 3590              		@ sp needed
 3591              	.LVL239:
2724:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3592              		.loc 1 2724 1 view .LVU943
 3593 0050 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccPLPcMa.s 			page 217


 3594              	.L237:
 3595 0052 C046     		.align	2
 3596              	.L236:
 3597 0054 E8FFFF7F 		.word	2147483624
 3598              		.cfi_endproc
 3599              	.LFE474:
 3601              		.section	.text.ADC_Enable,"ax",%progbits
 3602              		.align	1
 3603              		.global	ADC_Enable
 3604              		.syntax unified
 3605              		.code	16
 3606              		.thumb_func
 3607              		.fpu softvfp
 3609              	ADC_Enable:
 3610              	.LVL240:
 3611              	.LFB475:
2734:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
 3612              		.loc 1 2734 1 is_stmt 1 view -0
 3613              		.cfi_startproc
 3614              		@ args = 0, pretend = 0, frame = 8
 3615              		@ frame_needed = 0, uses_anonymous_args = 0
2734:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
 3616              		.loc 1 2734 1 is_stmt 0 view .LVU945
 3617 0000 30B5     		push	{r4, r5, lr}
 3618              	.LCFI12:
 3619              		.cfi_def_cfa_offset 12
 3620              		.cfi_offset 4, -12
 3621              		.cfi_offset 5, -8
 3622              		.cfi_offset 14, -4
 3623 0002 83B0     		sub	sp, sp, #12
 3624              	.LCFI13:
 3625              		.cfi_def_cfa_offset 24
 3626 0004 0400     		movs	r4, r0
2735:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 3627              		.loc 1 2735 3 is_stmt 1 view .LVU946
2736:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3628              		.loc 1 2736 3 view .LVU947
2736:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3629              		.loc 1 2736 17 is_stmt 0 view .LVU948
 3630 0006 0023     		movs	r3, #0
 3631 0008 0193     		str	r3, [sp, #4]
2742:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 3632              		.loc 1 2742 3 is_stmt 1 view .LVU949
2742:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 3633              		.loc 1 2742 7 is_stmt 0 view .LVU950
 3634 000a 0368     		ldr	r3, [r0]
 3635              	.LVL241:
 3636              	.LBB232:
 3637              	.LBI232:
4303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3638              		.loc 2 4303 26 is_stmt 1 view .LVU951
 3639              	.LBB233:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3640              		.loc 2 4305 3 view .LVU952
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3641              		.loc 2 4305 12 is_stmt 0 view .LVU953
 3642 000c 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccPLPcMa.s 			page 218


4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3643              		.loc 2 4305 68 view .LVU954
 3644 000e D207     		lsls	r2, r2, #31
 3645 0010 4DD4     		bmi	.L247
 3646              	.LVL242:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3647              		.loc 2 4305 68 view .LVU955
 3648              	.LBE233:
 3649              	.LBE232:
2745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3650              		.loc 1 2745 5 is_stmt 1 view .LVU956
2745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3651              		.loc 1 2745 24 is_stmt 0 view .LVU957
 3652 0012 9968     		ldr	r1, [r3, #8]
2745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3653              		.loc 1 2745 29 view .LVU958
 3654 0014 274A     		ldr	r2, .L253
2745:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3655              		.loc 1 2745 8 view .LVU959
 3656 0016 1142     		tst	r1, r2
 3657 0018 17D1     		bne	.L249
2757:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3658              		.loc 1 2757 5 is_stmt 1 view .LVU960
 3659              	.LVL243:
 3660              	.LBB234:
 3661              	.LBI234:
4264:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3662              		.loc 2 4264 22 view .LVU961
 3663              	.LBB235:
4269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3664              		.loc 2 4269 3 view .LVU962
 3665 001a 9A68     		ldr	r2, [r3, #8]
 3666 001c 2649     		ldr	r1, .L253+4
 3667 001e 0A40     		ands	r2, r1
 3668 0020 0121     		movs	r1, #1
 3669 0022 0A43     		orrs	r2, r1
 3670 0024 9A60     		str	r2, [r3, #8]
 3671              	.LVL244:
4269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3672              		.loc 2 4269 3 is_stmt 0 view .LVU963
 3673              	.LBE235:
 3674              	.LBE234:
2759:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3675              		.loc 1 2759 5 is_stmt 1 view .LVU964
 3676              	.LBB236:
 3677              	.LBI236:
1881:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3678              		.loc 2 1881 26 view .LVU965
 3679              	.LBB237:
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3680              		.loc 2 1883 3 view .LVU966
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3681              		.loc 2 1883 21 is_stmt 0 view .LVU967
 3682 0026 254B     		ldr	r3, .L253+8
 3683 0028 1B68     		ldr	r3, [r3]
 3684              	.LVL245:
1883:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
ARM GAS  /tmp/ccPLPcMa.s 			page 219


 3685              		.loc 2 1883 21 view .LVU968
 3686              	.LBE237:
 3687              	.LBE236:
2759:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3688              		.loc 1 2759 8 view .LVU969
 3689 002a 1B02     		lsls	r3, r3, #8
 3690 002c 17D5     		bpl	.L241
2766:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       while (wait_loop_index != 0UL)
 3691              		.loc 1 2766 7 is_stmt 1 view .LVU970
2766:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       while (wait_loop_index != 0UL)
 3692              		.loc 1 2766 75 is_stmt 0 view .LVU971
 3693 002e 244B     		ldr	r3, .L253+12
 3694 0030 1868     		ldr	r0, [r3]
 3695              	.LVL246:
2766:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       while (wait_loop_index != 0UL)
 3696              		.loc 1 2766 75 view .LVU972
 3697 0032 2449     		ldr	r1, .L253+16
 3698 0034 FFF7FEFF 		bl	__aeabi_uidiv
 3699              	.LVL247:
2766:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       while (wait_loop_index != 0UL)
 3700              		.loc 1 2766 115 view .LVU973
 3701 0038 0130     		adds	r0, r0, #1
2766:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       while (wait_loop_index != 0UL)
 3702              		.loc 1 2766 23 view .LVU974
 3703 003a 0190     		str	r0, [sp, #4]
2767:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3704              		.loc 1 2767 7 is_stmt 1 view .LVU975
 3705              	.L242:
2767:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3706              		.loc 1 2767 13 view .LVU976
2767:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3707              		.loc 1 2767 30 is_stmt 0 view .LVU977
 3708 003c 019B     		ldr	r3, [sp, #4]
2767:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3709              		.loc 1 2767 13 view .LVU978
 3710 003e 002B     		cmp	r3, #0
 3711 0040 0DD0     		beq	.L241
2769:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 3712              		.loc 1 2769 9 is_stmt 1 view .LVU979
2769:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 3713              		.loc 1 2769 24 is_stmt 0 view .LVU980
 3714 0042 019B     		ldr	r3, [sp, #4]
 3715 0044 013B     		subs	r3, r3, #1
 3716 0046 0193     		str	r3, [sp, #4]
 3717 0048 F8E7     		b	.L242
 3718              	.LVL248:
 3719              	.L249:
2748:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3720              		.loc 1 2748 7 is_stmt 1 view .LVU981
 3721 004a 836D     		ldr	r3, [r0, #88]
 3722 004c 1022     		movs	r2, #16
 3723 004e 1343     		orrs	r3, r2
 3724 0050 8365     		str	r3, [r0, #88]
2751:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3725              		.loc 1 2751 7 view .LVU982
 3726 0052 C36D     		ldr	r3, [r0, #92]
 3727 0054 0F3A     		subs	r2, r2, #15
ARM GAS  /tmp/ccPLPcMa.s 			page 220


 3728 0056 1343     		orrs	r3, r2
 3729 0058 C365     		str	r3, [r0, #92]
2753:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 3730              		.loc 1 2753 7 view .LVU983
2753:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 3731              		.loc 1 2753 14 is_stmt 0 view .LVU984
 3732 005a 0120     		movs	r0, #1
 3733              	.LVL249:
2753:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 3734              		.loc 1 2753 14 view .LVU985
 3735 005c 28E0     		b	.L239
 3736              	.L241:
2775:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3737              		.loc 1 2775 5 is_stmt 1 view .LVU986
2775:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3738              		.loc 1 2775 19 is_stmt 0 view .LVU987
 3739 005e 637E     		ldrb	r3, [r4, #25]
2775:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3740              		.loc 1 2775 8 view .LVU988
 3741 0060 012B     		cmp	r3, #1
 3742 0062 01D1     		bne	.L250
2810:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3743              		.loc 1 2810 10 view .LVU989
 3744 0064 0020     		movs	r0, #0
 3745 0066 23E0     		b	.L239
 3746              	.L250:
2778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3747              		.loc 1 2778 7 is_stmt 1 view .LVU990
2778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3748              		.loc 1 2778 19 is_stmt 0 view .LVU991
 3749 0068 FFF7FEFF 		bl	HAL_GetTick
 3750              	.LVL250:
 3751 006c 0500     		movs	r5, r0
 3752              	.LVL251:
2780:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3753              		.loc 1 2780 7 is_stmt 1 view .LVU992
2780:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3754              		.loc 1 2780 13 is_stmt 0 view .LVU993
 3755 006e 04E0     		b	.L244
 3756              	.LVL252:
 3757              	.L245:
2795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3758              		.loc 1 2795 9 is_stmt 1 view .LVU994
2795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3759              		.loc 1 2795 14 is_stmt 0 view .LVU995
 3760 0070 FFF7FEFF 		bl	HAL_GetTick
 3761              	.LVL253:
2795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3762              		.loc 1 2795 28 view .LVU996
 3763 0074 401B     		subs	r0, r0, r5
2795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3764              		.loc 1 2795 12 view .LVU997
 3765 0076 0228     		cmp	r0, #2
 3766 0078 0DD8     		bhi	.L251
 3767              	.L244:
2780:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3768              		.loc 1 2780 13 is_stmt 1 view .LVU998
ARM GAS  /tmp/ccPLPcMa.s 			page 221


2780:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3769              		.loc 1 2780 14 is_stmt 0 view .LVU999
 3770 007a 2368     		ldr	r3, [r4]
 3771 007c 1A68     		ldr	r2, [r3]
2780:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 3772              		.loc 1 2780 13 view .LVU1000
 3773 007e D207     		lsls	r2, r2, #31
 3774 0080 13D4     		bmi	.L252
2790:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         {
 3775              		.loc 1 2790 9 is_stmt 1 view .LVU1001
 3776              	.LVL254:
 3777              	.LBB238:
 3778              	.LBI238:
4303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3779              		.loc 2 4303 26 view .LVU1002
 3780              	.LBB239:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3781              		.loc 2 4305 3 view .LVU1003
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3782              		.loc 2 4305 12 is_stmt 0 view .LVU1004
 3783 0082 9A68     		ldr	r2, [r3, #8]
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3784              		.loc 2 4305 68 view .LVU1005
 3785 0084 D207     		lsls	r2, r2, #31
 3786 0086 F3D4     		bmi	.L245
 3787              	.LVL255:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3788              		.loc 2 4305 68 view .LVU1006
 3789              	.LBE239:
 3790              	.LBE238:
2792:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 3791              		.loc 1 2792 11 is_stmt 1 view .LVU1007
 3792              	.LBB240:
 3793              	.LBI240:
4264:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3794              		.loc 2 4264 22 view .LVU1008
 3795              	.LBB241:
4269:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3796              		.loc 2 4269 3 view .LVU1009
 3797 0088 9A68     		ldr	r2, [r3, #8]
 3798 008a 0B49     		ldr	r1, .L253+4
 3799 008c 0A40     		ands	r2, r1
 3800 008e 0121     		movs	r1, #1
 3801 0090 0A43     		orrs	r2, r1
 3802 0092 9A60     		str	r2, [r3, #8]
4272:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3803              		.loc 2 4272 1 is_stmt 0 view .LVU1010
 3804 0094 ECE7     		b	.L245
 3805              	.LVL256:
 3806              	.L251:
4272:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3807              		.loc 2 4272 1 view .LVU1011
 3808              	.LBE241:
 3809              	.LBE240:
2798:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3810              		.loc 1 2798 11 is_stmt 1 view .LVU1012
 3811 0096 A36D     		ldr	r3, [r4, #88]
ARM GAS  /tmp/ccPLPcMa.s 			page 222


 3812 0098 1022     		movs	r2, #16
 3813 009a 1343     		orrs	r3, r2
 3814 009c A365     		str	r3, [r4, #88]
2801:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3815              		.loc 1 2801 11 view .LVU1013
 3816 009e E36D     		ldr	r3, [r4, #92]
 3817 00a0 0F3A     		subs	r2, r2, #15
 3818 00a2 1343     		orrs	r3, r2
 3819 00a4 E365     		str	r3, [r4, #92]
2803:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 3820              		.loc 1 2803 11 view .LVU1014
2803:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         }
 3821              		.loc 1 2803 18 is_stmt 0 view .LVU1015
 3822 00a6 0120     		movs	r0, #1
 3823 00a8 02E0     		b	.L239
 3824              	.L252:
2810:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3825              		.loc 1 2810 10 view .LVU1016
 3826 00aa 0020     		movs	r0, #0
 3827 00ac 00E0     		b	.L239
 3828              	.LVL257:
 3829              	.L247:
2810:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 3830              		.loc 1 2810 10 view .LVU1017
 3831 00ae 0020     		movs	r0, #0
 3832              	.LVL258:
 3833              	.L239:
2811:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3834              		.loc 1 2811 1 view .LVU1018
 3835 00b0 03B0     		add	sp, sp, #12
 3836              		@ sp needed
 3837              	.LVL259:
2811:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3838              		.loc 1 2811 1 view .LVU1019
 3839 00b2 30BD     		pop	{r4, r5, pc}
 3840              	.L254:
 3841              		.align	2
 3842              	.L253:
 3843 00b4 17000080 		.word	-2147483625
 3844 00b8 E8FFFF7F 		.word	2147483624
 3845 00bc 08270140 		.word	1073817352
 3846 00c0 00000000 		.word	SystemCoreClock
 3847 00c4 400D0300 		.word	200000
 3848              		.cfi_endproc
 3849              	.LFE475:
 3851              		.section	.text.HAL_ADC_Start,"ax",%progbits
 3852              		.align	1
 3853              		.global	HAL_ADC_Start
 3854              		.syntax unified
 3855              		.code	16
 3856              		.thumb_func
 3857              		.fpu softvfp
 3859              	HAL_ADC_Start:
 3860              	.LVL260:
 3861              	.LFB456:
1185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3862              		.loc 1 1185 1 is_stmt 1 view -0
ARM GAS  /tmp/ccPLPcMa.s 			page 223


 3863              		.cfi_startproc
 3864              		@ args = 0, pretend = 0, frame = 0
 3865              		@ frame_needed = 0, uses_anonymous_args = 0
1185:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3866              		.loc 1 1185 1 is_stmt 0 view .LVU1021
 3867 0000 10B5     		push	{r4, lr}
 3868              	.LCFI14:
 3869              		.cfi_def_cfa_offset 8
 3870              		.cfi_offset 4, -8
 3871              		.cfi_offset 14, -4
 3872 0002 0400     		movs	r4, r0
1186:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3873              		.loc 1 1186 3 is_stmt 1 view .LVU1022
1189:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3874              		.loc 1 1189 3 view .LVU1023
1192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 3875              		.loc 1 1192 3 view .LVU1024
1192:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 3876              		.loc 1 1192 7 is_stmt 0 view .LVU1025
 3877 0004 0368     		ldr	r3, [r0]
 3878              	.LVL261:
 3879              	.LBB242:
 3880              	.LBI242:
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3881              		.loc 2 4427 26 is_stmt 1 view .LVU1026
 3882              	.LBB243:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3883              		.loc 2 4429 3 view .LVU1027
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3884              		.loc 2 4429 12 is_stmt 0 view .LVU1028
 3885 0006 9B68     		ldr	r3, [r3, #8]
 3886              	.LVL262:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3887              		.loc 2 4429 74 view .LVU1029
 3888 0008 5B07     		lsls	r3, r3, #29
 3889 000a 24D4     		bmi	.L258
 3890              	.LVL263:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 3891              		.loc 2 4429 74 view .LVU1030
 3892              	.LBE243:
 3893              	.LBE242:
1195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3894              		.loc 1 1195 5 is_stmt 1 view .LVU1031
1195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3895              		.loc 1 1195 5 view .LVU1032
 3896 000c 5423     		movs	r3, #84
 3897 000e C35C     		ldrb	r3, [r0, r3]
 3898 0010 012B     		cmp	r3, #1
 3899 0012 22D0     		beq	.L259
1195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3900              		.loc 1 1195 5 discriminator 2 view .LVU1033
 3901 0014 5423     		movs	r3, #84
 3902 0016 0122     		movs	r2, #1
 3903 0018 C254     		strb	r2, [r0, r3]
1195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3904              		.loc 1 1195 5 discriminator 2 view .LVU1034
1198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 224


 3905              		.loc 1 1198 5 discriminator 2 view .LVU1035
1198:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3906              		.loc 1 1198 22 is_stmt 0 discriminator 2 view .LVU1036
 3907 001a FFF7FEFF 		bl	ADC_Enable
 3908              	.LVL264:
1201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3909              		.loc 1 1201 5 is_stmt 1 discriminator 2 view .LVU1037
1201:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 3910              		.loc 1 1201 8 is_stmt 0 discriminator 2 view .LVU1038
 3911 001e 0028     		cmp	r0, #0
 3912 0020 15D1     		bne	.L257
1206:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 3913              		.loc 1 1206 7 is_stmt 1 view .LVU1039
 3914 0022 A36D     		ldr	r3, [r4, #88]
 3915 0024 0E4A     		ldr	r2, .L260
 3916 0026 1A40     		ands	r2, r3
 3917 0028 8023     		movs	r3, #128
 3918 002a 5B00     		lsls	r3, r3, #1
 3919 002c 1343     		orrs	r3, r2
 3920 002e A365     		str	r3, [r4, #88]
1212:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3921              		.loc 1 1212 7 view .LVU1040
 3922 0030 0023     		movs	r3, #0
 3923 0032 E365     		str	r3, [r4, #92]
1216:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3924              		.loc 1 1216 7 view .LVU1041
 3925 0034 2268     		ldr	r2, [r4]
 3926 0036 1C21     		movs	r1, #28
 3927 0038 1160     		str	r1, [r2]
1221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3928              		.loc 1 1221 7 view .LVU1042
1221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3929              		.loc 1 1221 7 view .LVU1043
 3930 003a 5422     		movs	r2, #84
 3931 003c A354     		strb	r3, [r4, r2]
1221:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3932              		.loc 1 1221 7 view .LVU1044
1228:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 3933              		.loc 1 1228 7 view .LVU1045
 3934 003e 2268     		ldr	r2, [r4]
 3935              	.LVL265:
 3936              	.LBB244:
 3937              	.LBI244:
4391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 3938              		.loc 2 4391 22 view .LVU1046
 3939              	.LBB245:
4396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3940              		.loc 2 4396 3 view .LVU1047
 3941 0040 9368     		ldr	r3, [r2, #8]
 3942 0042 0849     		ldr	r1, .L260+4
 3943 0044 0B40     		ands	r3, r1
 3944 0046 0421     		movs	r1, #4
 3945 0048 0B43     		orrs	r3, r1
 3946 004a 9360     		str	r3, [r2, #8]
4399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3947              		.loc 2 4399 1 is_stmt 0 view .LVU1048
 3948 004c 04E0     		b	.L256
ARM GAS  /tmp/ccPLPcMa.s 			page 225


 3949              	.LVL266:
 3950              	.L257:
4399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 3951              		.loc 2 4399 1 view .LVU1049
 3952              	.LBE245:
 3953              	.LBE244:
1233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 3954              		.loc 1 1233 7 is_stmt 1 view .LVU1050
1233:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 3955              		.loc 1 1233 7 view .LVU1051
 3956 004e 5423     		movs	r3, #84
 3957 0050 0022     		movs	r2, #0
 3958 0052 E254     		strb	r2, [r4, r3]
 3959 0054 00E0     		b	.L256
 3960              	.LVL267:
 3961              	.L258:
1238:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 3962              		.loc 1 1238 20 is_stmt 0 view .LVU1052
 3963 0056 0220     		movs	r0, #2
 3964              	.LVL268:
 3965              	.L256:
1243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3966              		.loc 1 1243 1 view .LVU1053
 3967              		@ sp needed
 3968              	.LVL269:
1243:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3969              		.loc 1 1243 1 view .LVU1054
 3970 0058 10BD     		pop	{r4, pc}
 3971              	.LVL270:
 3972              	.L259:
1195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3973              		.loc 1 1195 5 view .LVU1055
 3974 005a 0220     		movs	r0, #2
 3975              	.LVL271:
1195:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 3976              		.loc 1 1195 5 view .LVU1056
 3977 005c FCE7     		b	.L256
 3978              	.L261:
 3979 005e C046     		.align	2
 3980              	.L260:
 3981 0060 FEF0FFFF 		.word	-3842
 3982 0064 E8FFFF7F 		.word	2147483624
 3983              		.cfi_endproc
 3984              	.LFE456:
 3986              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 3987              		.align	1
 3988              		.global	HAL_ADC_Start_IT
 3989              		.syntax unified
 3990              		.code	16
 3991              		.thumb_func
 3992              		.fpu softvfp
 3994              	HAL_ADC_Start_IT:
 3995              	.LVL272:
 3996              	.LFB460:
1563:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3997              		.loc 1 1563 1 is_stmt 1 view -0
 3998              		.cfi_startproc
ARM GAS  /tmp/ccPLPcMa.s 			page 226


 3999              		@ args = 0, pretend = 0, frame = 0
 4000              		@ frame_needed = 0, uses_anonymous_args = 0
1563:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4001              		.loc 1 1563 1 is_stmt 0 view .LVU1058
 4002 0000 10B5     		push	{r4, lr}
 4003              	.LCFI15:
 4004              		.cfi_def_cfa_offset 8
 4005              		.cfi_offset 4, -8
 4006              		.cfi_offset 14, -4
 4007 0002 0400     		movs	r4, r0
1564:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4008              		.loc 1 1564 3 is_stmt 1 view .LVU1059
1567:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4009              		.loc 1 1567 3 view .LVU1060
1570:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4010              		.loc 1 1570 3 view .LVU1061
1570:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4011              		.loc 1 1570 7 is_stmt 0 view .LVU1062
 4012 0004 0368     		ldr	r3, [r0]
 4013              	.LVL273:
 4014              	.LBB246:
 4015              	.LBI246:
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4016              		.loc 2 4427 26 is_stmt 1 view .LVU1063
 4017              	.LBB247:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4018              		.loc 2 4429 3 view .LVU1064
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4019              		.loc 2 4429 12 is_stmt 0 view .LVU1065
 4020 0006 9B68     		ldr	r3, [r3, #8]
 4021              	.LVL274:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4022              		.loc 2 4429 74 view .LVU1066
 4023 0008 5B07     		lsls	r3, r3, #29
 4024 000a 3ED4     		bmi	.L268
 4025              	.LVL275:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4026              		.loc 2 4429 74 view .LVU1067
 4027              	.LBE247:
 4028              	.LBE246:
1573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4029              		.loc 1 1573 5 is_stmt 1 view .LVU1068
1573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4030              		.loc 1 1573 5 view .LVU1069
 4031 000c 5423     		movs	r3, #84
 4032 000e C35C     		ldrb	r3, [r0, r3]
 4033 0010 012B     		cmp	r3, #1
 4034 0012 3CD0     		beq	.L269
1573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4035              		.loc 1 1573 5 discriminator 2 view .LVU1070
 4036 0014 5423     		movs	r3, #84
 4037 0016 0122     		movs	r2, #1
 4038 0018 C254     		strb	r2, [r0, r3]
1573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4039              		.loc 1 1573 5 discriminator 2 view .LVU1071
1576:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4040              		.loc 1 1576 5 discriminator 2 view .LVU1072
ARM GAS  /tmp/ccPLPcMa.s 			page 227


1576:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4041              		.loc 1 1576 22 is_stmt 0 discriminator 2 view .LVU1073
 4042 001a FFF7FEFF 		bl	ADC_Enable
 4043              	.LVL276:
1579:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4044              		.loc 1 1579 5 is_stmt 1 discriminator 2 view .LVU1074
1579:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4045              		.loc 1 1579 8 is_stmt 0 discriminator 2 view .LVU1075
 4046 001e 0028     		cmp	r0, #0
 4047 0020 2FD1     		bne	.L264
1584:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4048              		.loc 1 1584 7 is_stmt 1 view .LVU1076
 4049 0022 A36D     		ldr	r3, [r4, #88]
 4050 0024 1B4A     		ldr	r2, .L271
 4051 0026 1A40     		ands	r2, r3
 4052 0028 8023     		movs	r3, #128
 4053 002a 5B00     		lsls	r3, r3, #1
 4054 002c 1343     		orrs	r3, r2
 4055 002e A365     		str	r3, [r4, #88]
1591:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4056              		.loc 1 1591 7 view .LVU1077
 4057 0030 0023     		movs	r3, #0
 4058 0032 E365     		str	r3, [r4, #92]
1595:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4059              		.loc 1 1595 7 view .LVU1078
 4060 0034 2268     		ldr	r2, [r4]
 4061 0036 1C21     		movs	r1, #28
 4062 0038 1160     		str	r1, [r2]
1600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4063              		.loc 1 1600 7 view .LVU1079
1600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4064              		.loc 1 1600 7 view .LVU1080
 4065 003a 5422     		movs	r2, #84
 4066 003c A354     		strb	r3, [r4, r2]
1600:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4067              		.loc 1 1600 7 view .LVU1081
1603:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4068              		.loc 1 1603 7 view .LVU1082
 4069 003e 2268     		ldr	r2, [r4]
 4070 0040 5368     		ldr	r3, [r2, #4]
 4071 0042 8B43     		bics	r3, r1
 4072 0044 5360     		str	r3, [r2, #4]
1606:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 4073              		.loc 1 1606 7 view .LVU1083
 4074 0046 6369     		ldr	r3, [r4, #20]
 4075 0048 082B     		cmp	r3, #8
 4076 004a 14D0     		beq	.L270
1613:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
 4077              		.loc 1 1613 11 view .LVU1084
 4078 004c 2268     		ldr	r2, [r4]
 4079 004e 5368     		ldr	r3, [r2, #4]
 4080 0050 0421     		movs	r1, #4
 4081 0052 0B43     		orrs	r3, r1
 4082 0054 5360     		str	r3, [r2, #4]
1614:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 4083              		.loc 1 1614 11 view .LVU1085
 4084              	.L266:
ARM GAS  /tmp/ccPLPcMa.s 			page 228


1621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 4085              		.loc 1 1621 7 view .LVU1086
1621:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 4086              		.loc 1 1621 10 is_stmt 0 view .LVU1087
 4087 0056 236B     		ldr	r3, [r4, #48]
 4088 0058 002B     		cmp	r3, #0
 4089 005a 04D1     		bne	.L267
1623:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 4090              		.loc 1 1623 9 is_stmt 1 view .LVU1088
 4091 005c 2268     		ldr	r2, [r4]
 4092 005e 5368     		ldr	r3, [r2, #4]
 4093 0060 1021     		movs	r1, #16
 4094 0062 0B43     		orrs	r3, r1
 4095 0064 5360     		str	r3, [r2, #4]
 4096              	.L267:
1631:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4097              		.loc 1 1631 7 view .LVU1089
 4098 0066 2268     		ldr	r2, [r4]
 4099              	.LVL277:
 4100              	.LBB248:
 4101              	.LBI248:
4391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4102              		.loc 2 4391 22 view .LVU1090
 4103              	.LBB249:
4396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4104              		.loc 2 4396 3 view .LVU1091
 4105 0068 9368     		ldr	r3, [r2, #8]
 4106 006a 0B49     		ldr	r1, .L271+4
 4107 006c 0B40     		ands	r3, r1
 4108 006e 0421     		movs	r1, #4
 4109 0070 0B43     		orrs	r3, r1
 4110 0072 9360     		str	r3, [r2, #8]
4399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 4111              		.loc 2 4399 1 is_stmt 0 view .LVU1092
 4112 0074 0AE0     		b	.L263
 4113              	.LVL278:
 4114              	.L270:
4399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 4115              		.loc 2 4399 1 view .LVU1093
 4116              	.LBE249:
 4117              	.LBE248:
1609:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****           break;
 4118              		.loc 1 1609 11 is_stmt 1 view .LVU1094
 4119 0076 2268     		ldr	r2, [r4]
 4120 0078 5368     		ldr	r3, [r2, #4]
 4121 007a 1439     		subs	r1, r1, #20
 4122 007c 0B43     		orrs	r3, r1
 4123 007e 5360     		str	r3, [r2, #4]
1610:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
 4124              		.loc 1 1610 11 view .LVU1095
 4125 0080 E9E7     		b	.L266
 4126              	.L264:
1636:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4127              		.loc 1 1636 7 view .LVU1096
1636:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4128              		.loc 1 1636 7 view .LVU1097
 4129 0082 5423     		movs	r3, #84
ARM GAS  /tmp/ccPLPcMa.s 			page 229


 4130 0084 0022     		movs	r2, #0
 4131 0086 E254     		strb	r2, [r4, r3]
 4132 0088 00E0     		b	.L263
 4133              	.LVL279:
 4134              	.L268:
1642:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 4135              		.loc 1 1642 20 is_stmt 0 view .LVU1098
 4136 008a 0220     		movs	r0, #2
 4137              	.LVL280:
 4138              	.L263:
1647:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4139              		.loc 1 1647 1 view .LVU1099
 4140              		@ sp needed
 4141              	.LVL281:
1647:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4142              		.loc 1 1647 1 view .LVU1100
 4143 008c 10BD     		pop	{r4, pc}
 4144              	.LVL282:
 4145              	.L269:
1573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4146              		.loc 1 1573 5 view .LVU1101
 4147 008e 0220     		movs	r0, #2
 4148              	.LVL283:
1573:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4149              		.loc 1 1573 5 view .LVU1102
 4150 0090 FCE7     		b	.L263
 4151              	.L272:
 4152 0092 C046     		.align	2
 4153              	.L271:
 4154 0094 FEF0FFFF 		.word	-3842
 4155 0098 E8FFFF7F 		.word	2147483624
 4156              		.cfi_endproc
 4157              	.LFE460:
 4159              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 4160              		.align	1
 4161              		.global	HAL_ADC_Start_DMA
 4162              		.syntax unified
 4163              		.code	16
 4164              		.thumb_func
 4165              		.fpu softvfp
 4167              	HAL_ADC_Start_DMA:
 4168              	.LVL284:
 4169              	.LFB462:
1707:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4170              		.loc 1 1707 1 is_stmt 1 view -0
 4171              		.cfi_startproc
 4172              		@ args = 0, pretend = 0, frame = 0
 4173              		@ frame_needed = 0, uses_anonymous_args = 0
1707:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4174              		.loc 1 1707 1 is_stmt 0 view .LVU1104
 4175 0000 70B5     		push	{r4, r5, r6, lr}
 4176              	.LCFI16:
 4177              		.cfi_def_cfa_offset 16
 4178              		.cfi_offset 4, -16
 4179              		.cfi_offset 5, -12
 4180              		.cfi_offset 6, -8
 4181              		.cfi_offset 14, -4
ARM GAS  /tmp/ccPLPcMa.s 			page 230


 4182 0002 0400     		movs	r4, r0
 4183 0004 0D00     		movs	r5, r1
 4184 0006 1600     		movs	r6, r2
1708:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4185              		.loc 1 1708 3 is_stmt 1 view .LVU1105
1711:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4186              		.loc 1 1711 3 view .LVU1106
1714:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4187              		.loc 1 1714 3 view .LVU1107
1714:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4188              		.loc 1 1714 7 is_stmt 0 view .LVU1108
 4189 0008 0368     		ldr	r3, [r0]
 4190              	.LVL285:
 4191              	.LBB250:
 4192              	.LBI250:
4427:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4193              		.loc 2 4427 26 is_stmt 1 view .LVU1109
 4194              	.LBB251:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4195              		.loc 2 4429 3 view .LVU1110
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4196              		.loc 2 4429 12 is_stmt 0 view .LVU1111
 4197 000a 9A68     		ldr	r2, [r3, #8]
 4198              	.LVL286:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4199              		.loc 2 4429 74 view .LVU1112
 4200 000c 5207     		lsls	r2, r2, #29
 4201 000e 47D4     		bmi	.L277
 4202              	.LVL287:
4429:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4203              		.loc 2 4429 74 view .LVU1113
 4204              	.LBE251:
 4205              	.LBE250:
1717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4206              		.loc 1 1717 5 is_stmt 1 view .LVU1114
1717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4207              		.loc 1 1717 5 view .LVU1115
 4208 0010 5422     		movs	r2, #84
 4209 0012 825C     		ldrb	r2, [r0, r2]
 4210 0014 012A     		cmp	r2, #1
 4211 0016 45D0     		beq	.L278
1717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4212              		.loc 1 1717 5 discriminator 2 view .LVU1116
 4213 0018 0122     		movs	r2, #1
 4214 001a 5421     		movs	r1, #84
 4215              	.LVL288:
1717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4216              		.loc 1 1717 5 is_stmt 0 discriminator 2 view .LVU1117
 4217 001c 4254     		strb	r2, [r0, r1]
1717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4218              		.loc 1 1717 5 is_stmt 1 discriminator 2 view .LVU1118
1722:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4219              		.loc 1 1722 5 discriminator 2 view .LVU1119
1722:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4220              		.loc 1 1722 24 is_stmt 0 discriminator 2 view .LVU1120
 4221 001e D968     		ldr	r1, [r3, #12]
1722:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
ARM GAS  /tmp/ccPLPcMa.s 			page 231


 4222              		.loc 1 1722 8 discriminator 2 view .LVU1121
 4223 0020 0A42     		tst	r2, r1
 4224 0022 0DD1     		bne	.L275
1724:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 4225              		.loc 1 1724 7 is_stmt 1 view .LVU1122
 4226              	.LVL289:
 4227              	.LBB252:
 4228              	.LBI252:
4303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4229              		.loc 2 4303 26 view .LVU1123
 4230              	.LBB253:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4231              		.loc 2 4305 3 view .LVU1124
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4232              		.loc 2 4305 12 is_stmt 0 view .LVU1125
 4233 0024 9A68     		ldr	r2, [r3, #8]
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4234              		.loc 2 4305 68 view .LVU1126
 4235 0026 D207     		lsls	r2, r2, #31
 4236 0028 05D5     		bpl	.L276
 4237              	.LVL290:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4238              		.loc 2 4305 68 view .LVU1127
 4239              	.LBE253:
 4240              	.LBE252:
1727:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 4241              		.loc 1 1727 9 is_stmt 1 view .LVU1128
 4242              	.LBB254:
 4243              	.LBI254:
4284:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4244              		.loc 2 4284 22 view .LVU1129
 4245              	.LBB255:
4289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4246              		.loc 2 4289 3 view .LVU1130
 4247 002a 9A68     		ldr	r2, [r3, #8]
 4248 002c 1E49     		ldr	r1, .L279
 4249 002e 0A40     		ands	r2, r1
 4250 0030 0221     		movs	r1, #2
 4251 0032 0A43     		orrs	r2, r1
 4252 0034 9A60     		str	r2, [r3, #8]
 4253              	.LVL291:
 4254              	.L276:
4289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4255              		.loc 2 4289 3 is_stmt 0 view .LVU1131
 4256              	.LBE255:
 4257              	.LBE254:
1731:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4258              		.loc 1 1731 7 is_stmt 1 view .LVU1132
1731:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4259              		.loc 1 1731 11 is_stmt 0 view .LVU1133
 4260 0036 2268     		ldr	r2, [r4]
1731:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4261              		.loc 1 1731 29 view .LVU1134
 4262 0038 D368     		ldr	r3, [r2, #12]
 4263 003a 0121     		movs	r1, #1
 4264 003c 0B43     		orrs	r3, r1
 4265 003e D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccPLPcMa.s 			page 232


 4266              	.L275:
1735:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4267              		.loc 1 1735 5 is_stmt 1 view .LVU1135
1735:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4268              		.loc 1 1735 22 is_stmt 0 view .LVU1136
 4269 0040 2000     		movs	r0, r4
 4270              	.LVL292:
1735:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4271              		.loc 1 1735 22 view .LVU1137
 4272 0042 FFF7FEFF 		bl	ADC_Enable
 4273              	.LVL293:
1738:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4274              		.loc 1 1738 5 is_stmt 1 view .LVU1138
1738:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4275              		.loc 1 1738 8 is_stmt 0 view .LVU1139
 4276 0046 0028     		cmp	r0, #0
 4277 0048 2BD1     		bne	.L274
1743:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4278              		.loc 1 1743 7 is_stmt 1 view .LVU1140
 4279 004a A36D     		ldr	r3, [r4, #88]
 4280 004c 174A     		ldr	r2, .L279+4
 4281 004e 1A40     		ands	r2, r3
 4282 0050 8023     		movs	r3, #128
 4283 0052 5B00     		lsls	r3, r3, #1
 4284 0054 1343     		orrs	r3, r2
 4285 0056 A365     		str	r3, [r4, #88]
1749:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4286              		.loc 1 1749 7 view .LVU1141
 4287 0058 0023     		movs	r3, #0
 4288 005a E365     		str	r3, [r4, #92]
1752:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4289              		.loc 1 1752 7 view .LVU1142
1752:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4290              		.loc 1 1752 11 is_stmt 0 view .LVU1143
 4291 005c 226D     		ldr	r2, [r4, #80]
1752:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4292              		.loc 1 1752 42 view .LVU1144
 4293 005e 1449     		ldr	r1, .L279+8
 4294 0060 D162     		str	r1, [r2, #44]
1755:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4295              		.loc 1 1755 7 is_stmt 1 view .LVU1145
1755:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4296              		.loc 1 1755 11 is_stmt 0 view .LVU1146
 4297 0062 226D     		ldr	r2, [r4, #80]
1755:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4298              		.loc 1 1755 46 view .LVU1147
 4299 0064 1349     		ldr	r1, .L279+12
 4300 0066 1163     		str	r1, [r2, #48]
1758:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4301              		.loc 1 1758 7 is_stmt 1 view .LVU1148
1758:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4302              		.loc 1 1758 11 is_stmt 0 view .LVU1149
 4303 0068 226D     		ldr	r2, [r4, #80]
1758:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4304              		.loc 1 1758 43 view .LVU1150
 4305 006a 1349     		ldr	r1, .L279+16
 4306 006c 5163     		str	r1, [r2, #52]
ARM GAS  /tmp/ccPLPcMa.s 			page 233


1767:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4307              		.loc 1 1767 7 is_stmt 1 view .LVU1151
 4308 006e 2268     		ldr	r2, [r4]
 4309 0070 1C21     		movs	r1, #28
 4310 0072 1160     		str	r1, [r2]
1772:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4311              		.loc 1 1772 7 view .LVU1152
1772:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4312              		.loc 1 1772 7 view .LVU1153
 4313 0074 5422     		movs	r2, #84
 4314 0076 A354     		strb	r3, [r4, r2]
1772:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4315              		.loc 1 1772 7 view .LVU1154
1775:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4316              		.loc 1 1775 7 view .LVU1155
 4317 0078 2268     		ldr	r2, [r4]
 4318 007a 5368     		ldr	r3, [r2, #4]
 4319 007c 0C39     		subs	r1, r1, #12
 4320 007e 0B43     		orrs	r3, r1
 4321 0080 5360     		str	r3, [r2, #4]
1778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4322              		.loc 1 1778 7 view .LVU1156
1778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4323              		.loc 1 1778 69 is_stmt 0 view .LVU1157
 4324 0082 2168     		ldr	r1, [r4]
 4325 0084 4031     		adds	r1, r1, #64
1778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4326              		.loc 1 1778 24 view .LVU1158
 4327 0086 3300     		movs	r3, r6
 4328 0088 2A00     		movs	r2, r5
 4329 008a 206D     		ldr	r0, [r4, #80]
 4330              	.LVL294:
1778:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4331              		.loc 1 1778 24 view .LVU1159
 4332 008c FFF7FEFF 		bl	HAL_DMA_Start_IT
 4333              	.LVL295:
1785:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4334              		.loc 1 1785 7 is_stmt 1 view .LVU1160
 4335 0090 2268     		ldr	r2, [r4]
 4336              	.LVL296:
 4337              	.LBB256:
 4338              	.LBI256:
4391:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4339              		.loc 2 4391 22 view .LVU1161
 4340              	.LBB257:
4396:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4341              		.loc 2 4396 3 view .LVU1162
 4342 0092 9368     		ldr	r3, [r2, #8]
 4343 0094 0449     		ldr	r1, .L279
 4344 0096 0B40     		ands	r3, r1
 4345 0098 0421     		movs	r1, #4
 4346 009a 0B43     		orrs	r3, r1
 4347 009c 9360     		str	r3, [r2, #8]
4399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 4348              		.loc 2 4399 1 is_stmt 0 view .LVU1163
 4349 009e 00E0     		b	.L274
 4350              	.LVL297:
ARM GAS  /tmp/ccPLPcMa.s 			page 234


 4351              	.L277:
4399:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 4352              		.loc 2 4399 1 view .LVU1164
 4353              	.LBE257:
 4354              	.LBE256:
1790:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 4355              		.loc 1 1790 20 view .LVU1165
 4356 00a0 0220     		movs	r0, #2
 4357              	.LVL298:
 4358              	.L274:
1795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4359              		.loc 1 1795 1 view .LVU1166
 4360              		@ sp needed
 4361              	.LVL299:
 4362              	.LVL300:
 4363              	.LVL301:
1795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4364              		.loc 1 1795 1 view .LVU1167
 4365 00a2 70BD     		pop	{r4, r5, r6, pc}
 4366              	.LVL302:
 4367              	.L278:
1717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4368              		.loc 1 1717 5 view .LVU1168
 4369 00a4 0220     		movs	r0, #2
 4370              	.LVL303:
1717:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4371              		.loc 1 1717 5 view .LVU1169
 4372 00a6 FCE7     		b	.L274
 4373              	.L280:
 4374              		.align	2
 4375              	.L279:
 4376 00a8 E8FFFF7F 		.word	2147483624
 4377 00ac FEF0FFFF 		.word	-3842
 4378 00b0 00000000 		.word	ADC_DMAConvCplt
 4379 00b4 00000000 		.word	ADC_DMAHalfConvCplt
 4380 00b8 00000000 		.word	ADC_DMAError
 4381              		.cfi_endproc
 4382              	.LFE462:
 4384              		.section	.text.ADC_Disable,"ax",%progbits
 4385              		.align	1
 4386              		.global	ADC_Disable
 4387              		.syntax unified
 4388              		.code	16
 4389              		.thumb_func
 4390              		.fpu softvfp
 4392              	ADC_Disable:
 4393              	.LVL304:
 4394              	.LFB476:
2821:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
 4395              		.loc 1 2821 1 is_stmt 1 view -0
 4396              		.cfi_startproc
 4397              		@ args = 0, pretend = 0, frame = 0
 4398              		@ frame_needed = 0, uses_anonymous_args = 0
2821:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   uint32_t tickstart;
 4399              		.loc 1 2821 1 is_stmt 0 view .LVU1171
 4400 0000 70B5     		push	{r4, r5, r6, lr}
 4401              	.LCFI17:
ARM GAS  /tmp/ccPLPcMa.s 			page 235


 4402              		.cfi_def_cfa_offset 16
 4403              		.cfi_offset 4, -16
 4404              		.cfi_offset 5, -12
 4405              		.cfi_offset 6, -8
 4406              		.cfi_offset 14, -4
 4407 0002 0400     		movs	r4, r0
2822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 4408              		.loc 1 2822 3 is_stmt 1 view .LVU1172
2823:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4409              		.loc 1 2823 3 view .LVU1173
2823:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4410              		.loc 1 2823 48 is_stmt 0 view .LVU1174
 4411 0004 0368     		ldr	r3, [r0]
 4412              	.LVL305:
 4413              	.LBB258:
 4414              	.LBI258:
4314:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4415              		.loc 2 4314 26 is_stmt 1 view .LVU1175
 4416              	.LBB259:
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4417              		.loc 2 4316 3 view .LVU1176
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4418              		.loc 2 4316 12 is_stmt 0 view .LVU1177
 4419 0006 9A68     		ldr	r2, [r3, #8]
 4420 0008 0221     		movs	r1, #2
 4421 000a 0800     		movs	r0, r1
 4422              	.LVL306:
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4423              		.loc 2 4316 12 view .LVU1178
 4424 000c 1040     		ands	r0, r2
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4425              		.loc 2 4316 70 view .LVU1179
 4426 000e 1142     		tst	r1, r2
 4427 0010 00D0     		beq	.L282
 4428 0012 0120     		movs	r0, #1
 4429              	.L282:
 4430              	.LVL307:
4316:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4431              		.loc 2 4316 70 view .LVU1180
 4432              	.LBE259:
 4433              	.LBE258:
2828:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
 4434              		.loc 1 2828 3 is_stmt 1 view .LVU1181
 4435              	.LBB260:
 4436              	.LBI260:
4303:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4437              		.loc 2 4303 26 view .LVU1182
 4438              	.LBB261:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4439              		.loc 2 4305 3 view .LVU1183
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4440              		.loc 2 4305 12 is_stmt 0 view .LVU1184
 4441 0014 9A68     		ldr	r2, [r3, #8]
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4442              		.loc 2 4305 68 view .LVU1185
 4443 0016 D207     		lsls	r2, r2, #31
 4444 0018 31D5     		bpl	.L287
ARM GAS  /tmp/ccPLPcMa.s 			page 236


 4445              	.LVL308:
4305:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4446              		.loc 2 4305 68 view .LVU1186
 4447              	.LBE261:
 4448              	.LBE260:
2829:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****      )
 4449              		.loc 1 2829 7 view .LVU1187
 4450 001a 0028     		cmp	r0, #0
 4451 001c 31D1     		bne	.L288
2833:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4452              		.loc 1 2833 5 is_stmt 1 view .LVU1188
2833:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4453              		.loc 1 2833 24 is_stmt 0 view .LVU1189
 4454 001e 9968     		ldr	r1, [r3, #8]
2833:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4455              		.loc 1 2833 29 view .LVU1190
 4456 0020 0522     		movs	r2, #5
 4457 0022 0A40     		ands	r2, r1
2833:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4458              		.loc 1 2833 8 view .LVU1191
 4459 0024 012A     		cmp	r2, #1
 4460 0026 09D0     		beq	.L289
2842:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4461              		.loc 1 2842 7 is_stmt 1 view .LVU1192
 4462 0028 A36D     		ldr	r3, [r4, #88]
 4463 002a 1022     		movs	r2, #16
 4464 002c 1343     		orrs	r3, r2
 4465 002e A365     		str	r3, [r4, #88]
2845:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4466              		.loc 1 2845 7 view .LVU1193
 4467 0030 E36D     		ldr	r3, [r4, #92]
 4468 0032 0F3A     		subs	r2, r2, #15
 4469 0034 1343     		orrs	r3, r2
 4470 0036 E365     		str	r3, [r4, #92]
2847:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4471              		.loc 1 2847 7 view .LVU1194
2847:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4472              		.loc 1 2847 14 is_stmt 0 view .LVU1195
 4473 0038 0120     		movs	r0, #1
 4474              	.LVL309:
2847:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4475              		.loc 1 2847 14 view .LVU1196
 4476 003a 21E0     		b	.L283
 4477              	.LVL310:
 4478              	.L289:
2836:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 4479              		.loc 1 2836 7 is_stmt 1 view .LVU1197
 4480              	.LBB262:
 4481              	.LBI262:
4284:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4482              		.loc 2 4284 22 view .LVU1198
 4483              	.LBB263:
4289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4484              		.loc 2 4289 3 view .LVU1199
 4485 003c 9A68     		ldr	r2, [r3, #8]
 4486 003e 1249     		ldr	r1, .L291
 4487 0040 0A40     		ands	r2, r1
ARM GAS  /tmp/ccPLPcMa.s 			page 237


 4488 0042 0221     		movs	r1, #2
 4489 0044 0A43     		orrs	r2, r1
 4490 0046 9A60     		str	r2, [r3, #8]
 4491              	.LVL311:
4289:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4492              		.loc 2 4289 3 is_stmt 0 view .LVU1200
 4493              	.LBE263:
 4494              	.LBE262:
2837:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4495              		.loc 1 2837 7 is_stmt 1 view .LVU1201
 4496 0048 2368     		ldr	r3, [r4]
 4497 004a 0322     		movs	r2, #3
 4498 004c 1A60     		str	r2, [r3]
2852:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4499              		.loc 1 2852 5 view .LVU1202
2852:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4500              		.loc 1 2852 17 is_stmt 0 view .LVU1203
 4501 004e FFF7FEFF 		bl	HAL_GetTick
 4502              	.LVL312:
2852:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4503              		.loc 1 2852 17 view .LVU1204
 4504 0052 0500     		movs	r5, r0
 4505              	.LVL313:
2854:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4506              		.loc 1 2854 5 is_stmt 1 view .LVU1205
 4507              	.L285:
2854:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4508              		.loc 1 2854 11 view .LVU1206
2854:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4509              		.loc 1 2854 17 is_stmt 0 view .LVU1207
 4510 0054 2368     		ldr	r3, [r4]
2854:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4511              		.loc 1 2854 27 view .LVU1208
 4512 0056 9B68     		ldr	r3, [r3, #8]
2854:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4513              		.loc 1 2854 11 view .LVU1209
 4514 0058 DB07     		lsls	r3, r3, #31
 4515 005a 0ED5     		bpl	.L290
2856:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 4516              		.loc 1 2856 7 is_stmt 1 view .LVU1210
2856:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 4517              		.loc 1 2856 12 is_stmt 0 view .LVU1211
 4518 005c FFF7FEFF 		bl	HAL_GetTick
 4519              	.LVL314:
2856:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 4520              		.loc 1 2856 26 view .LVU1212
 4521 0060 401B     		subs	r0, r0, r5
2856:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 4522              		.loc 1 2856 10 view .LVU1213
 4523 0062 0228     		cmp	r0, #2
 4524 0064 F6D9     		bls	.L285
2859:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4525              		.loc 1 2859 9 is_stmt 1 view .LVU1214
 4526 0066 A36D     		ldr	r3, [r4, #88]
 4527 0068 1022     		movs	r2, #16
 4528 006a 1343     		orrs	r3, r2
 4529 006c A365     		str	r3, [r4, #88]
ARM GAS  /tmp/ccPLPcMa.s 			page 238


2862:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4530              		.loc 1 2862 9 view .LVU1215
 4531 006e E36D     		ldr	r3, [r4, #92]
 4532 0070 0F3A     		subs	r2, r2, #15
 4533 0072 1343     		orrs	r3, r2
 4534 0074 E365     		str	r3, [r4, #92]
2864:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 4535              		.loc 1 2864 9 view .LVU1216
2864:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 4536              		.loc 1 2864 16 is_stmt 0 view .LVU1217
 4537 0076 0120     		movs	r0, #1
 4538 0078 02E0     		b	.L283
 4539              	.L290:
2870:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 4540              		.loc 1 2870 10 view .LVU1218
 4541 007a 0020     		movs	r0, #0
 4542 007c 00E0     		b	.L283
 4543              	.LVL315:
 4544              	.L287:
2870:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 4545              		.loc 1 2870 10 view .LVU1219
 4546 007e 0020     		movs	r0, #0
 4547              	.LVL316:
 4548              	.L283:
2871:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4549              		.loc 1 2871 1 view .LVU1220
 4550              		@ sp needed
 4551              	.LVL317:
2871:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4552              		.loc 1 2871 1 view .LVU1221
 4553 0080 70BD     		pop	{r4, r5, r6, pc}
 4554              	.LVL318:
 4555              	.L288:
2870:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 4556              		.loc 1 2870 10 view .LVU1222
 4557 0082 0020     		movs	r0, #0
 4558              	.LVL319:
2870:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 4559              		.loc 1 2870 10 view .LVU1223
 4560 0084 FCE7     		b	.L283
 4561              	.L292:
 4562 0086 C046     		.align	2
 4563              	.L291:
 4564 0088 E8FFFF7F 		.word	2147483624
 4565              		.cfi_endproc
 4566              	.LFE476:
 4568              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 4569              		.align	1
 4570              		.global	HAL_ADC_DeInit
 4571              		.syntax unified
 4572              		.code	16
 4573              		.thumb_func
 4574              		.fpu softvfp
 4576              	HAL_ADC_DeInit:
 4577              	.LVL320:
 4578              	.LFB453:
 773:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
ARM GAS  /tmp/ccPLPcMa.s 			page 239


 4579              		.loc 1 773 1 is_stmt 1 view -0
 4580              		.cfi_startproc
 4581              		@ args = 0, pretend = 0, frame = 0
 4582              		@ frame_needed = 0, uses_anonymous_args = 0
 773:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4583              		.loc 1 773 1 is_stmt 0 view .LVU1225
 4584 0000 70B5     		push	{r4, r5, r6, lr}
 4585              	.LCFI18:
 4586              		.cfi_def_cfa_offset 16
 4587              		.cfi_offset 4, -16
 4588              		.cfi_offset 5, -12
 4589              		.cfi_offset 6, -8
 4590              		.cfi_offset 14, -4
 4591 0002 041E     		subs	r4, r0, #0
 774:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4592              		.loc 1 774 3 is_stmt 1 view .LVU1226
 777:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4593              		.loc 1 777 3 view .LVU1227
 777:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4594              		.loc 1 777 6 is_stmt 0 view .LVU1228
 4595 0004 43D0     		beq	.L297
 783:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4596              		.loc 1 783 3 is_stmt 1 view .LVU1229
 786:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4597              		.loc 1 786 3 view .LVU1230
 4598 0006 836D     		ldr	r3, [r0, #88]
 4599 0008 0222     		movs	r2, #2
 4600 000a 1343     		orrs	r3, r2
 4601 000c 8365     		str	r3, [r0, #88]
 789:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4602              		.loc 1 789 3 view .LVU1231
 789:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4603              		.loc 1 789 20 is_stmt 0 view .LVU1232
 4604 000e FFF7FEFF 		bl	ADC_ConversionStop
 4605              	.LVL321:
 789:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4606              		.loc 1 789 20 view .LVU1233
 4607 0012 051E     		subs	r5, r0, #0
 4608              	.LVL322:
 792:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4609              		.loc 1 792 3 is_stmt 1 view .LVU1234
 792:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4610              		.loc 1 792 6 is_stmt 0 view .LVU1235
 4611 0014 2ED0     		beq	.L298
 4612              	.LVL323:
 4613              	.L295:
 816:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                               ADC_IT_AWD1  | ADC_IT_OVR  |
 4614              		.loc 1 816 3 is_stmt 1 view .LVU1236
 4615 0016 2268     		ldr	r2, [r4]
 4616 0018 5368     		ldr	r3, [r2, #4]
 4617 001a 1E49     		ldr	r1, .L299
 4618 001c 0B40     		ands	r3, r1
 4619 001e 5360     		str	r3, [r2, #4]
 822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                               ADC_FLAG_AWD1  | ADC_FLAG_OVR  |
 4620              		.loc 1 822 3 view .LVU1237
 4621 0020 2368     		ldr	r3, [r4]
 4622 0022 1D4A     		ldr	r2, .L299+4
ARM GAS  /tmp/ccPLPcMa.s 			page 240


 4623 0024 1A60     		str	r2, [r3]
 832:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OV
 4624              		.loc 1 832 3 view .LVU1238
 832:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OV
 4625              		.loc 1 832 7 is_stmt 0 view .LVU1239
 4626 0026 2268     		ldr	r2, [r4]
 832:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OV
 4627              		.loc 1 832 25 view .LVU1240
 4628 0028 D368     		ldr	r3, [r2, #12]
 4629 002a 1C49     		ldr	r1, .L299+8
 4630 002c 0B40     		ands	r3, r1
 4631 002e D360     		str	r3, [r2, #12]
 840:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4632              		.loc 1 840 3 is_stmt 1 view .LVU1241
 840:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4633              		.loc 1 840 7 is_stmt 0 view .LVU1242
 4634 0030 2268     		ldr	r2, [r4]
 840:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4635              		.loc 1 840 25 view .LVU1243
 4636 0032 1369     		ldr	r3, [r2, #16]
 4637 0034 9B00     		lsls	r3, r3, #2
 4638 0036 9B08     		lsrs	r3, r3, #2
 4639 0038 1361     		str	r3, [r2, #16]
 843:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4640              		.loc 1 843 3 is_stmt 1 view .LVU1244
 843:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4641              		.loc 1 843 7 is_stmt 0 view .LVU1245
 4642 003a 2268     		ldr	r2, [r4]
 843:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4643              		.loc 1 843 24 view .LVU1246
 4644 003c 5369     		ldr	r3, [r2, #20]
 4645 003e 0721     		movs	r1, #7
 4646 0040 8B43     		bics	r3, r1
 4647 0042 5361     		str	r3, [r2, #20]
 846:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4648              		.loc 1 846 3 is_stmt 1 view .LVU1247
 846:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4649              		.loc 1 846 7 is_stmt 0 view .LVU1248
 4650 0044 2268     		ldr	r2, [r4]
 846:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4651              		.loc 1 846 23 view .LVU1249
 4652 0046 136A     		ldr	r3, [r2, #32]
 4653 0048 1549     		ldr	r1, .L299+12
 4654 004a 0B40     		ands	r3, r1
 4655 004c 1362     		str	r3, [r2, #32]
 849:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4656              		.loc 1 849 3 is_stmt 1 view .LVU1250
 849:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4657              		.loc 1 849 7 is_stmt 0 view .LVU1251
 4658 004e 2368     		ldr	r3, [r4]
 849:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4659              		.loc 1 849 26 view .LVU1252
 4660 0050 9A6A     		ldr	r2, [r3, #40]
 4661 0052 0026     		movs	r6, #0
 4662 0054 9E62     		str	r6, [r3, #40]
 855:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4663              		.loc 1 855 3 is_stmt 1 view .LVU1253
ARM GAS  /tmp/ccPLPcMa.s 			page 241


 855:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4664              		.loc 1 855 20 is_stmt 0 view .LVU1254
 4665 0056 134A     		ldr	r2, .L299+16
 4666 0058 1368     		ldr	r3, [r2]
 4667 005a 1349     		ldr	r1, .L299+20
 4668 005c 0B40     		ands	r3, r1
 4669 005e 1360     		str	r3, [r2]
 876:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 4670              		.loc 1 876 3 is_stmt 1 view .LVU1255
 4671 0060 2000     		movs	r0, r4
 4672 0062 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 4673              	.LVL324:
 880:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4674              		.loc 1 880 3 view .LVU1256
 880:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4675              		.loc 1 880 39 is_stmt 0 view .LVU1257
 4676 0066 2666     		str	r6, [r4, #96]
 883:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4677              		.loc 1 883 3 is_stmt 1 view .LVU1258
 4678 0068 E665     		str	r6, [r4, #92]
 886:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4679              		.loc 1 886 3 view .LVU1259
 886:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4680              		.loc 1 886 15 is_stmt 0 view .LVU1260
 4681 006a A665     		str	r6, [r4, #88]
 889:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4682              		.loc 1 889 3 is_stmt 1 view .LVU1261
 889:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4683              		.loc 1 889 3 view .LVU1262
 4684 006c 5423     		movs	r3, #84
 4685 006e E654     		strb	r6, [r4, r3]
 889:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4686              		.loc 1 889 3 view .LVU1263
 892:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 4687              		.loc 1 892 3 view .LVU1264
 4688              	.LVL325:
 4689              	.L294:
 893:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4690              		.loc 1 893 1 is_stmt 0 view .LVU1265
 4691 0070 2800     		movs	r0, r5
 4692              		@ sp needed
 4693              	.LVL326:
 893:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4694              		.loc 1 893 1 view .LVU1266
 4695 0072 70BD     		pop	{r4, r5, r6, pc}
 4696              	.LVL327:
 4697              	.L298:
 795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4698              		.loc 1 795 5 is_stmt 1 view .LVU1267
 795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4699              		.loc 1 795 22 is_stmt 0 view .LVU1268
 4700 0074 2000     		movs	r0, r4
 4701              	.LVL328:
 795:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4702              		.loc 1 795 22 view .LVU1269
 4703 0076 FFF7FEFF 		bl	ADC_Disable
 4704              	.LVL329:
ARM GAS  /tmp/ccPLPcMa.s 			page 242


 4705 007a 051E     		subs	r5, r0, #0
 4706              	.LVL330:
 798:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4707              		.loc 1 798 5 is_stmt 1 view .LVU1270
 798:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4708              		.loc 1 798 8 is_stmt 0 view .LVU1271
 4709 007c 01D1     		bne	.L296
 801:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4710              		.loc 1 801 7 is_stmt 1 view .LVU1272
 801:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 4711              		.loc 1 801 19 is_stmt 0 view .LVU1273
 4712 007e 0123     		movs	r3, #1
 4713 0080 A365     		str	r3, [r4, #88]
 4714              	.L296:
 805:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 4715              		.loc 1 805 5 is_stmt 1 view .LVU1274
 4716 0082 2268     		ldr	r2, [r4]
 4717              	.LVL331:
 4718              	.LBB264:
 4719              	.LBI264:
4232:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** {
 4720              		.loc 2 4232 22 view .LVU1275
 4721              	.LBB265:
4234:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** }
 4722              		.loc 2 4234 3 view .LVU1276
 4723 0084 9368     		ldr	r3, [r2, #8]
 4724 0086 0949     		ldr	r1, .L299+24
 4725 0088 0B40     		ands	r3, r1
 4726 008a 9360     		str	r3, [r2, #8]
4235:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 4727              		.loc 2 4235 1 is_stmt 0 view .LVU1277
 4728 008c C3E7     		b	.L295
 4729              	.LVL332:
 4730              	.L297:
4235:Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_adc.h **** 
 4731              		.loc 2 4235 1 view .LVU1278
 4732              	.LBE265:
 4733              	.LBE264:
 779:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 4734              		.loc 1 779 12 view .LVU1279
 4735 008e 0125     		movs	r5, #1
 4736 0090 EEE7     		b	.L294
 4737              	.L300:
 4738 0092 C046     		.align	2
 4739              	.L299:
 4740 0094 60FCFFFF 		.word	-928
 4741 0098 9F030000 		.word	927
 4742 009c 00023E83 		.word	-2093088256
 4743 00a0 00F000F0 		.word	-268374016
 4744 00a4 08270140 		.word	1073817352
 4745 00a8 FFFF03FE 		.word	-33292289
 4746 00ac E8FFFF6F 		.word	1879048168
 4747              		.cfi_endproc
 4748              	.LFE453:
 4750              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 4751              		.align	1
 4752              		.global	HAL_ADC_Stop
ARM GAS  /tmp/ccPLPcMa.s 			page 243


 4753              		.syntax unified
 4754              		.code	16
 4755              		.thumb_func
 4756              		.fpu softvfp
 4758              	HAL_ADC_Stop:
 4759              	.LVL333:
 4760              	.LFB457:
1255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4761              		.loc 1 1255 1 is_stmt 1 view -0
 4762              		.cfi_startproc
 4763              		@ args = 0, pretend = 0, frame = 0
 4764              		@ frame_needed = 0, uses_anonymous_args = 0
1255:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4765              		.loc 1 1255 1 is_stmt 0 view .LVU1281
 4766 0000 10B5     		push	{r4, lr}
 4767              	.LCFI19:
 4768              		.cfi_def_cfa_offset 8
 4769              		.cfi_offset 4, -8
 4770              		.cfi_offset 14, -4
 4771 0002 0400     		movs	r4, r0
1256:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4772              		.loc 1 1256 3 is_stmt 1 view .LVU1282
1259:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4773              		.loc 1 1259 3 view .LVU1283
1262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4774              		.loc 1 1262 3 view .LVU1284
1262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4775              		.loc 1 1262 3 view .LVU1285
 4776 0004 5423     		movs	r3, #84
 4777 0006 C35C     		ldrb	r3, [r0, r3]
 4778 0008 012B     		cmp	r3, #1
 4779 000a 17D0     		beq	.L304
1262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4780              		.loc 1 1262 3 discriminator 2 view .LVU1286
 4781 000c 5423     		movs	r3, #84
 4782 000e 0122     		movs	r2, #1
 4783 0010 C254     		strb	r2, [r0, r3]
1262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4784              		.loc 1 1262 3 discriminator 2 view .LVU1287
1265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4785              		.loc 1 1265 3 discriminator 2 view .LVU1288
1265:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4786              		.loc 1 1265 20 is_stmt 0 discriminator 2 view .LVU1289
 4787 0012 FFF7FEFF 		bl	ADC_ConversionStop
 4788              	.LVL334:
1268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4789              		.loc 1 1268 3 is_stmt 1 discriminator 2 view .LVU1290
1268:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4790              		.loc 1 1268 6 is_stmt 0 discriminator 2 view .LVU1291
 4791 0016 0028     		cmp	r0, #0
 4792 0018 03D0     		beq	.L305
 4793              	.LVL335:
 4794              	.L303:
1284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4795              		.loc 1 1284 3 is_stmt 1 view .LVU1292
1284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4796              		.loc 1 1284 3 view .LVU1293
ARM GAS  /tmp/ccPLPcMa.s 			page 244


 4797 001a 5423     		movs	r3, #84
 4798 001c 0022     		movs	r2, #0
 4799 001e E254     		strb	r2, [r4, r3]
1284:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4800              		.loc 1 1284 3 view .LVU1294
1287:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 4801              		.loc 1 1287 3 view .LVU1295
 4802              	.LVL336:
 4803              	.L302:
1288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4804              		.loc 1 1288 1 is_stmt 0 view .LVU1296
 4805              		@ sp needed
 4806              	.LVL337:
1288:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4807              		.loc 1 1288 1 view .LVU1297
 4808 0020 10BD     		pop	{r4, pc}
 4809              	.LVL338:
 4810              	.L305:
1271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4811              		.loc 1 1271 5 is_stmt 1 view .LVU1298
1271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4812              		.loc 1 1271 22 is_stmt 0 view .LVU1299
 4813 0022 2000     		movs	r0, r4
 4814              	.LVL339:
1271:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4815              		.loc 1 1271 22 view .LVU1300
 4816 0024 FFF7FEFF 		bl	ADC_Disable
 4817              	.LVL340:
1274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4818              		.loc 1 1274 5 is_stmt 1 view .LVU1301
1274:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4819              		.loc 1 1274 8 is_stmt 0 view .LVU1302
 4820 0028 0028     		cmp	r0, #0
 4821 002a F6D1     		bne	.L303
1277:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 4822              		.loc 1 1277 7 is_stmt 1 view .LVU1303
 4823 002c A36D     		ldr	r3, [r4, #88]
 4824 002e 044A     		ldr	r2, .L306
 4825 0030 1340     		ands	r3, r2
 4826 0032 0432     		adds	r2, r2, #4
 4827 0034 FF32     		adds	r2, r2, #255
 4828 0036 1343     		orrs	r3, r2
 4829 0038 A365     		str	r3, [r4, #88]
 4830 003a EEE7     		b	.L303
 4831              	.LVL341:
 4832              	.L304:
1262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4833              		.loc 1 1262 3 is_stmt 0 view .LVU1304
 4834 003c 0220     		movs	r0, #2
 4835              	.LVL342:
1262:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4836              		.loc 1 1262 3 view .LVU1305
 4837 003e EFE7     		b	.L302
 4838              	.L307:
 4839              		.align	2
 4840              	.L306:
 4841 0040 FEFEFFFF 		.word	-258
ARM GAS  /tmp/ccPLPcMa.s 			page 245


 4842              		.cfi_endproc
 4843              	.LFE457:
 4845              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 4846              		.align	1
 4847              		.global	HAL_ADC_Stop_IT
 4848              		.syntax unified
 4849              		.code	16
 4850              		.thumb_func
 4851              		.fpu softvfp
 4853              	HAL_ADC_Stop_IT:
 4854              	.LVL343:
 4855              	.LFB461:
1657:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4856              		.loc 1 1657 1 is_stmt 1 view -0
 4857              		.cfi_startproc
 4858              		@ args = 0, pretend = 0, frame = 0
 4859              		@ frame_needed = 0, uses_anonymous_args = 0
1657:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4860              		.loc 1 1657 1 is_stmt 0 view .LVU1307
 4861 0000 10B5     		push	{r4, lr}
 4862              	.LCFI20:
 4863              		.cfi_def_cfa_offset 8
 4864              		.cfi_offset 4, -8
 4865              		.cfi_offset 14, -4
 4866 0002 0400     		movs	r4, r0
1658:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4867              		.loc 1 1658 3 is_stmt 1 view .LVU1308
1661:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4868              		.loc 1 1661 3 view .LVU1309
1664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4869              		.loc 1 1664 3 view .LVU1310
1664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4870              		.loc 1 1664 3 view .LVU1311
 4871 0004 5423     		movs	r3, #84
 4872 0006 C35C     		ldrb	r3, [r0, r3]
 4873 0008 012B     		cmp	r3, #1
 4874 000a 1CD0     		beq	.L311
1664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4875              		.loc 1 1664 3 discriminator 2 view .LVU1312
 4876 000c 5423     		movs	r3, #84
 4877 000e 0122     		movs	r2, #1
 4878 0010 C254     		strb	r2, [r0, r3]
1664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4879              		.loc 1 1664 3 discriminator 2 view .LVU1313
1667:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4880              		.loc 1 1667 3 discriminator 2 view .LVU1314
1667:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4881              		.loc 1 1667 20 is_stmt 0 discriminator 2 view .LVU1315
 4882 0012 FFF7FEFF 		bl	ADC_ConversionStop
 4883              	.LVL344:
1670:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4884              		.loc 1 1670 3 is_stmt 1 discriminator 2 view .LVU1316
1670:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4885              		.loc 1 1670 6 is_stmt 0 discriminator 2 view .LVU1317
 4886 0016 0028     		cmp	r0, #0
 4887 0018 03D0     		beq	.L312
 4888              	.LVL345:
ARM GAS  /tmp/ccPLPcMa.s 			page 246


 4889              	.L310:
1690:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4890              		.loc 1 1690 3 is_stmt 1 view .LVU1318
1690:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4891              		.loc 1 1690 3 view .LVU1319
 4892 001a 5423     		movs	r3, #84
 4893 001c 0022     		movs	r2, #0
 4894 001e E254     		strb	r2, [r4, r3]
1690:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4895              		.loc 1 1690 3 view .LVU1320
1693:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 4896              		.loc 1 1693 3 view .LVU1321
 4897              	.LVL346:
 4898              	.L309:
1694:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4899              		.loc 1 1694 1 is_stmt 0 view .LVU1322
 4900              		@ sp needed
 4901              	.LVL347:
1694:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4902              		.loc 1 1694 1 view .LVU1323
 4903 0020 10BD     		pop	{r4, pc}
 4904              	.LVL348:
 4905              	.L312:
1674:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4906              		.loc 1 1674 5 is_stmt 1 view .LVU1324
 4907 0022 2268     		ldr	r2, [r4]
 4908 0024 5368     		ldr	r3, [r2, #4]
 4909 0026 1C21     		movs	r1, #28
 4910 0028 8B43     		bics	r3, r1
 4911 002a 5360     		str	r3, [r2, #4]
1677:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4912              		.loc 1 1677 5 view .LVU1325
1677:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4913              		.loc 1 1677 22 is_stmt 0 view .LVU1326
 4914 002c 2000     		movs	r0, r4
 4915              	.LVL349:
1677:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4916              		.loc 1 1677 22 view .LVU1327
 4917 002e FFF7FEFF 		bl	ADC_Disable
 4918              	.LVL350:
1680:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4919              		.loc 1 1680 5 is_stmt 1 view .LVU1328
1680:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4920              		.loc 1 1680 8 is_stmt 0 view .LVU1329
 4921 0032 0028     		cmp	r0, #0
 4922 0034 F1D1     		bne	.L310
1683:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 4923              		.loc 1 1683 7 is_stmt 1 view .LVU1330
 4924 0036 A36D     		ldr	r3, [r4, #88]
 4925 0038 044A     		ldr	r2, .L313
 4926 003a 1340     		ands	r3, r2
 4927 003c 0432     		adds	r2, r2, #4
 4928 003e FF32     		adds	r2, r2, #255
 4929 0040 1343     		orrs	r3, r2
 4930 0042 A365     		str	r3, [r4, #88]
 4931 0044 E9E7     		b	.L310
 4932              	.LVL351:
ARM GAS  /tmp/ccPLPcMa.s 			page 247


 4933              	.L311:
1664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4934              		.loc 1 1664 3 is_stmt 0 view .LVU1331
 4935 0046 0220     		movs	r0, #2
 4936              	.LVL352:
1664:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4937              		.loc 1 1664 3 view .LVU1332
 4938 0048 EAE7     		b	.L309
 4939              	.L314:
 4940 004a C046     		.align	2
 4941              	.L313:
 4942 004c FEFEFFFF 		.word	-258
 4943              		.cfi_endproc
 4944              	.LFE461:
 4946              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 4947              		.align	1
 4948              		.global	HAL_ADC_Stop_DMA
 4949              		.syntax unified
 4950              		.code	16
 4951              		.thumb_func
 4952              		.fpu softvfp
 4954              	HAL_ADC_Stop_DMA:
 4955              	.LVL353:
 4956              	.LFB463:
1805:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4957              		.loc 1 1805 1 is_stmt 1 view -0
 4958              		.cfi_startproc
 4959              		@ args = 0, pretend = 0, frame = 0
 4960              		@ frame_needed = 0, uses_anonymous_args = 0
1805:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4961              		.loc 1 1805 1 is_stmt 0 view .LVU1334
 4962 0000 70B5     		push	{r4, r5, r6, lr}
 4963              	.LCFI21:
 4964              		.cfi_def_cfa_offset 16
 4965              		.cfi_offset 4, -16
 4966              		.cfi_offset 5, -12
 4967              		.cfi_offset 6, -8
 4968              		.cfi_offset 14, -4
 4969 0002 0400     		movs	r4, r0
1806:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4970              		.loc 1 1806 3 is_stmt 1 view .LVU1335
1809:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4971              		.loc 1 1809 3 view .LVU1336
1812:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4972              		.loc 1 1812 3 view .LVU1337
1812:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4973              		.loc 1 1812 3 view .LVU1338
 4974 0004 5423     		movs	r3, #84
 4975 0006 C35C     		ldrb	r3, [r0, r3]
 4976 0008 012B     		cmp	r3, #1
 4977 000a 36D0     		beq	.L322
1812:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4978              		.loc 1 1812 3 discriminator 2 view .LVU1339
 4979 000c 5423     		movs	r3, #84
 4980 000e 0122     		movs	r2, #1
 4981 0010 C254     		strb	r2, [r0, r3]
1812:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
ARM GAS  /tmp/ccPLPcMa.s 			page 248


 4982              		.loc 1 1812 3 discriminator 2 view .LVU1340
1815:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4983              		.loc 1 1815 3 discriminator 2 view .LVU1341
1815:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4984              		.loc 1 1815 20 is_stmt 0 discriminator 2 view .LVU1342
 4985 0012 FFF7FEFF 		bl	ADC_ConversionStop
 4986              	.LVL354:
1815:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 4987              		.loc 1 1815 20 discriminator 2 view .LVU1343
 4988 0016 051E     		subs	r5, r0, #0
 4989              	.LVL355:
1818:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4990              		.loc 1 1818 3 is_stmt 1 discriminator 2 view .LVU1344
1818:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   {
 4991              		.loc 1 1818 6 is_stmt 0 discriminator 2 view .LVU1345
 4992 0018 1DD1     		bne	.L317
1822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4993              		.loc 1 1822 5 is_stmt 1 view .LVU1346
1822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4994              		.loc 1 1822 13 is_stmt 0 view .LVU1347
 4995 001a 206D     		ldr	r0, [r4, #80]
 4996              	.LVL356:
1822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 4997              		.loc 1 1822 25 view .LVU1348
 4998 001c 2523     		movs	r3, #37
 4999 001e C35C     		ldrb	r3, [r0, r3]
1822:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 5000              		.loc 1 1822 8 view .LVU1349
 5001 0020 022B     		cmp	r3, #2
 5002 0022 1DD0     		beq	.L323
 5003              	.LVL357:
 5004              	.L318:
1835:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 5005              		.loc 1 1835 5 is_stmt 1 view .LVU1350
 5006 0024 2268     		ldr	r2, [r4]
 5007 0026 5368     		ldr	r3, [r2, #4]
 5008 0028 1021     		movs	r1, #16
 5009 002a 8B43     		bics	r3, r1
 5010 002c 5360     		str	r3, [r2, #4]
1840:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 5011              		.loc 1 1840 5 view .LVU1351
1840:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 5012              		.loc 1 1840 8 is_stmt 0 view .LVU1352
 5013 002e 002D     		cmp	r5, #0
 5014 0030 1FD1     		bne	.L319
1842:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 5015              		.loc 1 1842 7 is_stmt 1 view .LVU1353
1842:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 5016              		.loc 1 1842 24 is_stmt 0 view .LVU1354
 5017 0032 2000     		movs	r0, r4
 5018 0034 FFF7FEFF 		bl	ADC_Disable
 5019              	.LVL358:
 5020 0038 0500     		movs	r5, r0
 5021              	.LVL359:
 5022              	.L320:
1850:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 5023              		.loc 1 1850 5 is_stmt 1 view .LVU1355
ARM GAS  /tmp/ccPLPcMa.s 			page 249


1850:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     {
 5024              		.loc 1 1850 8 is_stmt 0 view .LVU1356
 5025 003a 002D     		cmp	r5, #0
 5026 003c 06D1     		bne	.L321
1853:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 5027              		.loc 1 1853 7 is_stmt 1 view .LVU1357
 5028 003e A36D     		ldr	r3, [r4, #88]
 5029 0040 0F4A     		ldr	r2, .L324
 5030 0042 1340     		ands	r3, r2
 5031 0044 0432     		adds	r2, r2, #4
 5032 0046 FF32     		adds	r2, r2, #255
 5033 0048 1343     		orrs	r3, r2
 5034 004a A365     		str	r3, [r4, #88]
 5035              	.L321:
1859:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****   }
 5036              		.loc 1 1859 5 view .LVU1358
 5037 004c 2268     		ldr	r2, [r4]
 5038 004e D368     		ldr	r3, [r2, #12]
 5039 0050 0121     		movs	r1, #1
 5040 0052 8B43     		bics	r3, r1
 5041 0054 D360     		str	r3, [r2, #12]
 5042              	.LVL360:
 5043              	.L317:
1863:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 5044              		.loc 1 1863 3 view .LVU1359
1863:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 5045              		.loc 1 1863 3 view .LVU1360
 5046 0056 5423     		movs	r3, #84
 5047 0058 0022     		movs	r2, #0
 5048 005a E254     		strb	r2, [r4, r3]
1863:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 5049              		.loc 1 1863 3 view .LVU1361
1866:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** }
 5050              		.loc 1 1866 3 view .LVU1362
 5051              	.LVL361:
 5052              	.L316:
1867:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 5053              		.loc 1 1867 1 is_stmt 0 view .LVU1363
 5054 005c 2800     		movs	r0, r5
 5055              		@ sp needed
 5056              	.LVL362:
1867:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 5057              		.loc 1 1867 1 view .LVU1364
 5058 005e 70BD     		pop	{r4, r5, r6, pc}
 5059              	.LVL363:
 5060              	.L323:
1824:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 5061              		.loc 1 1824 7 is_stmt 1 view .LVU1365
1824:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 5062              		.loc 1 1824 24 is_stmt 0 view .LVU1366
 5063 0060 FFF7FEFF 		bl	HAL_DMA_Abort
 5064              	.LVL364:
 5065 0064 051E     		subs	r5, r0, #0
 5066              	.LVL365:
1827:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
 5067              		.loc 1 1827 7 is_stmt 1 view .LVU1367
1827:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       {
ARM GAS  /tmp/ccPLPcMa.s 			page 250


 5068              		.loc 1 1827 10 is_stmt 0 view .LVU1368
 5069 0066 DDD0     		beq	.L318
1830:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****       }
 5070              		.loc 1 1830 9 is_stmt 1 view .LVU1369
 5071 0068 A36D     		ldr	r3, [r4, #88]
 5072 006a 4022     		movs	r2, #64
 5073 006c 1343     		orrs	r3, r2
 5074 006e A365     		str	r3, [r4, #88]
 5075 0070 D8E7     		b	.L318
 5076              	.LVL366:
 5077              	.L319:
1846:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 5078              		.loc 1 1846 7 view .LVU1370
1846:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c ****     }
 5079              		.loc 1 1846 13 is_stmt 0 view .LVU1371
 5080 0072 2000     		movs	r0, r4
 5081 0074 FFF7FEFF 		bl	ADC_Disable
 5082              	.LVL367:
 5083 0078 DFE7     		b	.L320
 5084              	.LVL368:
 5085              	.L322:
1812:Drivers/STM32G0xx_HAL_Driver/Src/stm32g0xx_hal_adc.c **** 
 5086              		.loc 1 1812 3 view .LVU1372
 5087 007a 0225     		movs	r5, #2
 5088 007c EEE7     		b	.L316
 5089              	.L325:
 5090 007e C046     		.align	2
 5091              	.L324:
 5092 0080 FEFEFFFF 		.word	-258
 5093              		.cfi_endproc
 5094              	.LFE463:
 5096              		.text
 5097              	.Letext0:
 5098              		.file 3 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/machine/_default_types.h"
 5099              		.file 4 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/_stdint.h"
 5100              		.file 5 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/system_stm32g0xx.h"
 5101              		.file 6 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g071xx.h"
 5102              		.file 7 "Drivers/CMSIS/Device/ST/STM32G0xx/Include/stm32g0xx.h"
 5103              		.file 8 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_def.h"
 5104              		.file 9 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_dma.h"
 5105              		.file 10 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_adc.h"
 5106              		.file 11 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_flash.h"
 5107              		.file 12 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_uart.h"
 5108              		.file 13 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal.h"
 5109              		.file 14 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_ll_dma.h"
 5110              		.file 15 "Drivers/STM32G0xx_HAL_Driver/Inc/stm32g0xx_hal_adc_ex.h"
ARM GAS  /tmp/ccPLPcMa.s 			page 251


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32g0xx_hal_adc.c
     /tmp/ccPLPcMa.s:16     .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccPLPcMa.s:24     .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccPLPcMa.s:42     .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccPLPcMa.s:49     .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccPLPcMa.s:680    .text.HAL_ADC_Init:000000000000025c $d
     /tmp/ccPLPcMa.s:694    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccPLPcMa.s:701    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccPLPcMa.s:717    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccPLPcMa.s:724    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccPLPcMa.s:931    .text.HAL_ADC_PollForConversion:00000000000000b4 $d
     /tmp/ccPLPcMa.s:936    .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccPLPcMa.s:943    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccPLPcMa.s:1131   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccPLPcMa.s:1138   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccPLPcMa.s:1160   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccPLPcMa.s:1167   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccPLPcMa.s:1183   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccPLPcMa.s:1190   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccPLPcMa.s:1206   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccPLPcMa.s:1212   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccPLPcMa.s:1239   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccPLPcMa.s:1246   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccPLPcMa.s:1262   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccPLPcMa.s:1269   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccPLPcMa.s:1285   .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccPLPcMa.s:1291   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccPLPcMa.s:1328   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccPLPcMa.s:1334   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccPLPcMa.s:1480   .text.ADC_DMAConvCplt:000000000000007c $d
     /tmp/ccPLPcMa.s:1485   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccPLPcMa.s:1492   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccPLPcMa.s:1822   .text.HAL_ADC_IRQHandler:0000000000000154 $d
     /tmp/ccPLPcMa.s:1827   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccPLPcMa.s:1834   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccPLPcMa.s:2530   .text.HAL_ADC_ConfigChannel:000000000000027c $d
     /tmp/ccPLPcMa.s:2543   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccPLPcMa.s:2550   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccPLPcMa.s:3085   .text.HAL_ADC_AnalogWDGConfig:0000000000000250 $d
     /tmp/ccPLPcMa.s:3100   .text.HAL_ADC_AnalogWDGConfig:0000000000000260 $t
     /tmp/ccPLPcMa.s:3397   .text.HAL_ADC_AnalogWDGConfig:0000000000000354 $d
     /tmp/ccPLPcMa.s:3410   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccPLPcMa.s:3417   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccPLPcMa.s:3437   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccPLPcMa.s:3444   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccPLPcMa.s:3464   .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/ccPLPcMa.s:3471   .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/ccPLPcMa.s:3597   .text.ADC_ConversionStop:0000000000000054 $d
     /tmp/ccPLPcMa.s:3602   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccPLPcMa.s:3609   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccPLPcMa.s:3843   .text.ADC_Enable:00000000000000b4 $d
     /tmp/ccPLPcMa.s:3852   .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccPLPcMa.s:3859   .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccPLPcMa.s:3981   .text.HAL_ADC_Start:0000000000000060 $d
     /tmp/ccPLPcMa.s:3987   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccPLPcMa.s:3994   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
ARM GAS  /tmp/ccPLPcMa.s 			page 252


     /tmp/ccPLPcMa.s:4154   .text.HAL_ADC_Start_IT:0000000000000094 $d
     /tmp/ccPLPcMa.s:4160   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccPLPcMa.s:4167   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccPLPcMa.s:4376   .text.HAL_ADC_Start_DMA:00000000000000a8 $d
     /tmp/ccPLPcMa.s:4385   .text.ADC_Disable:0000000000000000 $t
     /tmp/ccPLPcMa.s:4392   .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/ccPLPcMa.s:4564   .text.ADC_Disable:0000000000000088 $d
     /tmp/ccPLPcMa.s:4569   .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccPLPcMa.s:4576   .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccPLPcMa.s:4740   .text.HAL_ADC_DeInit:0000000000000094 $d
     /tmp/ccPLPcMa.s:4751   .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccPLPcMa.s:4758   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccPLPcMa.s:4841   .text.HAL_ADC_Stop:0000000000000040 $d
     /tmp/ccPLPcMa.s:4846   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccPLPcMa.s:4853   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccPLPcMa.s:4942   .text.HAL_ADC_Stop_IT:000000000000004c $d
     /tmp/ccPLPcMa.s:4947   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccPLPcMa.s:4954   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccPLPcMa.s:5092   .text.HAL_ADC_Stop_DMA:0000000000000080 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
SystemCoreClock
HAL_GetTick
HAL_ADCEx_EndOfSamplingCallback
HAL_ADCEx_LevelOutOfWindow2Callback
HAL_ADCEx_LevelOutOfWindow3Callback
HAL_ADCEx_ChannelConfigReadyCallback
HAL_DMA_Start_IT
HAL_DMA_Abort
